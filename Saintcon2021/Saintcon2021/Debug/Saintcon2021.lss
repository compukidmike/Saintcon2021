
Saintcon2021.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003268  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000048  20000000  00003268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020048  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020048  2**0
                  CONTENTS
  4 .bss          0000033c  20000048  000032b0  00020048  2**2
                  ALLOC
  5 .stack        00008004  20000384  000035ec  00020048  2**0
                  ALLOC
  6 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
  7 .comment      000000c7  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  8 .debug_info   00036301  00000000  00000000  0002013f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004289  00000000  00000000  00056440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013373  00000000  00000000  0005a6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e20  00000000  00000000  0006da3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000fe8  00000000  00000000  0006e85c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002f433  00000000  00000000  0006f844  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00016795  00000000  00000000  0009ec77  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ff58f  00000000  00000000  000b540c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002518  00000000  00000000  001b499c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 83 00 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     ... ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	a9 12 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	d9 11 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     180:	f5 2b 00 00 01 2c 00 00 0d 2c 00 00 19 2c 00 00     .+...,...,...,..
     190:	dd 02 00 00 b5 1e 00 00 dd 02 00 00 dd 02 00 00     ................
     1a0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     200:	dd 02 00 00 00 00 00 00 00 00 00 00 dd 02 00 00     ................
     210:	dd 02 00 00 dd 02 00 00 dd 02 00 00 b5 2c 00 00     .............,..
     220:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     230:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     240:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     250:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000048 	.word	0x20000048
     280:	00000000 	.word	0x00000000
     284:	00003268 	.word	0x00003268

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00003268 	.word	0x00003268
     2c4:	2000004c 	.word	0x2000004c
     2c8:	00003268 	.word	0x00003268
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	000008b5 	.word	0x000008b5

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b15      	ldr	r3, [pc, #84]	; (338 <Reset_Handler+0x58>)
     2e4:	4a15      	ldr	r2, [pc, #84]	; (33c <Reset_Handler+0x5c>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d009      	beq.n	2fe <Reset_Handler+0x1e>
     2ea:	4b13      	ldr	r3, [pc, #76]	; (338 <Reset_Handler+0x58>)
     2ec:	4a13      	ldr	r2, [pc, #76]	; (33c <Reset_Handler+0x5c>)
     2ee:	e003      	b.n	2f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f0:	6811      	ldr	r1, [r2, #0]
     2f2:	6019      	str	r1, [r3, #0]
     2f4:	3304      	adds	r3, #4
     2f6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     2f8:	4911      	ldr	r1, [pc, #68]	; (340 <Reset_Handler+0x60>)
     2fa:	428b      	cmp	r3, r1
     2fc:	d3f8      	bcc.n	2f0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     2fe:	4b11      	ldr	r3, [pc, #68]	; (344 <Reset_Handler+0x64>)
     300:	e002      	b.n	308 <Reset_Handler+0x28>
                *pDest++ = 0;
     302:	2200      	movs	r2, #0
     304:	601a      	str	r2, [r3, #0]
     306:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     308:	4a0f      	ldr	r2, [pc, #60]	; (348 <Reset_Handler+0x68>)
     30a:	4293      	cmp	r3, r2
     30c:	d3f9      	bcc.n	302 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     30e:	4b0f      	ldr	r3, [pc, #60]	; (34c <Reset_Handler+0x6c>)
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x70>)
     312:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     316:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     31c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     328:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x74>)
     32e:	4798      	blx	r3
        main();
     330:	4b09      	ldr	r3, [pc, #36]	; (358 <Reset_Handler+0x78>)
     332:	4798      	blx	r3
     334:	e7fe      	b.n	334 <Reset_Handler+0x54>
     336:	bf00      	nop
     338:	20000000 	.word	0x20000000
     33c:	00003268 	.word	0x00003268
     340:	20000048 	.word	0x20000048
     344:	20000048 	.word	0x20000048
     348:	20000384 	.word	0x20000384
     34c:	e000ed00 	.word	0xe000ed00
     350:	00000000 	.word	0x00000000
     354:	00003021 	.word	0x00003021
     358:	00002c25 	.word	0x00002c25

0000035c <PTC_0_clock_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     35c:	4a04      	ldr	r2, [pc, #16]	; (370 <PTC_0_clock_init+0x14>)
     35e:	6a13      	ldr	r3, [r2, #32]
     360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     364:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     366:	2240      	movs	r2, #64	; 0x40
     368:	4b02      	ldr	r3, [pc, #8]	; (374 <PTC_0_clock_init+0x18>)
     36a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     36e:	4770      	bx	lr
     370:	40000800 	.word	0x40000800
     374:	40001c00 	.word	0x40001c00

00000378 <Timer_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void Timer_init(void)
{
     378:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     37a:	4a06      	ldr	r2, [pc, #24]	; (394 <Timer_init+0x1c>)
     37c:	6953      	ldr	r3, [r2, #20]
     37e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     382:	6153      	str	r3, [r2, #20]
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
	timer_init(&Timer, RTC, _rtc_get_timer());
     384:	4b04      	ldr	r3, [pc, #16]	; (398 <Timer_init+0x20>)
     386:	4798      	blx	r3
     388:	4602      	mov	r2, r0
     38a:	4904      	ldr	r1, [pc, #16]	; (39c <Timer_init+0x24>)
     38c:	4804      	ldr	r0, [pc, #16]	; (3a0 <Timer_init+0x28>)
     38e:	4b05      	ldr	r3, [pc, #20]	; (3a4 <Timer_init+0x2c>)
     390:	4798      	blx	r3
     392:	bd08      	pop	{r3, pc}
     394:	40000800 	.word	0x40000800
     398:	000012a5 	.word	0x000012a5
     39c:	40002400 	.word	0x40002400
     3a0:	2000030c 	.word	0x2000030c
     3a4:	00000cb1 	.word	0x00000cb1

000003a8 <QUAD_SPI_0_PORT_init>:
{
     3a8:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3aa:	4b5a      	ldr	r3, [pc, #360]	; (514 <QUAD_SPI_0_PORT_init+0x16c>)
     3ac:	f44f 6500 	mov.w	r5, #2048	; 0x800
     3b0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3b4:	4a58      	ldr	r2, [pc, #352]	; (518 <QUAD_SPI_0_PORT_init+0x170>)
     3b6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     3ba:	4858      	ldr	r0, [pc, #352]	; (51c <QUAD_SPI_0_PORT_init+0x174>)
     3bc:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3c0:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     3c4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3c8:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3cc:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d8:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3dc:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3e0:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3e4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3e8:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3ec:	f44f 7280 	mov.w	r2, #256	; 0x100
     3f0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3f2:	494b      	ldr	r1, [pc, #300]	; (520 <QUAD_SPI_0_PORT_init+0x178>)
     3f4:	6299      	str	r1, [r3, #40]	; 0x28
     3f6:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     3fa:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3fc:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3fe:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     402:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     406:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     40a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     40e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     412:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     416:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     41a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     41e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     422:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     42a:	f44f 7200 	mov.w	r2, #512	; 0x200
     42e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     430:	f501 7180 	add.w	r1, r1, #256	; 0x100
     434:	6299      	str	r1, [r3, #40]	; 0x28
     436:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     438:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     43a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     43e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     442:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     446:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     44a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     44e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     452:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     456:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     45a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     45e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     466:	f44f 6180 	mov.w	r1, #1024	; 0x400
     46a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46c:	4a2d      	ldr	r2, [pc, #180]	; (524 <QUAD_SPI_0_PORT_init+0x17c>)
     46e:	629a      	str	r2, [r3, #40]	; 0x28
     470:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     472:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     474:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     478:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     47c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     480:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     484:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     488:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     48c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     490:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     494:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     498:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     49c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4a0:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a2:	4a21      	ldr	r2, [pc, #132]	; (528 <QUAD_SPI_0_PORT_init+0x180>)
     4a4:	629a      	str	r2, [r3, #40]	; 0x28
     4a6:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4a8:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4aa:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     4ae:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4b2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4b6:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4c2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4c6:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4ce:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4d6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4da:	4a14      	ldr	r2, [pc, #80]	; (52c <QUAD_SPI_0_PORT_init+0x184>)
     4dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4e0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4e4:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     4e8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4ec:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4f0:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     4f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4f8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4fc:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     500:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     504:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     508:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     50c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
}
     510:	bc30      	pop	{r4, r5}
     512:	4770      	bx	lr
     514:	41008000 	.word	0x41008000
     518:	40020800 	.word	0x40020800
     51c:	c0020000 	.word	0xc0020000
     520:	40000100 	.word	0x40000100
     524:	40000400 	.word	0x40000400
     528:	40000800 	.word	0x40000800
     52c:	40020400 	.word	0x40020400

00000530 <QUAD_SPI_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     530:	4b06      	ldr	r3, [pc, #24]	; (54c <QUAD_SPI_0_CLOCK_init+0x1c>)
     532:	691a      	ldr	r2, [r3, #16]
     534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     538:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     53a:	691a      	ldr	r2, [r3, #16]
     53c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     540:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     542:	69da      	ldr	r2, [r3, #28]
     544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     548:	61da      	str	r2, [r3, #28]
     54a:	4770      	bx	lr
     54c:	40000800 	.word	0x40000800

00000550 <QUAD_SPI_0_init>:
{
     550:	b508      	push	{r3, lr}
	QUAD_SPI_0_CLOCK_init();
     552:	4b04      	ldr	r3, [pc, #16]	; (564 <QUAD_SPI_0_init+0x14>)
     554:	4798      	blx	r3
	qspi_sync_init(&QUAD_SPI_0, QSPI);
     556:	4904      	ldr	r1, [pc, #16]	; (568 <QUAD_SPI_0_init+0x18>)
     558:	4804      	ldr	r0, [pc, #16]	; (56c <QUAD_SPI_0_init+0x1c>)
     55a:	4b05      	ldr	r3, [pc, #20]	; (570 <QUAD_SPI_0_init+0x20>)
     55c:	4798      	blx	r3
	QUAD_SPI_0_PORT_init();
     55e:	4b05      	ldr	r3, [pc, #20]	; (574 <QUAD_SPI_0_init+0x24>)
     560:	4798      	blx	r3
     562:	bd08      	pop	{r3, pc}
     564:	00000531 	.word	0x00000531
     568:	42003400 	.word	0x42003400
     56c:	20000340 	.word	0x20000340
     570:	00000ab5 	.word	0x00000ab5
     574:	000003a9 	.word	0x000003a9

00000578 <I2C_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     578:	4b16      	ldr	r3, [pc, #88]	; (5d4 <I2C_0_PORT_init+0x5c>)
     57a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     57e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     586:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     58a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     58e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     596:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     59a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     59e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a6:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     5aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5c6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5ca:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     5d2:	4770      	bx	lr
     5d4:	41008000 	.word	0x41008000

000005d8 <I2C_0_CLOCK_init>:
     5d8:	4b06      	ldr	r3, [pc, #24]	; (5f4 <I2C_0_CLOCK_init+0x1c>)
     5da:	2240      	movs	r2, #64	; 0x40
     5dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     5e0:	2243      	movs	r2, #67	; 0x43
     5e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     5e6:	4a04      	ldr	r2, [pc, #16]	; (5f8 <I2C_0_CLOCK_init+0x20>)
     5e8:	6953      	ldr	r3, [r2, #20]
     5ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     5ee:	6153      	str	r3, [r2, #20]
     5f0:	4770      	bx	lr
     5f2:	bf00      	nop
     5f4:	40001c00 	.word	0x40001c00
     5f8:	40000800 	.word	0x40000800

000005fc <I2C_0_init>:

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
}

void I2C_0_init(void)
{
     5fc:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     5fe:	4b04      	ldr	r3, [pc, #16]	; (610 <I2C_0_init+0x14>)
     600:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM1);
     602:	4904      	ldr	r1, [pc, #16]	; (614 <I2C_0_init+0x18>)
     604:	4804      	ldr	r0, [pc, #16]	; (618 <I2C_0_init+0x1c>)
     606:	4b05      	ldr	r3, [pc, #20]	; (61c <I2C_0_init+0x20>)
     608:	4798      	blx	r3
	I2C_0_PORT_init();
     60a:	4b05      	ldr	r3, [pc, #20]	; (620 <I2C_0_init+0x24>)
     60c:	4798      	blx	r3
     60e:	bd08      	pop	{r3, pc}
     610:	000005d9 	.word	0x000005d9
     614:	40003400 	.word	0x40003400
     618:	20000344 	.word	0x20000344
     61c:	00000975 	.word	0x00000975
     620:	00000579 	.word	0x00000579

00000624 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     624:	4b2e      	ldr	r3, [pc, #184]	; (6e0 <SPI_0_PORT_init+0xbc>)
     626:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     62e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     632:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     636:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     63a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     63e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     642:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     646:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     64a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     64e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     652:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     656:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     65a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     65e:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     662:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     666:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     66a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     66e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     672:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     676:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     67a:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     67e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     682:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     686:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     68a:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     68e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     692:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     696:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     69a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     69e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6a2:	4a10      	ldr	r2, [pc, #64]	; (6e4 <SPI_0_PORT_init+0xc0>)
     6a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     6a8:	f1a2 2280 	sub.w	r2, r2, #2147516416	; 0x80008000
     6ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6b0:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
     6b4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6b8:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6bc:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     6c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6c4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c8:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6cc:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6d0:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6d4:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d8:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
     6dc:	4770      	bx	lr
     6de:	bf00      	nop
     6e0:	41008000 	.word	0x41008000
     6e4:	40028000 	.word	0x40028000

000006e8 <SPI_0_CLOCK_init>:
     6e8:	4b06      	ldr	r3, [pc, #24]	; (704 <SPI_0_CLOCK_init+0x1c>)
     6ea:	2240      	movs	r2, #64	; 0x40
     6ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     6f0:	2243      	movs	r2, #67	; 0x43
     6f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     6f6:	4a04      	ldr	r2, [pc, #16]	; (708 <SPI_0_CLOCK_init+0x20>)
     6f8:	6a13      	ldr	r3, [r2, #32]
     6fa:	f043 0301 	orr.w	r3, r3, #1
     6fe:	6213      	str	r3, [r2, #32]
     700:	4770      	bx	lr
     702:	bf00      	nop
     704:	40001c00 	.word	0x40001c00
     708:	40000800 	.word	0x40000800

0000070c <SPI_0_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void SPI_0_init(void)
{
     70c:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     70e:	4b05      	ldr	r3, [pc, #20]	; (724 <SPI_0_init+0x18>)
     710:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM4);
     712:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     716:	4804      	ldr	r0, [pc, #16]	; (728 <SPI_0_init+0x1c>)
     718:	4b04      	ldr	r3, [pc, #16]	; (72c <SPI_0_init+0x20>)
     71a:	4798      	blx	r3
	SPI_0_PORT_init();
     71c:	4b04      	ldr	r3, [pc, #16]	; (730 <SPI_0_init+0x24>)
     71e:	4798      	blx	r3
     720:	bd08      	pop	{r3, pc}
     722:	bf00      	nop
     724:	000006e9 	.word	0x000006e9
     728:	20000328 	.word	0x20000328
     72c:	00000ae9 	.word	0x00000ae9
     730:	00000625 	.word	0x00000625

00000734 <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     734:	4b18      	ldr	r3, [pc, #96]	; (798 <PWM_0_PORT_init+0x64>)
     736:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     73a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     73e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     742:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     746:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     74a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     74e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     752:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     756:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     75a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     75e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     762:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     766:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     76a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     76e:	f042 0206 	orr.w	r2, r2, #6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     772:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     776:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     77a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     77e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     782:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     786:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     78a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     78e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     792:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     796:	4770      	bx	lr
     798:	41008000 	.word	0x41008000

0000079c <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     79c:	4a04      	ldr	r2, [pc, #16]	; (7b0 <PWM_0_CLOCK_init+0x14>)
     79e:	6993      	ldr	r3, [r2, #24]
     7a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     7a4:	6193      	str	r3, [r2, #24]
     7a6:	2240      	movs	r2, #64	; 0x40
     7a8:	4b02      	ldr	r3, [pc, #8]	; (7b4 <PWM_0_CLOCK_init+0x18>)
     7aa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
     7ae:	4770      	bx	lr
     7b0:	40000800 	.word	0x40000800
     7b4:	40001c00 	.word	0x40001c00

000007b8 <PWM_0_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
     7b8:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     7ba:	4b06      	ldr	r3, [pc, #24]	; (7d4 <PWM_0_init+0x1c>)
     7bc:	4798      	blx	r3
	PWM_0_PORT_init();
     7be:	4b06      	ldr	r3, [pc, #24]	; (7d8 <PWM_0_init+0x20>)
     7c0:	4798      	blx	r3
	pwm_init(&PWM_0, TCC0, _tcc_get_pwm());
     7c2:	4b06      	ldr	r3, [pc, #24]	; (7dc <PWM_0_init+0x24>)
     7c4:	4798      	blx	r3
     7c6:	4602      	mov	r2, r0
     7c8:	4905      	ldr	r1, [pc, #20]	; (7e0 <PWM_0_init+0x28>)
     7ca:	4806      	ldr	r0, [pc, #24]	; (7e4 <PWM_0_init+0x2c>)
     7cc:	4b06      	ldr	r3, [pc, #24]	; (7e8 <PWM_0_init+0x30>)
     7ce:	4798      	blx	r3
     7d0:	bd08      	pop	{r3, pc}
     7d2:	bf00      	nop
     7d4:	0000079d 	.word	0x0000079d
     7d8:	00000735 	.word	0x00000735
     7dc:	00001eaf 	.word	0x00001eaf
     7e0:	41016000 	.word	0x41016000
     7e4:	200002f0 	.word	0x200002f0
     7e8:	000009c9 	.word	0x000009c9

000007ec <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7ec:	4b1e      	ldr	r3, [pc, #120]	; (868 <USB_0_PORT_init+0x7c>)
     7ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     7f2:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     7f8:	6299      	str	r1, [r3, #40]	; 0x28
     7fa:	481c      	ldr	r0, [pc, #112]	; (86c <USB_0_PORT_init+0x80>)
     7fc:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7fe:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     800:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     804:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     808:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     810:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     814:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     818:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     820:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     824:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     82c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     830:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     832:	6299      	str	r1, [r3, #40]	; 0x28
     834:	490e      	ldr	r1, [pc, #56]	; (870 <USB_0_PORT_init+0x84>)
     836:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     838:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     83a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     83e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     842:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     846:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     84a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     84e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     852:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     856:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     85a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     85e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     866:	4770      	bx	lr
     868:	41008000 	.word	0x41008000
     86c:	c0000100 	.word	0xc0000100
     870:	c0000200 	.word	0xc0000200

00000874 <USB_0_CLOCK_init>:
     874:	2240      	movs	r2, #64	; 0x40
     876:	4b07      	ldr	r3, [pc, #28]	; (894 <USB_0_CLOCK_init+0x20>)
     878:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     87c:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     880:	691a      	ldr	r2, [r3, #16]
     882:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     886:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     888:	699a      	ldr	r2, [r3, #24]
     88a:	f042 0201 	orr.w	r2, r2, #1
     88e:	619a      	str	r2, [r3, #24]
     890:	4770      	bx	lr
     892:	bf00      	nop
     894:	40001c00 	.word	0x40001c00

00000898 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     898:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     89a:	4b03      	ldr	r3, [pc, #12]	; (8a8 <USB_0_init+0x10>)
     89c:	4798      	blx	r3
	usb_d_init();
     89e:	4b03      	ldr	r3, [pc, #12]	; (8ac <USB_0_init+0x14>)
     8a0:	4798      	blx	r3
	USB_0_PORT_init();
     8a2:	4b03      	ldr	r3, [pc, #12]	; (8b0 <USB_0_init+0x18>)
     8a4:	4798      	blx	r3
     8a6:	bd08      	pop	{r3, pc}
     8a8:	00000875 	.word	0x00000875
     8ac:	00000f4d 	.word	0x00000f4d
     8b0:	000007ed 	.word	0x000007ed

000008b4 <system_init>:
}

void system_init(void)
{
     8b4:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     8b6:	4b08      	ldr	r3, [pc, #32]	; (8d8 <system_init+0x24>)
     8b8:	4798      	blx	r3
	init_mcu();

	PTC_0_clock_init();
     8ba:	4b08      	ldr	r3, [pc, #32]	; (8dc <system_init+0x28>)
     8bc:	4798      	blx	r3

	QUAD_SPI_0_init();
     8be:	4b08      	ldr	r3, [pc, #32]	; (8e0 <system_init+0x2c>)
     8c0:	4798      	blx	r3

	Timer_init();
     8c2:	4b08      	ldr	r3, [pc, #32]	; (8e4 <system_init+0x30>)
     8c4:	4798      	blx	r3

	I2C_0_init();
     8c6:	4b08      	ldr	r3, [pc, #32]	; (8e8 <system_init+0x34>)
     8c8:	4798      	blx	r3

	SPI_0_init();
     8ca:	4b08      	ldr	r3, [pc, #32]	; (8ec <system_init+0x38>)
     8cc:	4798      	blx	r3

	PWM_0_init();
     8ce:	4b08      	ldr	r3, [pc, #32]	; (8f0 <system_init+0x3c>)
     8d0:	4798      	blx	r3

	USB_0_init();
     8d2:	4b08      	ldr	r3, [pc, #32]	; (8f4 <system_init+0x40>)
     8d4:	4798      	blx	r3
     8d6:	bd08      	pop	{r3, pc}
     8d8:	00001019 	.word	0x00001019
     8dc:	0000035d 	.word	0x0000035d
     8e0:	00000551 	.word	0x00000551
     8e4:	00000379 	.word	0x00000379
     8e8:	000005fd 	.word	0x000005fd
     8ec:	0000070d 	.word	0x0000070d
     8f0:	000007b9 	.word	0x000007b9
     8f4:	00000899 	.word	0x00000899

000008f8 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     8f8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     8fc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     8fe:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     900:	f3bf 8f5f 	dmb	sy
     904:	4770      	bx	lr

00000906 <atomic_leave_critical>:
     906:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     90a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     90c:	f383 8810 	msr	PRIMASK, r3
     910:	4770      	bx	lr
	...

00000914 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     914:	b510      	push	{r4, lr}
     916:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     918:	8903      	ldrh	r3, [r0, #8]
     91a:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     91e:	4614      	mov	r4, r2
     920:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     926:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     92a:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     92c:	a901      	add	r1, sp, #4
     92e:	3814      	subs	r0, #20
     930:	4b03      	ldr	r3, [pc, #12]	; (940 <i2c_m_sync_write+0x2c>)
     932:	4798      	blx	r3

	if (ret) {
     934:	b910      	cbnz	r0, 93c <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
     936:	4620      	mov	r0, r4
     938:	b004      	add	sp, #16
     93a:	bd10      	pop	{r4, pc}
		return ret;
     93c:	4604      	mov	r4, r0
     93e:	e7fa      	b.n	936 <i2c_m_sync_write+0x22>
     940:	000016d5 	.word	0x000016d5

00000944 <i2c_m_sync_read>:
{
     944:	b510      	push	{r4, lr}
     946:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     948:	8903      	ldrh	r3, [r0, #8]
     94a:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     94e:	4614      	mov	r4, r2
     950:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     952:	f248 0301 	movw	r3, #32769	; 0x8001
     956:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
     95a:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     95c:	a901      	add	r1, sp, #4
     95e:	3814      	subs	r0, #20
     960:	4b03      	ldr	r3, [pc, #12]	; (970 <i2c_m_sync_read+0x2c>)
     962:	4798      	blx	r3
	if (ret) {
     964:	b910      	cbnz	r0, 96c <i2c_m_sync_read+0x28>
}
     966:	4620      	mov	r0, r4
     968:	b004      	add	sp, #16
     96a:	bd10      	pop	{r4, pc}
		return ret;
     96c:	4604      	mov	r4, r0
     96e:	e7fa      	b.n	966 <i2c_m_sync_read+0x22>
     970:	000016d5 	.word	0x000016d5

00000974 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     974:	b538      	push	{r3, r4, r5, lr}
     976:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     978:	4604      	mov	r4, r0
     97a:	225e      	movs	r2, #94	; 0x5e
     97c:	4908      	ldr	r1, [pc, #32]	; (9a0 <i2c_m_sync_init+0x2c>)
     97e:	3000      	adds	r0, #0
     980:	bf18      	it	ne
     982:	2001      	movne	r0, #1
     984:	4b07      	ldr	r3, [pc, #28]	; (9a4 <i2c_m_sync_init+0x30>)
     986:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     988:	4629      	mov	r1, r5
     98a:	4620      	mov	r0, r4
     98c:	4b06      	ldr	r3, [pc, #24]	; (9a8 <i2c_m_sync_init+0x34>)
     98e:	4798      	blx	r3
	if (init_status) {
     990:	4603      	mov	r3, r0
     992:	b918      	cbnz	r0, 99c <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     994:	4a05      	ldr	r2, [pc, #20]	; (9ac <i2c_m_sync_init+0x38>)
     996:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     998:	4a05      	ldr	r2, [pc, #20]	; (9b0 <i2c_m_sync_init+0x3c>)
     99a:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
     99c:	4618      	mov	r0, r3
     99e:	bd38      	pop	{r3, r4, r5, pc}
     9a0:	00003090 	.word	0x00003090
     9a4:	00000fb9 	.word	0x00000fb9
     9a8:	000016a5 	.word	0x000016a5
     9ac:	00000945 	.word	0x00000945
     9b0:	00000915 	.word	0x00000915

000009b4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     9b4:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     9b6:	6943      	ldr	r3, [r0, #20]
     9b8:	b103      	cbz	r3, 9bc <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
     9ba:	4798      	blx	r3
     9bc:	bd08      	pop	{r3, pc}

000009be <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     9be:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     9c0:	6983      	ldr	r3, [r0, #24]
     9c2:	b103      	cbz	r3, 9c6 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
     9c4:	4798      	blx	r3
     9c6:	bd08      	pop	{r3, pc}

000009c8 <pwm_init>:
{
     9c8:	b538      	push	{r3, r4, r5, lr}
     9ca:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     9cc:	4604      	mov	r4, r0
     9ce:	b188      	cbz	r0, 9f4 <pwm_init+0x2c>
     9d0:	b171      	cbz	r1, 9f0 <pwm_init+0x28>
     9d2:	2001      	movs	r0, #1
     9d4:	2233      	movs	r2, #51	; 0x33
     9d6:	4908      	ldr	r1, [pc, #32]	; (9f8 <pwm_init+0x30>)
     9d8:	4b08      	ldr	r3, [pc, #32]	; (9fc <pwm_init+0x34>)
     9da:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     9dc:	4629      	mov	r1, r5
     9de:	4620      	mov	r0, r4
     9e0:	4b07      	ldr	r3, [pc, #28]	; (a00 <pwm_init+0x38>)
     9e2:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     9e4:	4b07      	ldr	r3, [pc, #28]	; (a04 <pwm_init+0x3c>)
     9e6:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     9e8:	4b07      	ldr	r3, [pc, #28]	; (a08 <pwm_init+0x40>)
     9ea:	6063      	str	r3, [r4, #4]
}
     9ec:	2000      	movs	r0, #0
     9ee:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     9f0:	2000      	movs	r0, #0
     9f2:	e7ef      	b.n	9d4 <pwm_init+0xc>
     9f4:	2000      	movs	r0, #0
     9f6:	e7ed      	b.n	9d4 <pwm_init+0xc>
     9f8:	000030ac 	.word	0x000030ac
     9fc:	00000fb9 	.word	0x00000fb9
     a00:	00001cb9 	.word	0x00001cb9
     a04:	000009b5 	.word	0x000009b5
     a08:	000009bf 	.word	0x000009bf

00000a0c <pwm_enable>:
{
     a0c:	b510      	push	{r4, lr}
	ASSERT(descr);
     a0e:	4604      	mov	r4, r0
     a10:	224a      	movs	r2, #74	; 0x4a
     a12:	4909      	ldr	r1, [pc, #36]	; (a38 <pwm_enable+0x2c>)
     a14:	3000      	adds	r0, #0
     a16:	bf18      	it	ne
     a18:	2001      	movne	r0, #1
     a1a:	4b08      	ldr	r3, [pc, #32]	; (a3c <pwm_enable+0x30>)
     a1c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
     a1e:	4620      	mov	r0, r4
     a20:	4b07      	ldr	r3, [pc, #28]	; (a40 <pwm_enable+0x34>)
     a22:	4798      	blx	r3
     a24:	b920      	cbnz	r0, a30 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
     a26:	4620      	mov	r0, r4
     a28:	4b06      	ldr	r3, [pc, #24]	; (a44 <pwm_enable+0x38>)
     a2a:	4798      	blx	r3
	return ERR_NONE;
     a2c:	2000      	movs	r0, #0
     a2e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     a30:	f06f 0010 	mvn.w	r0, #16
}
     a34:	bd10      	pop	{r4, pc}
     a36:	bf00      	nop
     a38:	000030ac 	.word	0x000030ac
     a3c:	00000fb9 	.word	0x00000fb9
     a40:	00001e9d 	.word	0x00001e9d
     a44:	00001e55 	.word	0x00001e55

00000a48 <pwm_disable>:
{
     a48:	b510      	push	{r4, lr}
	ASSERT(descr);
     a4a:	4604      	mov	r4, r0
     a4c:	2258      	movs	r2, #88	; 0x58
     a4e:	4909      	ldr	r1, [pc, #36]	; (a74 <pwm_disable+0x2c>)
     a50:	3000      	adds	r0, #0
     a52:	bf18      	it	ne
     a54:	2001      	movne	r0, #1
     a56:	4b08      	ldr	r3, [pc, #32]	; (a78 <pwm_disable+0x30>)
     a58:	4798      	blx	r3
	if (!_pwm_is_enabled(&descr->device)) {
     a5a:	4620      	mov	r0, r4
     a5c:	4b07      	ldr	r3, [pc, #28]	; (a7c <pwm_disable+0x34>)
     a5e:	4798      	blx	r3
     a60:	b120      	cbz	r0, a6c <pwm_disable+0x24>
	_pwm_disable(&descr->device);
     a62:	4620      	mov	r0, r4
     a64:	4b06      	ldr	r3, [pc, #24]	; (a80 <pwm_disable+0x38>)
     a66:	4798      	blx	r3
	return ERR_NONE;
     a68:	2000      	movs	r0, #0
     a6a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     a6c:	f06f 0010 	mvn.w	r0, #16
}
     a70:	bd10      	pop	{r4, pc}
     a72:	bf00      	nop
     a74:	000030ac 	.word	0x000030ac
     a78:	00000fb9 	.word	0x00000fb9
     a7c:	00001e9d 	.word	0x00001e9d
     a80:	00001e69 	.word	0x00001e69

00000a84 <pwm_set_parameters>:
{
     a84:	b570      	push	{r4, r5, r6, lr}
     a86:	460d      	mov	r5, r1
     a88:	4616      	mov	r6, r2
	ASSERT(descr);
     a8a:	4604      	mov	r4, r0
     a8c:	227c      	movs	r2, #124	; 0x7c
     a8e:	4906      	ldr	r1, [pc, #24]	; (aa8 <pwm_set_parameters+0x24>)
     a90:	3000      	adds	r0, #0
     a92:	bf18      	it	ne
     a94:	2001      	movne	r0, #1
     a96:	4b05      	ldr	r3, [pc, #20]	; (aac <pwm_set_parameters+0x28>)
     a98:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
     a9a:	4632      	mov	r2, r6
     a9c:	4629      	mov	r1, r5
     a9e:	4620      	mov	r0, r4
     aa0:	4b03      	ldr	r3, [pc, #12]	; (ab0 <pwm_set_parameters+0x2c>)
     aa2:	4798      	blx	r3
}
     aa4:	2000      	movs	r0, #0
     aa6:	bd70      	pop	{r4, r5, r6, pc}
     aa8:	000030ac 	.word	0x000030ac
     aac:	00000fb9 	.word	0x00000fb9
     ab0:	00001e7d 	.word	0x00001e7d

00000ab4 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
     ab4:	b538      	push	{r3, r4, r5, lr}
     ab6:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
     ab8:	4605      	mov	r5, r0
     aba:	b160      	cbz	r0, ad6 <qspi_sync_init+0x22>
     abc:	b149      	cbz	r1, ad2 <qspi_sync_init+0x1e>
     abe:	2001      	movs	r0, #1
     ac0:	2231      	movs	r2, #49	; 0x31
     ac2:	4906      	ldr	r1, [pc, #24]	; (adc <qspi_sync_init+0x28>)
     ac4:	4b06      	ldr	r3, [pc, #24]	; (ae0 <qspi_sync_init+0x2c>)
     ac6:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
     ac8:	4621      	mov	r1, r4
     aca:	4628      	mov	r0, r5
     acc:	4b05      	ldr	r3, [pc, #20]	; (ae4 <qspi_sync_init+0x30>)
     ace:	4798      	blx	r3
}
     ad0:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(qspi && hw);
     ad2:	2000      	movs	r0, #0
     ad4:	e7f4      	b.n	ac0 <qspi_sync_init+0xc>
     ad6:	2000      	movs	r0, #0
     ad8:	e7f2      	b.n	ac0 <qspi_sync_init+0xc>
     ada:	bf00      	nop
     adc:	000030c4 	.word	0x000030c4
     ae0:	00000fb9 	.word	0x00000fb9
     ae4:	000011a1 	.word	0x000011a1

00000ae8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     ae8:	b538      	push	{r3, r4, r5, lr}
     aea:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     aec:	4604      	mov	r4, r0
     aee:	b1c0      	cbz	r0, b22 <spi_m_sync_init+0x3a>
     af0:	b1a9      	cbz	r1, b1e <spi_m_sync_init+0x36>
     af2:	2001      	movs	r0, #1
     af4:	2240      	movs	r2, #64	; 0x40
     af6:	490c      	ldr	r1, [pc, #48]	; (b28 <spi_m_sync_init+0x40>)
     af8:	4b0c      	ldr	r3, [pc, #48]	; (b2c <spi_m_sync_init+0x44>)
     afa:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     afc:	4620      	mov	r0, r4
     afe:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
     b02:	4629      	mov	r1, r5
     b04:	4b0a      	ldr	r3, [pc, #40]	; (b30 <spi_m_sync_init+0x48>)
     b06:	4798      	blx	r3

	if (rc < 0) {
     b08:	2800      	cmp	r0, #0
     b0a:	db07      	blt.n	b1c <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     b0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     b10:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     b12:	4b08      	ldr	r3, [pc, #32]	; (b34 <spi_m_sync_init+0x4c>)
     b14:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     b16:	4b08      	ldr	r3, [pc, #32]	; (b38 <spi_m_sync_init+0x50>)
     b18:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     b1a:	2000      	movs	r0, #0
}
     b1c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(spi && hw);
     b1e:	2000      	movs	r0, #0
     b20:	e7e8      	b.n	af4 <spi_m_sync_init+0xc>
     b22:	2000      	movs	r0, #0
     b24:	e7e6      	b.n	af4 <spi_m_sync_init+0xc>
     b26:	bf00      	nop
     b28:	000030e0 	.word	0x000030e0
     b2c:	00000fb9 	.word	0x00000fb9
     b30:	00001985 	.word	0x00001985
     b34:	00000bbd 	.word	0x00000bbd
     b38:	00000b81 	.word	0x00000b81

00000b3c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     b3c:	b530      	push	{r4, r5, lr}
     b3e:	b085      	sub	sp, #20
     b40:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     b42:	4605      	mov	r5, r0
     b44:	b198      	cbz	r0, b6e <spi_m_sync_transfer+0x32>
     b46:	b181      	cbz	r1, b6a <spi_m_sync_transfer+0x2e>
     b48:	2001      	movs	r0, #1
     b4a:	22b3      	movs	r2, #179	; 0xb3
     b4c:	4909      	ldr	r1, [pc, #36]	; (b74 <spi_m_sync_transfer+0x38>)
     b4e:	4b0a      	ldr	r3, [pc, #40]	; (b78 <spi_m_sync_transfer+0x3c>)
     b50:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     b52:	6823      	ldr	r3, [r4, #0]
     b54:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
     b56:	6863      	ldr	r3, [r4, #4]
     b58:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
     b5a:	68a3      	ldr	r3, [r4, #8]
     b5c:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     b5e:	a901      	add	r1, sp, #4
     b60:	1d28      	adds	r0, r5, #4
     b62:	4b06      	ldr	r3, [pc, #24]	; (b7c <spi_m_sync_transfer+0x40>)
     b64:	4798      	blx	r3
}
     b66:	b005      	add	sp, #20
     b68:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     b6a:	2000      	movs	r0, #0
     b6c:	e7ed      	b.n	b4a <spi_m_sync_transfer+0xe>
     b6e:	2000      	movs	r0, #0
     b70:	e7eb      	b.n	b4a <spi_m_sync_transfer+0xe>
     b72:	bf00      	nop
     b74:	000030e0 	.word	0x000030e0
     b78:	00000fb9 	.word	0x00000fb9
     b7c:	00001b01 	.word	0x00001b01

00000b80 <_spi_m_sync_io_write>:
{
     b80:	b570      	push	{r4, r5, r6, lr}
     b82:	b084      	sub	sp, #16
     b84:	460e      	mov	r6, r1
     b86:	4615      	mov	r5, r2
	ASSERT(io);
     b88:	4604      	mov	r4, r0
     b8a:	22a3      	movs	r2, #163	; 0xa3
     b8c:	4908      	ldr	r1, [pc, #32]	; (bb0 <_spi_m_sync_io_write+0x30>)
     b8e:	3000      	adds	r0, #0
     b90:	bf18      	it	ne
     b92:	2001      	movne	r0, #1
     b94:	4b07      	ldr	r3, [pc, #28]	; (bb4 <_spi_m_sync_io_write+0x34>)
     b96:	4798      	blx	r3
	xfer.rxbuf = 0;
     b98:	2300      	movs	r3, #0
     b9a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     b9c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     b9e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     ba0:	a901      	add	r1, sp, #4
     ba2:	f1a4 000c 	sub.w	r0, r4, #12
     ba6:	4b04      	ldr	r3, [pc, #16]	; (bb8 <_spi_m_sync_io_write+0x38>)
     ba8:	4798      	blx	r3
}
     baa:	b004      	add	sp, #16
     bac:	bd70      	pop	{r4, r5, r6, pc}
     bae:	bf00      	nop
     bb0:	000030e0 	.word	0x000030e0
     bb4:	00000fb9 	.word	0x00000fb9
     bb8:	00000b3d 	.word	0x00000b3d

00000bbc <_spi_m_sync_io_read>:
{
     bbc:	b570      	push	{r4, r5, r6, lr}
     bbe:	b084      	sub	sp, #16
     bc0:	460e      	mov	r6, r1
     bc2:	4615      	mov	r5, r2
	ASSERT(io);
     bc4:	4604      	mov	r4, r0
     bc6:	2287      	movs	r2, #135	; 0x87
     bc8:	4908      	ldr	r1, [pc, #32]	; (bec <_spi_m_sync_io_read+0x30>)
     bca:	3000      	adds	r0, #0
     bcc:	bf18      	it	ne
     bce:	2001      	movne	r0, #1
     bd0:	4b07      	ldr	r3, [pc, #28]	; (bf0 <_spi_m_sync_io_read+0x34>)
     bd2:	4798      	blx	r3
	xfer.rxbuf = buf;
     bd4:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     bd6:	2300      	movs	r3, #0
     bd8:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     bda:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     bdc:	a901      	add	r1, sp, #4
     bde:	f1a4 000c 	sub.w	r0, r4, #12
     be2:	4b04      	ldr	r3, [pc, #16]	; (bf4 <_spi_m_sync_io_read+0x38>)
     be4:	4798      	blx	r3
}
     be6:	b004      	add	sp, #16
     be8:	bd70      	pop	{r4, r5, r6, pc}
     bea:	bf00      	nop
     bec:	000030e0 	.word	0x000030e0
     bf0:	00000fb9 	.word	0x00000fb9
     bf4:	00000b3d 	.word	0x00000b3d

00000bf8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     bfa:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     bfc:	b117      	cbz	r7, c04 <timer_add_timer_task+0xc>
     bfe:	463c      	mov	r4, r7
     c00:	2600      	movs	r6, #0
     c02:	e00b      	b.n	c1c <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
     c04:	4b0e      	ldr	r3, [pc, #56]	; (c40 <timer_add_timer_task+0x48>)
     c06:	4798      	blx	r3
		return;
     c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     c0a:	68a5      	ldr	r5, [r4, #8]
     c0c:	442b      	add	r3, r5
     c0e:	1a9b      	subs	r3, r3, r2
     c10:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
     c12:	688d      	ldr	r5, [r1, #8]
     c14:	42ab      	cmp	r3, r5
     c16:	d209      	bcs.n	c2c <timer_add_timer_task+0x34>
			break;
		prev = it;
     c18:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     c1a:	6824      	ldr	r4, [r4, #0]
     c1c:	b134      	cbz	r4, c2c <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
     c1e:	6863      	ldr	r3, [r4, #4]
     c20:	4293      	cmp	r3, r2
     c22:	d8f2      	bhi.n	c0a <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
     c24:	68a5      	ldr	r5, [r4, #8]
     c26:	1a9b      	subs	r3, r3, r2
     c28:	442b      	add	r3, r5
     c2a:	e7f2      	b.n	c12 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
     c2c:	42bc      	cmp	r4, r7
     c2e:	d003      	beq.n	c38 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     c30:	4630      	mov	r0, r6
     c32:	4b04      	ldr	r3, [pc, #16]	; (c44 <timer_add_timer_task+0x4c>)
     c34:	4798      	blx	r3
     c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     c38:	4b01      	ldr	r3, [pc, #4]	; (c40 <timer_add_timer_task+0x48>)
     c3a:	4798      	blx	r3
     c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c3e:	bf00      	nop
     c40:	00000fd5 	.word	0x00000fd5
     c44:	00001001 	.word	0x00001001

00000c48 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c4a:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     c4c:	6906      	ldr	r6, [r0, #16]
     c4e:	3601      	adds	r6, #1
     c50:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     c52:	7e03      	ldrb	r3, [r0, #24]
     c54:	f013 0f01 	tst.w	r3, #1
     c58:	d105      	bne.n	c66 <timer_process_counted+0x1e>
     c5a:	7e03      	ldrb	r3, [r0, #24]
     c5c:	f013 0f02 	tst.w	r3, #2
     c60:	d101      	bne.n	c66 <timer_process_counted+0x1e>
     c62:	4605      	mov	r5, r0
     c64:	e009      	b.n	c7a <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     c66:	7e03      	ldrb	r3, [r0, #24]
     c68:	f043 0302 	orr.w	r3, r3, #2
     c6c:	7603      	strb	r3, [r0, #24]
		return;
     c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c70:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     c72:	68e3      	ldr	r3, [r4, #12]
     c74:	4620      	mov	r0, r4
     c76:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     c78:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     c7a:	b19c      	cbz	r4, ca4 <timer_process_counted+0x5c>
     c7c:	6863      	ldr	r3, [r4, #4]
     c7e:	1af3      	subs	r3, r6, r3
     c80:	68a2      	ldr	r2, [r4, #8]
     c82:	4293      	cmp	r3, r2
     c84:	d30e      	bcc.n	ca4 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
     c86:	f105 0714 	add.w	r7, r5, #20
     c8a:	4638      	mov	r0, r7
     c8c:	4b06      	ldr	r3, [pc, #24]	; (ca8 <timer_process_counted+0x60>)
     c8e:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     c90:	7c23      	ldrb	r3, [r4, #16]
     c92:	2b01      	cmp	r3, #1
     c94:	d1ec      	bne.n	c70 <timer_process_counted+0x28>
			tmp->time_label = time;
     c96:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     c98:	4632      	mov	r2, r6
     c9a:	4621      	mov	r1, r4
     c9c:	4638      	mov	r0, r7
     c9e:	4b03      	ldr	r3, [pc, #12]	; (cac <timer_process_counted+0x64>)
     ca0:	4798      	blx	r3
     ca2:	e7e5      	b.n	c70 <timer_process_counted+0x28>
     ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ca6:	bf00      	nop
     ca8:	00001009 	.word	0x00001009
     cac:	00000bf9 	.word	0x00000bf9

00000cb0 <timer_init>:
{
     cb0:	b538      	push	{r3, r4, r5, lr}
     cb2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     cb4:	4604      	mov	r4, r0
     cb6:	b180      	cbz	r0, cda <timer_init+0x2a>
     cb8:	b169      	cbz	r1, cd6 <timer_init+0x26>
     cba:	2001      	movs	r0, #1
     cbc:	223b      	movs	r2, #59	; 0x3b
     cbe:	4908      	ldr	r1, [pc, #32]	; (ce0 <timer_init+0x30>)
     cc0:	4b08      	ldr	r3, [pc, #32]	; (ce4 <timer_init+0x34>)
     cc2:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     cc4:	4629      	mov	r1, r5
     cc6:	4620      	mov	r0, r4
     cc8:	4b07      	ldr	r3, [pc, #28]	; (ce8 <timer_init+0x38>)
     cca:	4798      	blx	r3
	descr->time                           = 0;
     ccc:	2000      	movs	r0, #0
     cce:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     cd0:	4b06      	ldr	r3, [pc, #24]	; (cec <timer_init+0x3c>)
     cd2:	6023      	str	r3, [r4, #0]
}
     cd4:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     cd6:	2000      	movs	r0, #0
     cd8:	e7f0      	b.n	cbc <timer_init+0xc>
     cda:	2000      	movs	r0, #0
     cdc:	e7ee      	b.n	cbc <timer_init+0xc>
     cde:	bf00      	nop
     ce0:	000030fc 	.word	0x000030fc
     ce4:	00000fb9 	.word	0x00000fb9
     ce8:	0000123d 	.word	0x0000123d
     cec:	00000c49 	.word	0x00000c49

00000cf0 <_usb_d_find_ep>:
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     cf0:	2300      	movs	r3, #0
     cf2:	2b03      	cmp	r3, #3
     cf4:	dc21      	bgt.n	d3a <_usb_d_find_ep+0x4a>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     cf6:	4a13      	ldr	r2, [pc, #76]	; (d44 <_usb_d_find_ep+0x54>)
     cf8:	eb02 1243 	add.w	r2, r2, r3, lsl #5
     cfc:	7851      	ldrb	r1, [r2, #1]
     cfe:	4281      	cmp	r1, r0
     d00:	d01d      	beq.n	d3e <_usb_d_find_ep+0x4e>
{
     d02:	b410      	push	{r4}
     d04:	e009      	b.n	d1a <_usb_d_find_ep+0x2a>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     d06:	3301      	adds	r3, #1
     d08:	b25b      	sxtb	r3, r3
     d0a:	2b03      	cmp	r3, #3
     d0c:	dc0f      	bgt.n	d2e <_usb_d_find_ep+0x3e>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     d0e:	4a0d      	ldr	r2, [pc, #52]	; (d44 <_usb_d_find_ep+0x54>)
     d10:	eb02 1243 	add.w	r2, r2, r3, lsl #5
     d14:	7851      	ldrb	r1, [r2, #1]
     d16:	4281      	cmp	r1, r0
     d18:	d00b      	beq.n	d32 <_usb_d_find_ep+0x42>
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     d1a:	015a      	lsls	r2, r3, #5
     d1c:	4c09      	ldr	r4, [pc, #36]	; (d44 <_usb_d_find_ep+0x54>)
     d1e:	5ca2      	ldrb	r2, [r4, r2]
     d20:	2a00      	cmp	r2, #0
     d22:	d1f0      	bne.n	d06 <_usb_d_find_ep+0x16>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     d24:	f000 020f 	and.w	r2, r0, #15
     d28:	428a      	cmp	r2, r1
     d2a:	d1ec      	bne.n	d06 <_usb_d_find_ep+0x16>
     d2c:	e001      	b.n	d32 <_usb_d_find_ep+0x42>
			return i;
		}
	}
	return -1;
     d2e:	f04f 33ff 	mov.w	r3, #4294967295
}
     d32:	4618      	mov	r0, r3
     d34:	f85d 4b04 	ldr.w	r4, [sp], #4
     d38:	4770      	bx	lr
	return -1;
     d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
     d3e:	4618      	mov	r0, r3
     d40:	4770      	bx	lr
     d42:	bf00      	nop
     d44:	20000064 	.word	0x20000064

00000d48 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     d48:	2000      	movs	r0, #0
     d4a:	4770      	bx	lr

00000d4c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     d4c:	b538      	push	{r3, r4, r5, lr}
     d4e:	4604      	mov	r4, r0
     d50:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     d52:	4b09      	ldr	r3, [pc, #36]	; (d78 <usb_d_cb_trans_more+0x2c>)
     d54:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     d56:	4b09      	ldr	r3, [pc, #36]	; (d7c <usb_d_cb_trans_more+0x30>)
     d58:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     d5c:	789b      	ldrb	r3, [r3, #2]
     d5e:	2b03      	cmp	r3, #3
     d60:	d001      	beq.n	d66 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     d62:	2000      	movs	r0, #0
}
     d64:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
     d66:	4b05      	ldr	r3, [pc, #20]	; (d7c <usb_d_cb_trans_more+0x30>)
     d68:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     d6c:	6983      	ldr	r3, [r0, #24]
     d6e:	4629      	mov	r1, r5
     d70:	4620      	mov	r0, r4
     d72:	4798      	blx	r3
     d74:	bd38      	pop	{r3, r4, r5, pc}
     d76:	bf00      	nop
     d78:	00000cf1 	.word	0x00000cf1
     d7c:	20000064 	.word	0x20000064

00000d80 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d84:	b084      	sub	sp, #16
     d86:	4607      	mov	r7, r0
     d88:	460d      	mov	r5, r1
     d8a:	4690      	mov	r8, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     d8c:	4b48      	ldr	r3, [pc, #288]	; (eb0 <_usb_d_cb_trans_done+0x130>)
     d8e:	4798      	blx	r3
     d90:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
     d92:	4e48      	ldr	r6, [pc, #288]	; (eb4 <_usb_d_cb_trans_done+0x134>)
     d94:	eb06 1640 	add.w	r6, r6, r0, lsl #5

	if (code == USB_TRANS_DONE) {
     d98:	2d00      	cmp	r5, #0
     d9a:	d14f      	bne.n	e3c <_usb_d_cb_trans_done+0xbc>
		ept->xfer.hdr.status = USB_XFER_DONE;
     d9c:	4a45      	ldr	r2, [pc, #276]	; (eb4 <_usb_d_cb_trans_done+0x134>)
     d9e:	0143      	lsls	r3, r0, #5
     da0:	2000      	movs	r0, #0
     da2:	70f0      	strb	r0, [r6, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     da4:	5cd3      	ldrb	r3, [r2, r3]
     da6:	b17b      	cbz	r3, dc8 <_usb_d_cb_trans_done+0x48>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     da8:	4b42      	ldr	r3, [pc, #264]	; (eb4 <_usb_d_cb_trans_done+0x134>)
     daa:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     dae:	2201      	movs	r2, #1
     db0:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     db2:	4b40      	ldr	r3, [pc, #256]	; (eb4 <_usb_d_cb_trans_done+0x134>)
     db4:	eb03 1444 	add.w	r4, r3, r4, lsl #5
     db8:	69e3      	ldr	r3, [r4, #28]
     dba:	4642      	mov	r2, r8
     dbc:	78e1      	ldrb	r1, [r4, #3]
     dbe:	4638      	mov	r0, r7
     dc0:	4798      	blx	r3
}
     dc2:	b004      	add	sp, #16
     dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t state   = ept->xfer.hdr.state;
     dc8:	78b3      	ldrb	r3, [r6, #2]
     dca:	f996 400c 	ldrsb.w	r4, [r6, #12]
	if (state == USB_EP_S_X_DATA) {
     dce:	2b03      	cmp	r3, #3
     dd0:	d008      	beq.n	de4 <_usb_d_cb_trans_done+0x64>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     dd2:	69f3      	ldr	r3, [r6, #28]
     dd4:	f106 020c 	add.w	r2, r6, #12
     dd8:	2100      	movs	r1, #0
     dda:	7870      	ldrb	r0, [r6, #1]
     ddc:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     dde:	2302      	movs	r3, #2
     de0:	70b3      	strb	r3, [r6, #2]
     de2:	e7ee      	b.n	dc2 <_usb_d_cb_trans_done+0x42>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     de4:	69f3      	ldr	r3, [r6, #28]
     de6:	f106 020c 	add.w	r2, r6, #12
     dea:	2101      	movs	r1, #1
     dec:	7870      	ldrb	r0, [r6, #1]
     dee:	4798      	blx	r3
		if (err) {
     df0:	b170      	cbz	r0, e10 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     df2:	2305      	movs	r3, #5
     df4:	70b3      	strb	r3, [r6, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     df6:	2302      	movs	r3, #2
     df8:	70f3      	strb	r3, [r6, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     dfa:	2c00      	cmp	r4, #0
     dfc:	db06      	blt.n	e0c <_usb_d_cb_trans_done+0x8c>
     dfe:	7870      	ldrb	r0, [r6, #1]
     e00:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     e04:	2101      	movs	r1, #1
     e06:	4b2c      	ldr	r3, [pc, #176]	; (eb8 <_usb_d_cb_trans_done+0x138>)
     e08:	4798      	blx	r3
     e0a:	e7da      	b.n	dc2 <_usb_d_cb_trans_done+0x42>
     e0c:	7870      	ldrb	r0, [r6, #1]
     e0e:	e7f9      	b.n	e04 <_usb_d_cb_trans_done+0x84>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     e10:	2304      	movs	r3, #4
     e12:	70b3      	strb	r3, [r6, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     e14:	7873      	ldrb	r3, [r6, #1]
	struct usb_d_transfer trans
     e16:	2200      	movs	r2, #0
     e18:	9201      	str	r2, [sp, #4]
     e1a:	9202      	str	r2, [sp, #8]
     e1c:	4294      	cmp	r4, r2
     e1e:	db0a      	blt.n	e36 <_usb_d_cb_trans_done+0xb6>
     e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     e24:	f88d 300c 	strb.w	r3, [sp, #12]
     e28:	2301      	movs	r3, #1
     e2a:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     e2e:	a801      	add	r0, sp, #4
     e30:	4b22      	ldr	r3, [pc, #136]	; (ebc <_usb_d_cb_trans_done+0x13c>)
     e32:	4798      	blx	r3
     e34:	e7c5      	b.n	dc2 <_usb_d_cb_trans_done+0x42>
	struct usb_d_transfer trans
     e36:	f003 030f 	and.w	r3, r3, #15
     e3a:	e7f3      	b.n	e24 <_usb_d_cb_trans_done+0xa4>
	} else if (code == USB_TRANS_STALL) {
     e3c:	2d01      	cmp	r5, #1
     e3e:	d00a      	beq.n	e56 <_usb_d_cb_trans_done+0xd6>
	} else if (code == USB_TRANS_ABORT) {
     e40:	2d02      	cmp	r5, #2
     e42:	d01c      	beq.n	e7e <_usb_d_cb_trans_done+0xfe>
	} else if (code == USB_TRANS_RESET) {
     e44:	2d03      	cmp	r5, #3
     e46:	d02a      	beq.n	e9e <_usb_d_cb_trans_done+0x11e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     e48:	4b1a      	ldr	r3, [pc, #104]	; (eb4 <_usb_d_cb_trans_done+0x134>)
     e4a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     e4e:	2206      	movs	r2, #6
     e50:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     e52:	70da      	strb	r2, [r3, #3]
     e54:	e7ad      	b.n	db2 <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_HALT;
     e56:	4a17      	ldr	r2, [pc, #92]	; (eb4 <_usb_d_cb_trans_done+0x134>)
     e58:	0143      	lsls	r3, r0, #5
     e5a:	18d1      	adds	r1, r2, r3
     e5c:	2002      	movs	r0, #2
     e5e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     e60:	5cd3      	ldrb	r3, [r2, r3]
     e62:	b12b      	cbz	r3, e70 <_usb_d_cb_trans_done+0xf0>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     e64:	4b13      	ldr	r3, [pc, #76]	; (eb4 <_usb_d_cb_trans_done+0x134>)
     e66:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     e6a:	2205      	movs	r2, #5
     e6c:	709a      	strb	r2, [r3, #2]
     e6e:	e7a0      	b.n	db2 <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     e70:	460b      	mov	r3, r1
     e72:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     e74:	2100      	movs	r1, #0
     e76:	4638      	mov	r0, r7
     e78:	4b0f      	ldr	r3, [pc, #60]	; (eb8 <_usb_d_cb_trans_done+0x138>)
     e7a:	4798      	blx	r3
     e7c:	e799      	b.n	db2 <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     e7e:	4a0d      	ldr	r2, [pc, #52]	; (eb4 <_usb_d_cb_trans_done+0x134>)
     e80:	0143      	lsls	r3, r0, #5
     e82:	18d1      	adds	r1, r2, r3
     e84:	2004      	movs	r0, #4
     e86:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     e88:	5cd3      	ldrb	r3, [r2, r3]
     e8a:	b12b      	cbz	r3, e98 <_usb_d_cb_trans_done+0x118>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     e8c:	4b09      	ldr	r3, [pc, #36]	; (eb4 <_usb_d_cb_trans_done+0x134>)
     e8e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     e92:	2201      	movs	r2, #1
     e94:	709a      	strb	r2, [r3, #2]
     e96:	e78c      	b.n	db2 <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     e98:	2302      	movs	r3, #2
     e9a:	708b      	strb	r3, [r1, #2]
			return;
     e9c:	e791      	b.n	dc2 <_usb_d_cb_trans_done+0x42>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     e9e:	4b05      	ldr	r3, [pc, #20]	; (eb4 <_usb_d_cb_trans_done+0x134>)
     ea0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     ea4:	2200      	movs	r2, #0
     ea6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     ea8:	2205      	movs	r2, #5
     eaa:	70da      	strb	r2, [r3, #3]
     eac:	e781      	b.n	db2 <_usb_d_cb_trans_done+0x32>
     eae:	bf00      	nop
     eb0:	00000cf1 	.word	0x00000cf1
     eb4:	20000064 	.word	0x20000064
     eb8:	00002855 	.word	0x00002855
     ebc:	00002a11 	.word	0x00002a11

00000ec0 <usb_d_cb_trans_setup>:
{
     ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ec4:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     ec6:	4b1d      	ldr	r3, [pc, #116]	; (f3c <usb_d_cb_trans_setup+0x7c>)
     ec8:	4798      	blx	r3
     eca:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
     ecc:	0144      	lsls	r4, r0, #5
     ece:	f104 0308 	add.w	r3, r4, #8
     ed2:	4c1b      	ldr	r4, [pc, #108]	; (f40 <usb_d_cb_trans_setup+0x80>)
     ed4:	441c      	add	r4, r3
     ed6:	3404      	adds	r4, #4
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     ed8:	4621      	mov	r1, r4
     eda:	4628      	mov	r0, r5
     edc:	4b19      	ldr	r3, [pc, #100]	; (f44 <usb_d_cb_trans_setup+0x84>)
     ede:	4798      	blx	r3
     ee0:	b2c0      	uxtb	r0, r0
	if (n != 8) {
     ee2:	2808      	cmp	r0, #8
     ee4:	d009      	beq.n	efa <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     ee6:	2101      	movs	r1, #1
     ee8:	4628      	mov	r0, r5
     eea:	4c17      	ldr	r4, [pc, #92]	; (f48 <usb_d_cb_trans_setup+0x88>)
     eec:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     eee:	2101      	movs	r1, #1
     ef0:	f045 0080 	orr.w	r0, r5, #128	; 0x80
     ef4:	47a0      	blx	r4
		return;
     ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     efa:	2100      	movs	r1, #0
     efc:	4628      	mov	r0, r5
     efe:	4f12      	ldr	r7, [pc, #72]	; (f48 <usb_d_cb_trans_setup+0x88>)
     f00:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     f02:	f045 0880 	orr.w	r8, r5, #128	; 0x80
     f06:	2100      	movs	r1, #0
     f08:	4640      	mov	r0, r8
     f0a:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     f0c:	4b0c      	ldr	r3, [pc, #48]	; (f40 <usb_d_cb_trans_setup+0x80>)
     f0e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     f12:	2201      	movs	r2, #1
     f14:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     f16:	695b      	ldr	r3, [r3, #20]
     f18:	4621      	mov	r1, r4
     f1a:	4628      	mov	r0, r5
     f1c:	4798      	blx	r3
     f1e:	b108      	cbz	r0, f24 <usb_d_cb_trans_setup+0x64>
     f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     f24:	4b06      	ldr	r3, [pc, #24]	; (f40 <usb_d_cb_trans_setup+0x80>)
     f26:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     f2a:	2305      	movs	r3, #5
     f2c:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     f2e:	2101      	movs	r1, #1
     f30:	4628      	mov	r0, r5
     f32:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     f34:	2101      	movs	r1, #1
     f36:	4640      	mov	r0, r8
     f38:	47b8      	blx	r7
     f3a:	e7f1      	b.n	f20 <usb_d_cb_trans_setup+0x60>
     f3c:	00000cf1 	.word	0x00000cf1
     f40:	20000064 	.word	0x20000064
     f44:	0000299d 	.word	0x0000299d
     f48:	00002855 	.word	0x00002855

00000f4c <usb_d_init>:

int32_t usb_d_init(void)
{
     f4c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     f4e:	4b12      	ldr	r3, [pc, #72]	; (f98 <usb_d_init+0x4c>)
     f50:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     f52:	2800      	cmp	r0, #0
     f54:	db1e      	blt.n	f94 <usb_d_init+0x48>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     f56:	2280      	movs	r2, #128	; 0x80
     f58:	2100      	movs	r1, #0
     f5a:	4810      	ldr	r0, [pc, #64]	; (f9c <usb_d_init+0x50>)
     f5c:	4b10      	ldr	r3, [pc, #64]	; (fa0 <usb_d_init+0x54>)
     f5e:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     f60:	2200      	movs	r2, #0
     f62:	e00a      	b.n	f7a <usb_d_init+0x2e>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     f64:	4b0d      	ldr	r3, [pc, #52]	; (f9c <usb_d_init+0x50>)
     f66:	eb03 1342 	add.w	r3, r3, r2, lsl #5
     f6a:	21ff      	movs	r1, #255	; 0xff
     f6c:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     f6e:	490d      	ldr	r1, [pc, #52]	; (fa4 <usb_d_init+0x58>)
     f70:	6159      	str	r1, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     f72:	6199      	str	r1, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     f74:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     f76:	3201      	adds	r2, #1
     f78:	b2d2      	uxtb	r2, r2
     f7a:	2a03      	cmp	r2, #3
     f7c:	d9f2      	bls.n	f64 <usb_d_init+0x18>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     f7e:	490a      	ldr	r1, [pc, #40]	; (fa8 <usb_d_init+0x5c>)
     f80:	2000      	movs	r0, #0
     f82:	4c0a      	ldr	r4, [pc, #40]	; (fac <usb_d_init+0x60>)
     f84:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     f86:	490a      	ldr	r1, [pc, #40]	; (fb0 <usb_d_init+0x64>)
     f88:	2001      	movs	r0, #1
     f8a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     f8c:	4909      	ldr	r1, [pc, #36]	; (fb4 <usb_d_init+0x68>)
     f8e:	2002      	movs	r0, #2
     f90:	47a0      	blx	r4
	return ERR_NONE;
     f92:	2000      	movs	r0, #0
}
     f94:	bd10      	pop	{r4, pc}
     f96:	bf00      	nop
     f98:	0000278d 	.word	0x0000278d
     f9c:	20000064 	.word	0x20000064
     fa0:	0000307f 	.word	0x0000307f
     fa4:	00000d49 	.word	0x00000d49
     fa8:	00000ec1 	.word	0x00000ec1
     fac:	00002bc5 	.word	0x00002bc5
     fb0:	00000d4d 	.word	0x00000d4d
     fb4:	00000d81 	.word	0x00000d81

00000fb8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     fb8:	b900      	cbnz	r0, fbc <assert+0x4>
		__asm("BKPT #0");
     fba:	be00      	bkpt	0x0000
     fbc:	4770      	bx	lr

00000fbe <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     fbe:	6803      	ldr	r3, [r0, #0]
     fc0:	b11b      	cbz	r3, fca <is_list_element+0xc>
		if (it == element) {
     fc2:	428b      	cmp	r3, r1
     fc4:	d003      	beq.n	fce <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
     fc6:	681b      	ldr	r3, [r3, #0]
     fc8:	e7fa      	b.n	fc0 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     fca:	2000      	movs	r0, #0
     fcc:	4770      	bx	lr
			return true;
     fce:	2001      	movs	r0, #1
}
     fd0:	4770      	bx	lr
	...

00000fd4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     fd4:	b538      	push	{r3, r4, r5, lr}
     fd6:	4604      	mov	r4, r0
     fd8:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     fda:	4b06      	ldr	r3, [pc, #24]	; (ff4 <list_insert_as_head+0x20>)
     fdc:	4798      	blx	r3
     fde:	f080 0001 	eor.w	r0, r0, #1
     fe2:	2239      	movs	r2, #57	; 0x39
     fe4:	4904      	ldr	r1, [pc, #16]	; (ff8 <list_insert_as_head+0x24>)
     fe6:	b2c0      	uxtb	r0, r0
     fe8:	4b04      	ldr	r3, [pc, #16]	; (ffc <list_insert_as_head+0x28>)
     fea:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     fec:	6823      	ldr	r3, [r4, #0]
     fee:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     ff0:	6025      	str	r5, [r4, #0]
     ff2:	bd38      	pop	{r3, r4, r5, pc}
     ff4:	00000fbf 	.word	0x00000fbf
     ff8:	00003114 	.word	0x00003114
     ffc:	00000fb9 	.word	0x00000fb9

00001000 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1000:	6803      	ldr	r3, [r0, #0]
    1002:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1004:	6001      	str	r1, [r0, #0]
    1006:	4770      	bx	lr

00001008 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1008:	6803      	ldr	r3, [r0, #0]
    100a:	b11b      	cbz	r3, 1014 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    100c:	681a      	ldr	r2, [r3, #0]
    100e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    1010:	4618      	mov	r0, r3
    1012:	4770      	bx	lr
	}

	return NULL;
    1014:	2000      	movs	r0, #0
}
    1016:	4770      	bx	lr

00001018 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1018:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    101a:	4a08      	ldr	r2, [pc, #32]	; (103c <_init_chip+0x24>)
    101c:	8813      	ldrh	r3, [r2, #0]
    101e:	b29b      	uxth	r3, r3
    1020:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1022:	4b07      	ldr	r3, [pc, #28]	; (1040 <_init_chip+0x28>)
    1024:	4798      	blx	r3
	_oscctrl_init_sources();
    1026:	4b07      	ldr	r3, [pc, #28]	; (1044 <_init_chip+0x2c>)
    1028:	4798      	blx	r3
	_mclk_init();
    102a:	4b07      	ldr	r3, [pc, #28]	; (1048 <_init_chip+0x30>)
    102c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    102e:	4b07      	ldr	r3, [pc, #28]	; (104c <_init_chip+0x34>)
    1030:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1032:	f640 70ff 	movw	r0, #4095	; 0xfff
    1036:	4b06      	ldr	r3, [pc, #24]	; (1050 <_init_chip+0x38>)
    1038:	4798      	blx	r3
    103a:	bd08      	pop	{r3, pc}
    103c:	41004000 	.word	0x41004000
    1040:	000010a1 	.word	0x000010a1
    1044:	000010b5 	.word	0x000010b5
    1048:	00001095 	.word	0x00001095
    104c:	000010b9 	.word	0x000010b9
    1050:	00001055 	.word	0x00001055

00001054 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1054:	f010 0f01 	tst.w	r0, #1
    1058:	d008      	beq.n	106c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    105a:	4a0b      	ldr	r2, [pc, #44]	; (1088 <_gclk_init_generators_by_fref+0x34>)
    105c:	4b0b      	ldr	r3, [pc, #44]	; (108c <_gclk_init_generators_by_fref+0x38>)
    105e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1060:	4b0a      	ldr	r3, [pc, #40]	; (108c <_gclk_init_generators_by_fref+0x38>)
    1062:	685a      	ldr	r2, [r3, #4]
    1064:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1068:	421a      	tst	r2, r3
    106a:	d1f9      	bne.n	1060 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    106c:	f010 0f08 	tst.w	r0, #8
    1070:	d008      	beq.n	1084 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1072:	4a07      	ldr	r2, [pc, #28]	; (1090 <_gclk_init_generators_by_fref+0x3c>)
    1074:	4b05      	ldr	r3, [pc, #20]	; (108c <_gclk_init_generators_by_fref+0x38>)
    1076:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1078:	4b04      	ldr	r3, [pc, #16]	; (108c <_gclk_init_generators_by_fref+0x38>)
    107a:	685a      	ldr	r2, [r3, #4]
    107c:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1080:	421a      	tst	r2, r3
    1082:	d1f9      	bne.n	1078 <_gclk_init_generators_by_fref+0x24>
    1084:	4770      	bx	lr
    1086:	bf00      	nop
    1088:	00010106 	.word	0x00010106
    108c:	40001c00 	.word	0x40001c00
    1090:	00010104 	.word	0x00010104

00001094 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1094:	2201      	movs	r2, #1
    1096:	4b01      	ldr	r3, [pc, #4]	; (109c <_mclk_init+0x8>)
    1098:	715a      	strb	r2, [r3, #5]
    109a:	4770      	bx	lr
    109c:	40000800 	.word	0x40000800

000010a0 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    10a0:	4b03      	ldr	r3, [pc, #12]	; (10b0 <_osc32kctrl_init_sources+0x10>)
    10a2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    10a4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    10a8:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    10aa:	2201      	movs	r2, #1
    10ac:	741a      	strb	r2, [r3, #16]
    10ae:	4770      	bx	lr
    10b0:	40001400 	.word	0x40001400

000010b4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    10b4:	4770      	bx	lr
	...

000010b8 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    10b8:	4a36      	ldr	r2, [pc, #216]	; (1194 <_oscctrl_init_referenced_generators+0xdc>)
    10ba:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    10bc:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    10c0:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    10c4:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    10c6:	4b33      	ldr	r3, [pc, #204]	; (1194 <_oscctrl_init_referenced_generators+0xdc>)
    10c8:	685a      	ldr	r2, [r3, #4]
    10ca:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    10ce:	421a      	tst	r2, r3
    10d0:	d1f9      	bne.n	10c6 <_oscctrl_init_referenced_generators+0xe>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    10d2:	4b30      	ldr	r3, [pc, #192]	; (1194 <_oscctrl_init_referenced_generators+0xdc>)
    10d4:	685b      	ldr	r3, [r3, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    10d6:	f013 0f04 	tst.w	r3, #4
    10da:	d1fa      	bne.n	10d2 <_oscctrl_init_referenced_generators+0x1a>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    10dc:	4b2e      	ldr	r3, [pc, #184]	; (1198 <_oscctrl_init_referenced_generators+0xe0>)
    10de:	2200      	movs	r2, #0
    10e0:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    10e2:	4a2e      	ldr	r2, [pc, #184]	; (119c <_oscctrl_init_referenced_generators+0xe4>)
    10e4:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    10e6:	4b2c      	ldr	r3, [pc, #176]	; (1198 <_oscctrl_init_referenced_generators+0xe0>)
    10e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    10ec:	f013 0f10 	tst.w	r3, #16
    10f0:	d1f9      	bne.n	10e6 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    10f2:	2200      	movs	r2, #0
    10f4:	4b28      	ldr	r3, [pc, #160]	; (1198 <_oscctrl_init_referenced_generators+0xe0>)
    10f6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    10fa:	4b27      	ldr	r3, [pc, #156]	; (1198 <_oscctrl_init_referenced_generators+0xe0>)
    10fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1100:	f013 0f04 	tst.w	r3, #4
    1104:	d1f9      	bne.n	10fa <_oscctrl_init_referenced_generators+0x42>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1106:	2202      	movs	r2, #2
    1108:	4b23      	ldr	r3, [pc, #140]	; (1198 <_oscctrl_init_referenced_generators+0xe0>)
    110a:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    110c:	4b22      	ldr	r3, [pc, #136]	; (1198 <_oscctrl_init_referenced_generators+0xe0>)
    110e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1112:	f013 0f02 	tst.w	r3, #2
    1116:	d1f9      	bne.n	110c <_oscctrl_init_referenced_generators+0x54>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1118:	4b1f      	ldr	r3, [pc, #124]	; (1198 <_oscctrl_init_referenced_generators+0xe0>)
    111a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    111c:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    111e:	4b1e      	ldr	r3, [pc, #120]	; (1198 <_oscctrl_init_referenced_generators+0xe0>)
    1120:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1124:	f013 0f08 	tst.w	r3, #8
    1128:	d1f9      	bne.n	111e <_oscctrl_init_referenced_generators+0x66>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    112a:	2288      	movs	r2, #136	; 0x88
    112c:	4b1a      	ldr	r3, [pc, #104]	; (1198 <_oscctrl_init_referenced_generators+0xe0>)
    112e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1132:	4b19      	ldr	r3, [pc, #100]	; (1198 <_oscctrl_init_referenced_generators+0xe0>)
    1134:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1138:	f013 0f04 	tst.w	r3, #4
    113c:	d1f9      	bne.n	1132 <_oscctrl_init_referenced_generators+0x7a>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    113e:	4b16      	ldr	r3, [pc, #88]	; (1198 <_oscctrl_init_referenced_generators+0xe0>)
    1140:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1144:	f013 0f01 	tst.w	r3, #1
    1148:	d01d      	beq.n	1186 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    114a:	4b13      	ldr	r3, [pc, #76]	; (1198 <_oscctrl_init_referenced_generators+0xe0>)
    114c:	691b      	ldr	r3, [r3, #16]
	tmp &= mask;
    114e:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1152:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1156:	d1f8      	bne.n	114a <_oscctrl_init_referenced_generators+0x92>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1158:	4b0e      	ldr	r3, [pc, #56]	; (1194 <_oscctrl_init_referenced_generators+0xdc>)
    115a:	685b      	ldr	r3, [r3, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    115c:	2b00      	cmp	r3, #0
    115e:	d1fb      	bne.n	1158 <_oscctrl_init_referenced_generators+0xa0>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1160:	4a0c      	ldr	r2, [pc, #48]	; (1194 <_oscctrl_init_referenced_generators+0xdc>)
    1162:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1164:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1168:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    116c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    116e:	4b09      	ldr	r3, [pc, #36]	; (1194 <_oscctrl_init_referenced_generators+0xdc>)
    1170:	685a      	ldr	r2, [r3, #4]
    1172:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1176:	421a      	tst	r2, r3
    1178:	d1f9      	bne.n	116e <_oscctrl_init_referenced_generators+0xb6>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    117a:	4b06      	ldr	r3, [pc, #24]	; (1194 <_oscctrl_init_referenced_generators+0xdc>)
    117c:	685b      	ldr	r3, [r3, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    117e:	f013 0f04 	tst.w	r3, #4
    1182:	d1fa      	bne.n	117a <_oscctrl_init_referenced_generators+0xc2>
		;
#endif
	(void)hw;
}
    1184:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1186:	4b04      	ldr	r3, [pc, #16]	; (1198 <_oscctrl_init_referenced_generators+0xe0>)
    1188:	691b      	ldr	r3, [r3, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    118a:	f413 7f80 	tst.w	r3, #256	; 0x100
    118e:	d0fa      	beq.n	1186 <_oscctrl_init_referenced_generators+0xce>
    1190:	e7e2      	b.n	1158 <_oscctrl_init_referenced_generators+0xa0>
    1192:	bf00      	nop
    1194:	40001c00 	.word	0x40001c00
    1198:	40001000 	.word	0x40001000
    119c:	04010000 	.word	0x04010000

000011a0 <_qspi_sync_init>:
{
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
}

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    11a0:	b538      	push	{r3, r4, r5, lr}
    11a2:	460c      	mov	r4, r1
	ASSERT(dev && hw);
    11a4:	4605      	mov	r5, r0
    11a6:	b188      	cbz	r0, 11cc <_qspi_sync_init+0x2c>
    11a8:	b171      	cbz	r1, 11c8 <_qspi_sync_init+0x28>
    11aa:	2001      	movs	r0, #1
    11ac:	2240      	movs	r2, #64	; 0x40
    11ae:	4908      	ldr	r1, [pc, #32]	; (11d0 <_qspi_sync_init+0x30>)
    11b0:	4b08      	ldr	r3, [pc, #32]	; (11d4 <_qspi_sync_init+0x34>)
    11b2:	4798      	blx	r3
	dev->prvt = hw;
    11b4:	602c      	str	r4, [r5, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    11b6:	2301      	movs	r3, #1
    11b8:	6023      	str	r3, [r4, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    11ba:	2311      	movs	r3, #17
    11bc:	6063      	str	r3, [r4, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    11be:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
    11c2:	60a3      	str	r3, [r4, #8]

	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
}
    11c4:	2000      	movs	r0, #0
    11c6:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    11c8:	2000      	movs	r0, #0
    11ca:	e7ef      	b.n	11ac <_qspi_sync_init+0xc>
    11cc:	2000      	movs	r0, #0
    11ce:	e7ed      	b.n	11ac <_qspi_sync_init+0xc>
    11d0:	00003134 	.word	0x00003134
    11d4:	00000fb9 	.word	0x00000fb9

000011d8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    11d8:	b500      	push	{lr}
    11da:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    11dc:	4b0d      	ldr	r3, [pc, #52]	; (1214 <RAMECC_Handler+0x3c>)
    11de:	789b      	ldrb	r3, [r3, #2]
    11e0:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    11e2:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    11e4:	9b01      	ldr	r3, [sp, #4]
    11e6:	f013 0f02 	tst.w	r3, #2
    11ea:	d006      	beq.n	11fa <RAMECC_Handler+0x22>
    11ec:	4b0a      	ldr	r3, [pc, #40]	; (1218 <RAMECC_Handler+0x40>)
    11ee:	681b      	ldr	r3, [r3, #0]
    11f0:	b11b      	cbz	r3, 11fa <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    11f2:	4a08      	ldr	r2, [pc, #32]	; (1214 <RAMECC_Handler+0x3c>)
    11f4:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    11f6:	4798      	blx	r3
    11f8:	e009      	b.n	120e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    11fa:	9b01      	ldr	r3, [sp, #4]
    11fc:	f013 0f01 	tst.w	r3, #1
    1200:	d005      	beq.n	120e <RAMECC_Handler+0x36>
    1202:	4b05      	ldr	r3, [pc, #20]	; (1218 <RAMECC_Handler+0x40>)
    1204:	685b      	ldr	r3, [r3, #4]
    1206:	b113      	cbz	r3, 120e <RAMECC_Handler+0x36>
    1208:	4a02      	ldr	r2, [pc, #8]	; (1214 <RAMECC_Handler+0x3c>)
    120a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    120c:	4798      	blx	r3
	} else {
		return;
	}
}
    120e:	b003      	add	sp, #12
    1210:	f85d fb04 	ldr.w	pc, [sp], #4
    1214:	41020000 	.word	0x41020000
    1218:	20000364 	.word	0x20000364

0000121c <_rtc_timer_interrupt_handler>:
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    121c:	68c3      	ldr	r3, [r0, #12]
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    121e:	899b      	ldrh	r3, [r3, #12]

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    1220:	f413 7f80 	tst.w	r3, #256	; 0x100
    1224:	d009      	beq.n	123a <_rtc_timer_interrupt_handler+0x1e>
{
    1226:	b510      	push	{r4, lr}
    1228:	4604      	mov	r4, r0
		if (dev->timer_cb.period_expired) {
    122a:	6803      	ldr	r3, [r0, #0]
    122c:	b103      	cbz	r3, 1230 <_rtc_timer_interrupt_handler+0x14>
			dev->timer_cb.period_expired(dev);
    122e:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1230:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1232:	f44f 7280 	mov.w	r2, #256	; 0x100
    1236:	819a      	strh	r2, [r3, #12]
    1238:	bd10      	pop	{r4, pc}
    123a:	4770      	bx	lr

0000123c <_timer_init>:
{
    123c:	b538      	push	{r3, r4, r5, lr}
    123e:	460d      	mov	r5, r1
	ASSERT(dev);
    1240:	4604      	mov	r4, r0
    1242:	2230      	movs	r2, #48	; 0x30
    1244:	4914      	ldr	r1, [pc, #80]	; (1298 <_timer_init+0x5c>)
    1246:	3000      	adds	r0, #0
    1248:	bf18      	it	ne
    124a:	2001      	movne	r0, #1
    124c:	4b13      	ldr	r3, [pc, #76]	; (129c <_timer_init+0x60>)
    124e:	4798      	blx	r3
	dev->hw = hw;
    1250:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1252:	2301      	movs	r3, #1
    1254:	802b      	strh	r3, [r5, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1256:	692a      	ldr	r2, [r5, #16]
    1258:	f248 0303 	movw	r3, #32771	; 0x8003
    125c:	421a      	tst	r2, r3
    125e:	d1fa      	bne.n	1256 <_timer_init+0x1a>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    1260:	68e3      	ldr	r3, [r4, #12]
    1262:	691a      	ldr	r2, [r3, #16]
    1264:	f012 0f01 	tst.w	r2, #1
    1268:	d1fb      	bne.n	1262 <_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    126a:	f248 0280 	movw	r2, #32896	; 0x8080
    126e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1270:	6919      	ldr	r1, [r3, #16]
    1272:	f248 0203 	movw	r2, #32771	; 0x8003
    1276:	4211      	tst	r1, r2
    1278:	d1fa      	bne.n	1270 <_timer_init+0x34>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    127a:	68e2      	ldr	r2, [r4, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    127c:	2320      	movs	r3, #32
    127e:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1280:	6913      	ldr	r3, [r2, #16]
    1282:	f013 0f60 	tst.w	r3, #96	; 0x60
    1286:	d1fb      	bne.n	1280 <_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    1288:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    128a:	f44f 7280 	mov.w	r2, #256	; 0x100
    128e:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    1290:	4b03      	ldr	r3, [pc, #12]	; (12a0 <_timer_init+0x64>)
    1292:	601c      	str	r4, [r3, #0]
}
    1294:	2000      	movs	r0, #0
    1296:	bd38      	pop	{r3, r4, r5, pc}
    1298:	0000314c 	.word	0x0000314c
    129c:	00000fb9 	.word	0x00000fb9
    12a0:	200000e4 	.word	0x200000e4

000012a4 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    12a4:	2000      	movs	r0, #0
    12a6:	4770      	bx	lr

000012a8 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    12a8:	b508      	push	{r3, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    12aa:	4b02      	ldr	r3, [pc, #8]	; (12b4 <RTC_Handler+0xc>)
    12ac:	6818      	ldr	r0, [r3, #0]
    12ae:	4b02      	ldr	r3, [pc, #8]	; (12b8 <RTC_Handler+0x10>)
    12b0:	4798      	blx	r3
    12b2:	bd08      	pop	{r3, pc}
    12b4:	200000e4 	.word	0x200000e4
    12b8:	0000121d 	.word	0x0000121d

000012bc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    12bc:	b470      	push	{r4, r5, r6}
    12be:	b087      	sub	sp, #28
    12c0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    12c2:	466c      	mov	r4, sp
    12c4:	4d0c      	ldr	r5, [pc, #48]	; (12f8 <_sercom_get_hardware_index+0x3c>)
    12c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    12c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    12ca:	e895 0003 	ldmia.w	r5, {r0, r1}
    12ce:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    12d2:	2000      	movs	r0, #0
    12d4:	2805      	cmp	r0, #5
    12d6:	d80a      	bhi.n	12ee <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    12d8:	ab06      	add	r3, sp, #24
    12da:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    12de:	f853 3c18 	ldr.w	r3, [r3, #-24]
    12e2:	42b3      	cmp	r3, r6
    12e4:	d001      	beq.n	12ea <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    12e6:	3001      	adds	r0, #1
    12e8:	e7f4      	b.n	12d4 <_sercom_get_hardware_index+0x18>
			return i;
    12ea:	b2c0      	uxtb	r0, r0
    12ec:	e000      	b.n	12f0 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    12ee:	2000      	movs	r0, #0
}
    12f0:	b007      	add	sp, #28
    12f2:	bc70      	pop	{r4, r5, r6}
    12f4:	4770      	bx	lr
    12f6:	bf00      	nop
    12f8:	00003164 	.word	0x00003164

000012fc <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    12fc:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    12fe:	4b0d      	ldr	r3, [pc, #52]	; (1334 <_get_i2cm_index+0x38>)
    1300:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1302:	2300      	movs	r3, #0
    1304:	b143      	cbz	r3, 1318 <_get_i2cm_index+0x1c>
		if (_i2cms[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
    1306:	f240 32a6 	movw	r2, #934	; 0x3a6
    130a:	490b      	ldr	r1, [pc, #44]	; (1338 <_get_i2cm_index+0x3c>)
    130c:	2000      	movs	r0, #0
    130e:	4b0b      	ldr	r3, [pc, #44]	; (133c <_get_i2cm_index+0x40>)
    1310:	4798      	blx	r3
	return -1;
    1312:	f04f 30ff 	mov.w	r0, #4294967295
}
    1316:	bd08      	pop	{r3, pc}
		if (_i2cms[i].number == sercom_offset) {
    1318:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    131c:	00d1      	lsls	r1, r2, #3
    131e:	4a08      	ldr	r2, [pc, #32]	; (1340 <_get_i2cm_index+0x44>)
    1320:	440a      	add	r2, r1
    1322:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    1326:	4290      	cmp	r0, r2
    1328:	d002      	beq.n	1330 <_get_i2cm_index+0x34>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    132a:	3301      	adds	r3, #1
    132c:	b2db      	uxtb	r3, r3
    132e:	e7e9      	b.n	1304 <_get_i2cm_index+0x8>
			return i;
    1330:	b258      	sxtb	r0, r3
    1332:	bd08      	pop	{r3, pc}
    1334:	000012bd 	.word	0x000012bd
    1338:	000031d0 	.word	0x000031d0
    133c:	00000fb9 	.word	0x00000fb9
    1340:	00003164 	.word	0x00003164

00001344 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    1344:	b538      	push	{r3, r4, r5, lr}
    1346:	4605      	mov	r5, r0
    1348:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    134a:	4608      	mov	r0, r1
    134c:	4b33      	ldr	r3, [pc, #204]	; (141c <_i2c_m_sync_init_impl+0xd8>)
    134e:	4798      	blx	r3
    1350:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1352:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1354:	f013 0f01 	tst.w	r3, #1
    1358:	d122      	bne.n	13a0 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    135a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    135e:	00da      	lsls	r2, r3, #3
    1360:	4b2f      	ldr	r3, [pc, #188]	; (1420 <_i2c_m_sync_init_impl+0xdc>)
    1362:	4413      	add	r3, r2
    1364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1366:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    136a:	69e3      	ldr	r3, [r4, #28]
    136c:	f013 0f03 	tst.w	r3, #3
    1370:	d1fb      	bne.n	136a <_i2c_m_sync_init_impl+0x26>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1372:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1374:	f013 0f02 	tst.w	r3, #2
    1378:	d00b      	beq.n	1392 <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    137a:	6823      	ldr	r3, [r4, #0]
    137c:	f023 0302 	bic.w	r3, r3, #2
    1380:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1382:	69e3      	ldr	r3, [r4, #28]
    1384:	f013 0f03 	tst.w	r3, #3
    1388:	d1fb      	bne.n	1382 <_i2c_m_sync_init_impl+0x3e>
    138a:	69e3      	ldr	r3, [r4, #28]
    138c:	f013 0f02 	tst.w	r3, #2
    1390:	d1fb      	bne.n	138a <_i2c_m_sync_init_impl+0x46>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    1392:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1396:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1398:	69e3      	ldr	r3, [r4, #28]
    139a:	f013 0f03 	tst.w	r3, #3
    139e:	d1fb      	bne.n	1398 <_i2c_m_sync_init_impl+0x54>
    13a0:	69e3      	ldr	r3, [r4, #28]
    13a2:	f013 0f01 	tst.w	r3, #1
    13a6:	d1fb      	bne.n	13a0 <_i2c_m_sync_init_impl+0x5c>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    13a8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    13ac:	00da      	lsls	r2, r3, #3
    13ae:	4b1c      	ldr	r3, [pc, #112]	; (1420 <_i2c_m_sync_init_impl+0xdc>)
    13b0:	4413      	add	r3, r2
    13b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    13b4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13b6:	69e3      	ldr	r3, [r4, #28]
    13b8:	f013 0f03 	tst.w	r3, #3
    13bc:	d1fb      	bne.n	13b6 <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    13be:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    13c2:	00da      	lsls	r2, r3, #3
    13c4:	4b16      	ldr	r3, [pc, #88]	; (1420 <_i2c_m_sync_init_impl+0xdc>)
    13c6:	4413      	add	r3, r2
    13c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    13ca:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    13cc:	69e3      	ldr	r3, [r4, #28]
    13ce:	f013 0f04 	tst.w	r3, #4
    13d2:	d1fb      	bne.n	13cc <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    13d4:	0042      	lsls	r2, r0, #1
    13d6:	4402      	add	r2, r0
    13d8:	00d1      	lsls	r1, r2, #3
    13da:	4b11      	ldr	r3, [pc, #68]	; (1420 <_i2c_m_sync_init_impl+0xdc>)
    13dc:	440b      	add	r3, r1
    13de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    13e0:	60e2      	str	r2, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    13e2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    13e6:	f003 0303 	and.w	r3, r3, #3
    13ea:	81ab      	strh	r3, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    13ec:	2b01      	cmp	r3, #1
    13ee:	bf94      	ite	ls
    13f0:	2300      	movls	r3, #0
    13f2:	2301      	movhi	r3, #1

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    13f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    13f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    13fa:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    13fe:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1400:	69e3      	ldr	r3, [r4, #28]
    1402:	f013 0f04 	tst.w	r3, #4
    1406:	d1fb      	bne.n	1400 <_i2c_m_sync_init_impl+0xbc>

	service->trise = _i2cms[i].trise;
    1408:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    140c:	00c2      	lsls	r2, r0, #3
    140e:	4b04      	ldr	r3, [pc, #16]	; (1420 <_i2c_m_sync_init_impl+0xdc>)
    1410:	4413      	add	r3, r2
    1412:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
    1416:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    1418:	2000      	movs	r0, #0
    141a:	bd38      	pop	{r3, r4, r5, pc}
    141c:	000012fd 	.word	0x000012fd
    1420:	00003164 	.word	0x00003164

00001424 <_sercom_i2c_sync_send_address>:
{
    1424:	b570      	push	{r4, r5, r6, lr}
    1426:	4605      	mov	r5, r0
	void *             hw    = i2c_dev->hw;
    1428:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    142a:	6826      	ldr	r6, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    142c:	f3c6 66c0 	ubfx	r6, r6, #27, #1
	ASSERT(i2c_dev);
    1430:	f240 52a5 	movw	r2, #1445	; 0x5a5
    1434:	4999      	ldr	r1, [pc, #612]	; (169c <_sercom_i2c_sync_send_address+0x278>)
    1436:	3000      	adds	r0, #0
    1438:	bf18      	it	ne
    143a:	2001      	movne	r0, #1
    143c:	4b98      	ldr	r3, [pc, #608]	; (16a0 <_sercom_i2c_sync_send_address+0x27c>)
    143e:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    1440:	686b      	ldr	r3, [r5, #4]
    1442:	2b01      	cmp	r3, #1
    1444:	d057      	beq.n	14f6 <_sercom_i2c_sync_send_address+0xd2>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1446:	6863      	ldr	r3, [r4, #4]
    1448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    144c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    144e:	69e3      	ldr	r3, [r4, #28]
    1450:	f013 0f04 	tst.w	r3, #4
    1454:	d1fb      	bne.n	144e <_sercom_i2c_sync_send_address+0x2a>
	if (msg->addr & I2C_M_TEN) {
    1456:	882b      	ldrh	r3, [r5, #0]
    1458:	f413 6f80 	tst.w	r3, #1024	; 0x400
    145c:	d056      	beq.n	150c <_sercom_i2c_sync_send_address+0xe8>
		if (msg->flags & I2C_M_RD) {
    145e:	886a      	ldrh	r2, [r5, #2]
    1460:	f012 0f01 	tst.w	r2, #1
    1464:	d004      	beq.n	1470 <_sercom_i2c_sync_send_address+0x4c>
			msg->flags |= I2C_M_TEN;
    1466:	886a      	ldrh	r2, [r5, #2]
    1468:	b292      	uxth	r2, r2
    146a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    146e:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1470:	f240 72fe 	movw	r2, #2046	; 0x7fe
    1474:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    1478:	69e3      	ldr	r3, [r4, #28]
    147a:	f013 0f04 	tst.w	r3, #4
    147e:	d1fb      	bne.n	1478 <_sercom_i2c_sync_send_address+0x54>
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1480:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    1486:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    1488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    148c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    148e:	69e3      	ldr	r3, [r4, #28]
    1490:	f013 0f04 	tst.w	r3, #4
    1494:	d1fb      	bne.n	148e <_sercom_i2c_sync_send_address+0x6a>
	void *   hw      = i2c_dev->hw;
    1496:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
    1498:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    149c:	7e33      	ldrb	r3, [r6, #24]
    149e:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    14a0:	4618      	mov	r0, r3
		if (timeout-- == 0) {
    14a2:	1e51      	subs	r1, r2, #1
    14a4:	b11a      	cbz	r2, 14ae <_sercom_i2c_sync_send_address+0x8a>
    14a6:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    14a8:	f013 0f03 	tst.w	r3, #3
    14ac:	d0f6      	beq.n	149c <_sercom_i2c_sync_send_address+0x78>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    14ae:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    14b0:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14b4:	69e3      	ldr	r3, [r4, #28]
    14b6:	f013 0f04 	tst.w	r3, #4
    14ba:	d1fb      	bne.n	14b4 <_sercom_i2c_sync_send_address+0x90>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    14bc:	8b63      	ldrh	r3, [r4, #26]
    14be:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    14c0:	f010 0f01 	tst.w	r0, #1
    14c4:	f000 809c 	beq.w	1600 <_sercom_i2c_sync_send_address+0x1dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    14c8:	f013 0f02 	tst.w	r3, #2
    14cc:	d032      	beq.n	1534 <_sercom_i2c_sync_send_address+0x110>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    14ce:	2201      	movs	r2, #1
    14d0:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    14d2:	886a      	ldrh	r2, [r5, #2]
    14d4:	b292      	uxth	r2, r2
    14d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    14da:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    14dc:	886a      	ldrh	r2, [r5, #2]
    14de:	b292      	uxth	r2, r2
    14e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    14e4:	b292      	uxth	r2, r2
    14e6:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    14e8:	f013 0f01 	tst.w	r3, #1
    14ec:	f000 80d1 	beq.w	1692 <_sercom_i2c_sync_send_address+0x26e>
				return I2C_ERR_BUS;
    14f0:	f06f 0004 	mvn.w	r0, #4
    14f4:	bd70      	pop	{r4, r5, r6, pc}
	if (msg->len == 1 && sclsm) {
    14f6:	2e00      	cmp	r6, #0
    14f8:	d0a5      	beq.n	1446 <_sercom_i2c_sync_send_address+0x22>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    14fa:	6863      	ldr	r3, [r4, #4]
    14fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1500:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1502:	69e3      	ldr	r3, [r4, #28]
    1504:	f013 0f04 	tst.w	r3, #4
    1508:	d1fb      	bne.n	1502 <_sercom_i2c_sync_send_address+0xde>
    150a:	e7a4      	b.n	1456 <_sercom_i2c_sync_send_address+0x32>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    150c:	005b      	lsls	r3, r3, #1
    150e:	b2db      	uxtb	r3, r3
    1510:	886a      	ldrh	r2, [r5, #2]
    1512:	f002 0201 	and.w	r2, r2, #1
    1516:	431a      	orrs	r2, r3
    1518:	69e3      	ldr	r3, [r4, #28]
    151a:	f013 0f04 	tst.w	r3, #4
    151e:	d1fb      	bne.n	1518 <_sercom_i2c_sync_send_address+0xf4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1520:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    1526:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1528:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    152a:	69e3      	ldr	r3, [r4, #28]
    152c:	f013 0f04 	tst.w	r3, #4
    1530:	d1fb      	bne.n	152a <_sercom_i2c_sync_send_address+0x106>
    1532:	e7b0      	b.n	1496 <_sercom_i2c_sync_send_address+0x72>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1534:	f013 0f04 	tst.w	r3, #4
    1538:	d11f      	bne.n	157a <_sercom_i2c_sync_send_address+0x156>
			if (msg->flags & I2C_M_TEN) {
    153a:	886b      	ldrh	r3, [r5, #2]
    153c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1540:	d039      	beq.n	15b6 <_sercom_i2c_sync_send_address+0x192>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1542:	882b      	ldrh	r3, [r5, #0]
    1544:	121b      	asrs	r3, r3, #8
    1546:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1548:	f003 0206 	and.w	r2, r3, #6
    154c:	69e3      	ldr	r3, [r4, #28]
    154e:	f013 0f04 	tst.w	r3, #4
    1552:	d1fb      	bne.n	154c <_sercom_i2c_sync_send_address+0x128>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1554:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    155a:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    155c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1560:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1562:	69e3      	ldr	r3, [r4, #28]
    1564:	f013 0f04 	tst.w	r3, #4
    1568:	d1fb      	bne.n	1562 <_sercom_i2c_sync_send_address+0x13e>
				msg->flags &= ~I2C_M_TEN;
    156a:	886b      	ldrh	r3, [r5, #2]
    156c:	b29b      	uxth	r3, r3
    156e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1572:	b29b      	uxth	r3, r3
    1574:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1576:	2000      	movs	r0, #0
    1578:	bd70      	pop	{r4, r5, r6, pc}
				if (msg->len > 0) {
    157a:	686b      	ldr	r3, [r5, #4]
    157c:	2b00      	cmp	r3, #0
    157e:	dd04      	ble.n	158a <_sercom_i2c_sync_send_address+0x166>
					msg->flags |= I2C_M_FAIL;
    1580:	886b      	ldrh	r3, [r5, #2]
    1582:	b29b      	uxth	r3, r3
    1584:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1588:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    158a:	886b      	ldrh	r3, [r5, #2]
    158c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1590:	d108      	bne.n	15a4 <_sercom_i2c_sync_send_address+0x180>
				msg->flags &= ~I2C_M_BUSY;
    1592:	886b      	ldrh	r3, [r5, #2]
    1594:	b29b      	uxth	r3, r3
    1596:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    159a:	b29b      	uxth	r3, r3
    159c:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    159e:	f06f 0001 	mvn.w	r0, #1
    15a2:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    15a4:	6863      	ldr	r3, [r4, #4]
    15a6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    15aa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15ac:	69e3      	ldr	r3, [r4, #28]
    15ae:	f013 0f04 	tst.w	r3, #4
    15b2:	d1fb      	bne.n	15ac <_sercom_i2c_sync_send_address+0x188>
    15b4:	e7ed      	b.n	1592 <_sercom_i2c_sync_send_address+0x16e>
			if (msg->len == 0) {
    15b6:	6868      	ldr	r0, [r5, #4]
    15b8:	b998      	cbnz	r0, 15e2 <_sercom_i2c_sync_send_address+0x1be>
				if (msg->flags & I2C_M_STOP) {
    15ba:	886b      	ldrh	r3, [r5, #2]
    15bc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    15c0:	d106      	bne.n	15d0 <_sercom_i2c_sync_send_address+0x1ac>
				msg->flags &= ~I2C_M_BUSY;
    15c2:	886b      	ldrh	r3, [r5, #2]
    15c4:	b29b      	uxth	r3, r3
    15c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    15ca:	b29b      	uxth	r3, r3
    15cc:	806b      	strh	r3, [r5, #2]
    15ce:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    15d0:	6863      	ldr	r3, [r4, #4]
    15d2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    15d6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15d8:	69e3      	ldr	r3, [r4, #28]
    15da:	f013 0f04 	tst.w	r3, #4
    15de:	d1fb      	bne.n	15d8 <_sercom_i2c_sync_send_address+0x1b4>
    15e0:	e7ef      	b.n	15c2 <_sercom_i2c_sync_send_address+0x19e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    15e2:	68ab      	ldr	r3, [r5, #8]
    15e4:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    15e6:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    15e8:	69e3      	ldr	r3, [r4, #28]
    15ea:	f013 0f04 	tst.w	r3, #4
    15ee:	d1fb      	bne.n	15e8 <_sercom_i2c_sync_send_address+0x1c4>
				msg->buffer++;
    15f0:	68ab      	ldr	r3, [r5, #8]
    15f2:	3301      	adds	r3, #1
    15f4:	60ab      	str	r3, [r5, #8]
				msg->len--;
    15f6:	686b      	ldr	r3, [r5, #4]
    15f8:	3b01      	subs	r3, #1
    15fa:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    15fc:	2000      	movs	r0, #0
    15fe:	bd70      	pop	{r4, r5, r6, pc}
	} else if (flags & SB_FLAG) {
    1600:	f010 0f02 	tst.w	r0, #2
    1604:	d048      	beq.n	1698 <_sercom_i2c_sync_send_address+0x274>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1606:	6869      	ldr	r1, [r5, #4]
    1608:	2900      	cmp	r1, #0
    160a:	d03d      	beq.n	1688 <_sercom_i2c_sync_send_address+0x264>
    160c:	f013 0f04 	tst.w	r3, #4
    1610:	d13a      	bne.n	1688 <_sercom_i2c_sync_send_address+0x264>
			msg->len--;
    1612:	3901      	subs	r1, #1
    1614:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1616:	b901      	cbnz	r1, 161a <_sercom_i2c_sync_send_address+0x1f6>
    1618:	b1e2      	cbz	r2, 1654 <_sercom_i2c_sync_send_address+0x230>
    161a:	2901      	cmp	r1, #1
    161c:	d018      	beq.n	1650 <_sercom_i2c_sync_send_address+0x22c>
			if (msg->len == 0) {
    161e:	686b      	ldr	r3, [r5, #4]
    1620:	b94b      	cbnz	r3, 1636 <_sercom_i2c_sync_send_address+0x212>
				if (msg->flags & I2C_M_STOP) {
    1622:	886b      	ldrh	r3, [r5, #2]
    1624:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1628:	d11d      	bne.n	1666 <_sercom_i2c_sync_send_address+0x242>
				msg->flags &= ~I2C_M_BUSY;
    162a:	886b      	ldrh	r3, [r5, #2]
    162c:	b29b      	uxth	r3, r3
    162e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1632:	b29b      	uxth	r3, r3
    1634:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1636:	68aa      	ldr	r2, [r5, #8]
    1638:	1c53      	adds	r3, r2, #1
    163a:	60ab      	str	r3, [r5, #8]
    163c:	69e3      	ldr	r3, [r4, #28]
    163e:	f013 0f04 	tst.w	r3, #4
    1642:	d1fb      	bne.n	163c <_sercom_i2c_sync_send_address+0x218>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1644:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1646:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1648:	2302      	movs	r3, #2
    164a:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    164c:	2000      	movs	r0, #0
    164e:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1650:	2a00      	cmp	r2, #0
    1652:	d0e4      	beq.n	161e <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1654:	6863      	ldr	r3, [r4, #4]
    1656:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    165a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    165c:	69e3      	ldr	r3, [r4, #28]
    165e:	f013 0f04 	tst.w	r3, #4
    1662:	d1fb      	bne.n	165c <_sercom_i2c_sync_send_address+0x238>
    1664:	e7db      	b.n	161e <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1666:	6863      	ldr	r3, [r4, #4]
    1668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    166c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    166e:	69e3      	ldr	r3, [r4, #28]
    1670:	f013 0f04 	tst.w	r3, #4
    1674:	d1fb      	bne.n	166e <_sercom_i2c_sync_send_address+0x24a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1676:	6863      	ldr	r3, [r4, #4]
    1678:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    167c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    167e:	69e3      	ldr	r3, [r4, #28]
    1680:	f013 0f04 	tst.w	r3, #4
    1684:	d1fb      	bne.n	167e <_sercom_i2c_sync_send_address+0x25a>
    1686:	e7d0      	b.n	162a <_sercom_i2c_sync_send_address+0x206>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1688:	2302      	movs	r3, #2
    168a:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    168c:	f06f 0001 	mvn.w	r0, #1
    1690:	bd70      	pop	{r4, r5, r6, pc}
			return I2C_ERR_BAD_ADDRESS;
    1692:	f06f 0003 	mvn.w	r0, #3
    1696:	bd70      	pop	{r4, r5, r6, pc}
	return I2C_OK;
    1698:	2000      	movs	r0, #0
}
    169a:	bd70      	pop	{r4, r5, r6, pc}
    169c:	000031d0 	.word	0x000031d0
    16a0:	00000fb9 	.word	0x00000fb9

000016a4 <_i2c_m_sync_init>:
{
    16a4:	b538      	push	{r3, r4, r5, lr}
    16a6:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    16a8:	4604      	mov	r4, r0
    16aa:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    16ae:	4906      	ldr	r1, [pc, #24]	; (16c8 <_i2c_m_sync_init+0x24>)
    16b0:	3000      	adds	r0, #0
    16b2:	bf18      	it	ne
    16b4:	2001      	movne	r0, #1
    16b6:	4b05      	ldr	r3, [pc, #20]	; (16cc <_i2c_m_sync_init+0x28>)
    16b8:	4798      	blx	r3
	i2c_dev->hw = hw;
    16ba:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    16bc:	4629      	mov	r1, r5
    16be:	4620      	mov	r0, r4
    16c0:	4b03      	ldr	r3, [pc, #12]	; (16d0 <_i2c_m_sync_init+0x2c>)
    16c2:	4798      	blx	r3
}
    16c4:	bd38      	pop	{r3, r4, r5, pc}
    16c6:	bf00      	nop
    16c8:	000031d0 	.word	0x000031d0
    16cc:	00000fb9 	.word	0x00000fb9
    16d0:	00001345 	.word	0x00001345

000016d4 <_i2c_m_sync_transfer>:
{
    16d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    16d8:	4605      	mov	r5, r0
    16da:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    16dc:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    16de:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 1980 <_i2c_m_sync_transfer+0x2ac>
    16e2:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    16e6:	4641      	mov	r1, r8
    16e8:	3000      	adds	r0, #0
    16ea:	bf18      	it	ne
    16ec:	2001      	movne	r0, #1
    16ee:	4fa2      	ldr	r7, [pc, #648]	; (1978 <_i2c_m_sync_transfer+0x2a4>)
    16f0:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    16f2:	6928      	ldr	r0, [r5, #16]
    16f4:	f240 52d1 	movw	r2, #1489	; 0x5d1
    16f8:	4641      	mov	r1, r8
    16fa:	3000      	adds	r0, #0
    16fc:	bf18      	it	ne
    16fe:	2001      	movne	r0, #1
    1700:	47b8      	blx	r7
	ASSERT(msg);
    1702:	f240 52d2 	movw	r2, #1490	; 0x5d2
    1706:	4641      	mov	r1, r8
    1708:	1c30      	adds	r0, r6, #0
    170a:	bf18      	it	ne
    170c:	2001      	movne	r0, #1
    170e:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1710:	886b      	ldrh	r3, [r5, #2]
    1712:	f413 7f80 	tst.w	r3, #256	; 0x100
    1716:	f040 812a 	bne.w	196e <_i2c_m_sync_transfer+0x29a>
	msg->flags |= I2C_M_BUSY;
    171a:	8873      	ldrh	r3, [r6, #2]
    171c:	b29b      	uxth	r3, r3
    171e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1722:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    1724:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1728:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    172c:	6863      	ldr	r3, [r4, #4]
    172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1732:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1734:	69e3      	ldr	r3, [r4, #28]
    1736:	f013 0f04 	tst.w	r3, #4
    173a:	d1fb      	bne.n	1734 <_i2c_m_sync_transfer+0x60>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    173c:	4628      	mov	r0, r5
    173e:	4b8f      	ldr	r3, [pc, #572]	; (197c <_i2c_m_sync_transfer+0x2a8>)
    1740:	4798      	blx	r3
	if (ret) {
    1742:	4603      	mov	r3, r0
    1744:	2800      	cmp	r0, #0
    1746:	f000 80b0 	beq.w	18aa <_i2c_m_sync_transfer+0x1d6>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    174a:	886a      	ldrh	r2, [r5, #2]
    174c:	b292      	uxth	r2, r2
    174e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1752:	b292      	uxth	r2, r2
    1754:	806a      	strh	r2, [r5, #2]
		return ret;
    1756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return I2C_ERR_BUS;
    175a:	f06f 0004 	mvn.w	r0, #4
    175e:	e0b7      	b.n	18d0 <_i2c_m_sync_transfer+0x1fc>
			if (msg->flags & I2C_M_STOP) {
    1760:	8873      	ldrh	r3, [r6, #2]
    1762:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1766:	d107      	bne.n	1778 <_i2c_m_sync_transfer+0xa4>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1768:	886b      	ldrh	r3, [r5, #2]
    176a:	b29b      	uxth	r3, r3
    176c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1770:	b29b      	uxth	r3, r3
    1772:	806b      	strh	r3, [r5, #2]
			return ret;
    1774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1778:	6863      	ldr	r3, [r4, #4]
    177a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    177e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1780:	69e3      	ldr	r3, [r4, #28]
    1782:	f013 0f04 	tst.w	r3, #4
    1786:	d1fb      	bne.n	1780 <_i2c_m_sync_transfer+0xac>
    1788:	e7ee      	b.n	1768 <_i2c_m_sync_transfer+0x94>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    178a:	f013 0f04 	tst.w	r3, #4
    178e:	d11f      	bne.n	17d0 <_i2c_m_sync_transfer+0xfc>
			if (msg->flags & I2C_M_TEN) {
    1790:	886b      	ldrh	r3, [r5, #2]
    1792:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1796:	d039      	beq.n	180c <_i2c_m_sync_transfer+0x138>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1798:	882b      	ldrh	r3, [r5, #0]
    179a:	121b      	asrs	r3, r3, #8
    179c:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    179e:	f003 0206 	and.w	r2, r3, #6
    17a2:	69e3      	ldr	r3, [r4, #28]
    17a4:	f013 0f04 	tst.w	r3, #4
    17a8:	d1fb      	bne.n	17a2 <_i2c_m_sync_transfer+0xce>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    17aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    17ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    17b0:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    17b2:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    17b6:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    17b8:	69e3      	ldr	r3, [r4, #28]
    17ba:	f013 0f04 	tst.w	r3, #4
    17be:	d1fb      	bne.n	17b8 <_i2c_m_sync_transfer+0xe4>
				msg->flags &= ~I2C_M_TEN;
    17c0:	886b      	ldrh	r3, [r5, #2]
    17c2:	b29b      	uxth	r3, r3
    17c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    17c8:	b29b      	uxth	r3, r3
    17ca:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    17cc:	2000      	movs	r0, #0
    17ce:	e06b      	b.n	18a8 <_i2c_m_sync_transfer+0x1d4>
				if (msg->len > 0) {
    17d0:	686b      	ldr	r3, [r5, #4]
    17d2:	2b00      	cmp	r3, #0
    17d4:	dd04      	ble.n	17e0 <_i2c_m_sync_transfer+0x10c>
					msg->flags |= I2C_M_FAIL;
    17d6:	886b      	ldrh	r3, [r5, #2]
    17d8:	b29b      	uxth	r3, r3
    17da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    17de:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    17e0:	886b      	ldrh	r3, [r5, #2]
    17e2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    17e6:	d108      	bne.n	17fa <_i2c_m_sync_transfer+0x126>
				msg->flags &= ~I2C_M_BUSY;
    17e8:	886b      	ldrh	r3, [r5, #2]
    17ea:	b29b      	uxth	r3, r3
    17ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    17f0:	b29b      	uxth	r3, r3
    17f2:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    17f4:	f06f 0001 	mvn.w	r0, #1
    17f8:	e056      	b.n	18a8 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    17fa:	6863      	ldr	r3, [r4, #4]
    17fc:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1800:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1802:	69e3      	ldr	r3, [r4, #28]
    1804:	f013 0f04 	tst.w	r3, #4
    1808:	d1fb      	bne.n	1802 <_i2c_m_sync_transfer+0x12e>
    180a:	e7ed      	b.n	17e8 <_i2c_m_sync_transfer+0x114>
			if (msg->len == 0) {
    180c:	6868      	ldr	r0, [r5, #4]
    180e:	b998      	cbnz	r0, 1838 <_i2c_m_sync_transfer+0x164>
				if (msg->flags & I2C_M_STOP) {
    1810:	886b      	ldrh	r3, [r5, #2]
    1812:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1816:	d106      	bne.n	1826 <_i2c_m_sync_transfer+0x152>
				msg->flags &= ~I2C_M_BUSY;
    1818:	886b      	ldrh	r3, [r5, #2]
    181a:	b29b      	uxth	r3, r3
    181c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1820:	b29b      	uxth	r3, r3
    1822:	806b      	strh	r3, [r5, #2]
    1824:	e040      	b.n	18a8 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1826:	6863      	ldr	r3, [r4, #4]
    1828:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    182c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    182e:	69e3      	ldr	r3, [r4, #28]
    1830:	f013 0f04 	tst.w	r3, #4
    1834:	d1fb      	bne.n	182e <_i2c_m_sync_transfer+0x15a>
    1836:	e7ef      	b.n	1818 <_i2c_m_sync_transfer+0x144>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1838:	68ab      	ldr	r3, [r5, #8]
    183a:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    183c:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    183e:	69e3      	ldr	r3, [r4, #28]
    1840:	f013 0f04 	tst.w	r3, #4
    1844:	d1fb      	bne.n	183e <_i2c_m_sync_transfer+0x16a>
				msg->buffer++;
    1846:	68ab      	ldr	r3, [r5, #8]
    1848:	3301      	adds	r3, #1
    184a:	60ab      	str	r3, [r5, #8]
				msg->len--;
    184c:	686b      	ldr	r3, [r5, #4]
    184e:	3b01      	subs	r3, #1
    1850:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1852:	2000      	movs	r0, #0
    1854:	e028      	b.n	18a8 <_i2c_m_sync_transfer+0x1d4>
	} else if (flags & SB_FLAG) {
    1856:	f017 0f02 	tst.w	r7, #2
    185a:	f000 8083 	beq.w	1964 <_i2c_m_sync_transfer+0x290>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    185e:	6869      	ldr	r1, [r5, #4]
    1860:	2900      	cmp	r1, #0
    1862:	d077      	beq.n	1954 <_i2c_m_sync_transfer+0x280>
    1864:	f013 0f04 	tst.w	r3, #4
    1868:	d174      	bne.n	1954 <_i2c_m_sync_transfer+0x280>
			msg->len--;
    186a:	3901      	subs	r1, #1
    186c:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    186e:	b909      	cbnz	r1, 1874 <_i2c_m_sync_transfer+0x1a0>
    1870:	2a00      	cmp	r2, #0
    1872:	d055      	beq.n	1920 <_i2c_m_sync_transfer+0x24c>
    1874:	2901      	cmp	r1, #1
    1876:	d051      	beq.n	191c <_i2c_m_sync_transfer+0x248>
			if (msg->len == 0) {
    1878:	686b      	ldr	r3, [r5, #4]
    187a:	b94b      	cbnz	r3, 1890 <_i2c_m_sync_transfer+0x1bc>
				if (msg->flags & I2C_M_STOP) {
    187c:	886b      	ldrh	r3, [r5, #2]
    187e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1882:	d156      	bne.n	1932 <_i2c_m_sync_transfer+0x25e>
				msg->flags &= ~I2C_M_BUSY;
    1884:	886b      	ldrh	r3, [r5, #2]
    1886:	b29b      	uxth	r3, r3
    1888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    188c:	b29b      	uxth	r3, r3
    188e:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1890:	68aa      	ldr	r2, [r5, #8]
    1892:	1c53      	adds	r3, r2, #1
    1894:	60ab      	str	r3, [r5, #8]
    1896:	69e3      	ldr	r3, [r4, #28]
    1898:	f013 0f04 	tst.w	r3, #4
    189c:	d1fb      	bne.n	1896 <_i2c_m_sync_transfer+0x1c2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    189e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    18a0:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    18a2:	2302      	movs	r3, #2
    18a4:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    18a6:	2000      	movs	r0, #0
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    18a8:	4603      	mov	r3, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    18aa:	886a      	ldrh	r2, [r5, #2]
    18ac:	f412 7f80 	tst.w	r2, #256	; 0x100
    18b0:	d05a      	beq.n	1968 <_i2c_m_sync_transfer+0x294>
	void *   hw      = i2c_dev->hw;
    18b2:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    18b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    18b8:	7e03      	ldrb	r3, [r0, #24]
    18ba:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    18bc:	461f      	mov	r7, r3
		if (timeout-- == 0) {
    18be:	1e51      	subs	r1, r2, #1
    18c0:	2a00      	cmp	r2, #0
    18c2:	f43f af4a 	beq.w	175a <_i2c_m_sync_transfer+0x86>
    18c6:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    18c8:	f013 0f03 	tst.w	r3, #3
    18cc:	d0f4      	beq.n	18b8 <_i2c_m_sync_transfer+0x1e4>
	return I2C_OK;
    18ce:	2000      	movs	r0, #0
		if (ret) {
    18d0:	2800      	cmp	r0, #0
    18d2:	f47f af45 	bne.w	1760 <_i2c_m_sync_transfer+0x8c>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    18d6:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    18d8:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    18dc:	69e3      	ldr	r3, [r4, #28]
    18de:	f013 0f04 	tst.w	r3, #4
    18e2:	d1fb      	bne.n	18dc <_i2c_m_sync_transfer+0x208>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    18e4:	8b63      	ldrh	r3, [r4, #26]
    18e6:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    18e8:	f017 0f01 	tst.w	r7, #1
    18ec:	d0b3      	beq.n	1856 <_i2c_m_sync_transfer+0x182>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    18ee:	f013 0f02 	tst.w	r3, #2
    18f2:	f43f af4a 	beq.w	178a <_i2c_m_sync_transfer+0xb6>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    18f6:	2201      	movs	r2, #1
    18f8:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    18fa:	886a      	ldrh	r2, [r5, #2]
    18fc:	b292      	uxth	r2, r2
    18fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    1902:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1904:	886a      	ldrh	r2, [r5, #2]
    1906:	b292      	uxth	r2, r2
    1908:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    190c:	b292      	uxth	r2, r2
    190e:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1910:	f013 0f01 	tst.w	r3, #1
    1914:	d023      	beq.n	195e <_i2c_m_sync_transfer+0x28a>
				return I2C_ERR_BUS;
    1916:	f06f 0004 	mvn.w	r0, #4
    191a:	e7c5      	b.n	18a8 <_i2c_m_sync_transfer+0x1d4>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    191c:	2a00      	cmp	r2, #0
    191e:	d0ab      	beq.n	1878 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1920:	6863      	ldr	r3, [r4, #4]
    1922:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1926:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1928:	69e3      	ldr	r3, [r4, #28]
    192a:	f013 0f04 	tst.w	r3, #4
    192e:	d1fb      	bne.n	1928 <_i2c_m_sync_transfer+0x254>
    1930:	e7a2      	b.n	1878 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1932:	6863      	ldr	r3, [r4, #4]
    1934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1938:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    193a:	69e3      	ldr	r3, [r4, #28]
    193c:	f013 0f04 	tst.w	r3, #4
    1940:	d1fb      	bne.n	193a <_i2c_m_sync_transfer+0x266>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1942:	6863      	ldr	r3, [r4, #4]
    1944:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1948:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    194a:	69e3      	ldr	r3, [r4, #28]
    194c:	f013 0f04 	tst.w	r3, #4
    1950:	d1fb      	bne.n	194a <_i2c_m_sync_transfer+0x276>
    1952:	e797      	b.n	1884 <_i2c_m_sync_transfer+0x1b0>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1954:	2302      	movs	r3, #2
    1956:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1958:	f06f 0001 	mvn.w	r0, #1
    195c:	e7a4      	b.n	18a8 <_i2c_m_sync_transfer+0x1d4>
			return I2C_ERR_BAD_ADDRESS;
    195e:	f06f 0003 	mvn.w	r0, #3
    1962:	e7a1      	b.n	18a8 <_i2c_m_sync_transfer+0x1d4>
	return I2C_OK;
    1964:	2000      	movs	r0, #0
    1966:	e79f      	b.n	18a8 <_i2c_m_sync_transfer+0x1d4>
	return ret;
    1968:	4618      	mov	r0, r3
    196a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return I2C_ERR_BUSY;
    196e:	f06f 0005 	mvn.w	r0, #5
}
    1972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1976:	bf00      	nop
    1978:	00000fb9 	.word	0x00000fb9
    197c:	00001425 	.word	0x00001425
    1980:	000031d0 	.word	0x000031d0

00001984 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1984:	b570      	push	{r4, r5, r6, lr}
    1986:	4606      	mov	r6, r0
    1988:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    198a:	4608      	mov	r0, r1
    198c:	4b58      	ldr	r3, [pc, #352]	; (1af0 <_spi_m_sync_init+0x16c>)
    198e:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1990:	2300      	movs	r3, #0
    1992:	2b00      	cmp	r3, #0
    1994:	d068      	beq.n	1a68 <_spi_m_sync_init+0xe4>
	return NULL;
    1996:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1998:	2e00      	cmp	r6, #0
    199a:	d071      	beq.n	1a80 <_spi_m_sync_init+0xfc>
    199c:	2c00      	cmp	r4, #0
    199e:	d06d      	beq.n	1a7c <_spi_m_sync_init+0xf8>
    19a0:	2001      	movs	r0, #1
    19a2:	f640 123f 	movw	r2, #2367	; 0x93f
    19a6:	4953      	ldr	r1, [pc, #332]	; (1af4 <_spi_m_sync_init+0x170>)
    19a8:	4b53      	ldr	r3, [pc, #332]	; (1af8 <_spi_m_sync_init+0x174>)
    19aa:	4798      	blx	r3

	if (regs == NULL) {
    19ac:	2d00      	cmp	r5, #0
    19ae:	f000 809c 	beq.w	1aea <_spi_m_sync_init+0x166>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    19b2:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    19b4:	f013 0f01 	tst.w	r3, #1
    19b8:	d11d      	bne.n	19f6 <_spi_m_sync_init+0x72>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    19ba:	682b      	ldr	r3, [r5, #0]
    19bc:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19c0:	69e3      	ldr	r3, [r4, #28]
    19c2:	f013 0f03 	tst.w	r3, #3
    19c6:	d1fb      	bne.n	19c0 <_spi_m_sync_init+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    19c8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    19ca:	f013 0f02 	tst.w	r3, #2
    19ce:	d00b      	beq.n	19e8 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    19d0:	6823      	ldr	r3, [r4, #0]
    19d2:	f023 0302 	bic.w	r3, r3, #2
    19d6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19d8:	69e3      	ldr	r3, [r4, #28]
    19da:	f013 0f03 	tst.w	r3, #3
    19de:	d1fb      	bne.n	19d8 <_spi_m_sync_init+0x54>
    19e0:	69e3      	ldr	r3, [r4, #28]
    19e2:	f013 0f02 	tst.w	r3, #2
    19e6:	d1fb      	bne.n	19e0 <_spi_m_sync_init+0x5c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    19e8:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    19ec:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19ee:	69e3      	ldr	r3, [r4, #28]
    19f0:	f013 0f03 	tst.w	r3, #3
    19f4:	d1fb      	bne.n	19ee <_spi_m_sync_init+0x6a>
    19f6:	69e3      	ldr	r3, [r4, #28]
    19f8:	f013 0f01 	tst.w	r3, #1
    19fc:	d1fb      	bne.n	19f6 <_spi_m_sync_init+0x72>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    19fe:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1a00:	682b      	ldr	r3, [r5, #0]
    1a02:	f003 031c 	and.w	r3, r3, #28
    1a06:	2b08      	cmp	r3, #8
    1a08:	d03c      	beq.n	1a84 <_spi_m_sync_init+0x100>
	ASSERT(hw && regs);
    1a0a:	2c00      	cmp	r4, #0
    1a0c:	d069      	beq.n	1ae2 <_spi_m_sync_init+0x15e>
    1a0e:	2d00      	cmp	r5, #0
    1a10:	d065      	beq.n	1ade <_spi_m_sync_init+0x15a>
    1a12:	2001      	movs	r0, #1
    1a14:	f640 1209 	movw	r2, #2313	; 0x909
    1a18:	4936      	ldr	r1, [pc, #216]	; (1af4 <_spi_m_sync_init+0x170>)
    1a1a:	4b37      	ldr	r3, [pc, #220]	; (1af8 <_spi_m_sync_init+0x174>)
    1a1c:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1a1e:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    1a20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1a24:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1a28:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a2a:	69e3      	ldr	r3, [r4, #28]
    1a2c:	f013 0f03 	tst.w	r3, #3
    1a30:	d1fb      	bne.n	1a2a <_spi_m_sync_init+0xa6>
	    (regs->ctrlb
    1a32:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    1a34:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    1a38:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    1a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1a40:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a42:	69e3      	ldr	r3, [r4, #28]
    1a44:	f013 0f17 	tst.w	r3, #23
    1a48:	d1fb      	bne.n	1a42 <_spi_m_sync_init+0xbe>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1a4a:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1a4c:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1a4e:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1a50:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1a54:	686b      	ldr	r3, [r5, #4]
    1a56:	f013 0f07 	tst.w	r3, #7
    1a5a:	d144      	bne.n	1ae6 <_spi_m_sync_init+0x162>
    1a5c:	2301      	movs	r3, #1
    1a5e:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    1a60:	89eb      	ldrh	r3, [r5, #14]
    1a62:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    1a64:	2000      	movs	r0, #0
    1a66:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    1a68:	2804      	cmp	r0, #4
    1a6a:	d002      	beq.n	1a72 <_spi_m_sync_init+0xee>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1a6c:	3301      	adds	r3, #1
    1a6e:	b2db      	uxtb	r3, r3
    1a70:	e78f      	b.n	1992 <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    1a72:	eb03 1503 	add.w	r5, r3, r3, lsl #4
    1a76:	4b21      	ldr	r3, [pc, #132]	; (1afc <_spi_m_sync_init+0x178>)
    1a78:	441d      	add	r5, r3
    1a7a:	e78d      	b.n	1998 <_spi_m_sync_init+0x14>
	ASSERT(dev && hw);
    1a7c:	2000      	movs	r0, #0
    1a7e:	e790      	b.n	19a2 <_spi_m_sync_init+0x1e>
    1a80:	2000      	movs	r0, #0
    1a82:	e78e      	b.n	19a2 <_spi_m_sync_init+0x1e>
	ASSERT(hw && regs);
    1a84:	b34c      	cbz	r4, 1ada <_spi_m_sync_init+0x156>
    1a86:	b335      	cbz	r5, 1ad6 <_spi_m_sync_init+0x152>
    1a88:	2001      	movs	r0, #1
    1a8a:	f640 121d 	movw	r2, #2333	; 0x91d
    1a8e:	4919      	ldr	r1, [pc, #100]	; (1af4 <_spi_m_sync_init+0x170>)
    1a90:	4b19      	ldr	r3, [pc, #100]	; (1af8 <_spi_m_sync_init+0x174>)
    1a92:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1a94:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    1a96:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1a9a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1a9e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1aa0:	69e3      	ldr	r3, [r4, #28]
    1aa2:	f013 0f03 	tst.w	r3, #3
    1aa6:	d1fb      	bne.n	1aa0 <_spi_m_sync_init+0x11c>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    1aa8:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    1aaa:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    1aae:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    1ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1ab6:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1aba:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1abc:	69e3      	ldr	r3, [r4, #28]
    1abe:	f013 0f17 	tst.w	r3, #23
    1ac2:	d1fb      	bne.n	1abc <_spi_m_sync_init+0x138>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1ac4:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1ac6:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1ac8:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1aca:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1ace:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d1fc      	bne.n	1ace <_spi_m_sync_init+0x14a>
    1ad4:	e7be      	b.n	1a54 <_spi_m_sync_init+0xd0>
	ASSERT(hw && regs);
    1ad6:	2000      	movs	r0, #0
    1ad8:	e7d7      	b.n	1a8a <_spi_m_sync_init+0x106>
    1ada:	2000      	movs	r0, #0
    1adc:	e7d5      	b.n	1a8a <_spi_m_sync_init+0x106>
	ASSERT(hw && regs);
    1ade:	2000      	movs	r0, #0
    1ae0:	e798      	b.n	1a14 <_spi_m_sync_init+0x90>
    1ae2:	2000      	movs	r0, #0
    1ae4:	e796      	b.n	1a14 <_spi_m_sync_init+0x90>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1ae6:	2302      	movs	r3, #2
    1ae8:	e7b9      	b.n	1a5e <_spi_m_sync_init+0xda>
		return ERR_INVALID_ARG;
    1aea:	f06f 000c 	mvn.w	r0, #12
}
    1aee:	bd70      	pop	{r4, r5, r6, pc}
    1af0:	000012bd 	.word	0x000012bd
    1af4:	000031d0 	.word	0x000031d0
    1af8:	00000fb9 	.word	0x00000fb9
    1afc:	000031bc 	.word	0x000031bc

00001b00 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b02:	b087      	sub	sp, #28
    1b04:	4607      	mov	r7, r0
    1b06:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
    1b08:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1b0a:	680b      	ldr	r3, [r1, #0]
    1b0c:	9301      	str	r3, [sp, #4]
    1b0e:	684b      	ldr	r3, [r1, #4]
    1b10:	9302      	str	r3, [sp, #8]
    1b12:	2300      	movs	r3, #0
    1b14:	9303      	str	r3, [sp, #12]
    1b16:	9304      	str	r3, [sp, #16]
    1b18:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    1b1a:	b1b8      	cbz	r0, 1b4c <_spi_m_sync_trans+0x4c>
    1b1c:	b1a4      	cbz	r4, 1b48 <_spi_m_sync_trans+0x48>
    1b1e:	2001      	movs	r0, #1
    1b20:	f640 22a3 	movw	r2, #2723	; 0xaa3
    1b24:	4934      	ldr	r1, [pc, #208]	; (1bf8 <_spi_m_sync_trans+0xf8>)
    1b26:	4b35      	ldr	r3, [pc, #212]	; (1bfc <_spi_m_sync_trans+0xfc>)
    1b28:	4798      	blx	r3
    1b2a:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1b2c:	f013 0f07 	tst.w	r3, #7
    1b30:	d15f      	bne.n	1bf2 <_spi_m_sync_trans+0xf2>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b32:	69e3      	ldr	r3, [r4, #28]
    1b34:	f013 0f03 	tst.w	r3, #3
    1b38:	d1fb      	bne.n	1b32 <_spi_m_sync_trans+0x32>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1b3a:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1b3c:	f013 0f02 	tst.w	r3, #2
    1b40:	d11e      	bne.n	1b80 <_spi_m_sync_trans+0x80>
		return ERR_NOT_INITIALIZED;
    1b42:	f06f 0013 	mvn.w	r0, #19
    1b46:	e052      	b.n	1bee <_spi_m_sync_trans+0xee>
	ASSERT(dev && hw);
    1b48:	4618      	mov	r0, r3
    1b4a:	e7e9      	b.n	1b20 <_spi_m_sync_trans+0x20>
    1b4c:	2000      	movs	r0, #0
    1b4e:	e7e7      	b.n	1b20 <_spi_m_sync_trans+0x20>
		return false;
    1b50:	2200      	movs	r2, #0
    1b52:	e02b      	b.n	1bac <_spi_m_sync_trans+0xac>
			data |= (*ctrl->txbuf) << 8;
    1b54:	f891 e001 	ldrb.w	lr, [r1, #1]
    1b58:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			ctrl->txbuf++;
    1b5c:	3102      	adds	r1, #2
    1b5e:	9101      	str	r1, [sp, #4]
	ctrl->txcnt++;
    1b60:	3201      	adds	r2, #1
    1b62:	9203      	str	r2, [sp, #12]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1b64:	62a0      	str	r0, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1b66:	f013 0f80 	tst.w	r3, #128	; 0x80
    1b6a:	d132      	bne.n	1bd2 <_spi_m_sync_trans+0xd2>
	return ERR_NONE;
    1b6c:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    1b6e:	2800      	cmp	r0, #0
    1b70:	db37      	blt.n	1be2 <_spi_m_sync_trans+0xe2>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1b72:	9803      	ldr	r0, [sp, #12]
    1b74:	68ab      	ldr	r3, [r5, #8]
    1b76:	4298      	cmp	r0, r3
    1b78:	d302      	bcc.n	1b80 <_spi_m_sync_trans+0x80>
    1b7a:	9a04      	ldr	r2, [sp, #16]
    1b7c:	4293      	cmp	r3, r2
    1b7e:	d930      	bls.n	1be2 <_spi_m_sync_trans+0xe2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1b80:	7e23      	ldrb	r3, [r4, #24]
    1b82:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1b84:	f013 0f04 	tst.w	r3, #4
    1b88:	d0e2      	beq.n	1b50 <_spi_m_sync_trans+0x50>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1b8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1b8c:	9a02      	ldr	r2, [sp, #8]
    1b8e:	b14a      	cbz	r2, 1ba4 <_spi_m_sync_trans+0xa4>
		*ctrl->rxbuf++ = (uint8_t)data;
    1b90:	1c50      	adds	r0, r2, #1
    1b92:	9002      	str	r0, [sp, #8]
    1b94:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    1b96:	2e01      	cmp	r6, #1
    1b98:	d904      	bls.n	1ba4 <_spi_m_sync_trans+0xa4>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1b9a:	1c90      	adds	r0, r2, #2
    1b9c:	9002      	str	r0, [sp, #8]
    1b9e:	f3c1 2107 	ubfx	r1, r1, #8, #8
    1ba2:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    1ba4:	9a04      	ldr	r2, [sp, #16]
    1ba6:	3201      	adds	r2, #1
    1ba8:	9204      	str	r2, [sp, #16]
	return true;
    1baa:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    1bac:	2a00      	cmp	r2, #0
    1bae:	d1da      	bne.n	1b66 <_spi_m_sync_trans+0x66>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1bb0:	9a03      	ldr	r2, [sp, #12]
    1bb2:	9904      	ldr	r1, [sp, #16]
    1bb4:	4291      	cmp	r1, r2
    1bb6:	d3d6      	bcc.n	1b66 <_spi_m_sync_trans+0x66>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1bb8:	88f8      	ldrh	r0, [r7, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1bba:	f013 0f01 	tst.w	r3, #1
    1bbe:	d0d2      	beq.n	1b66 <_spi_m_sync_trans+0x66>
	if (ctrl->txbuf) {
    1bc0:	9901      	ldr	r1, [sp, #4]
    1bc2:	2900      	cmp	r1, #0
    1bc4:	d0cc      	beq.n	1b60 <_spi_m_sync_trans+0x60>
		data = *ctrl->txbuf++;
    1bc6:	1c48      	adds	r0, r1, #1
    1bc8:	9001      	str	r0, [sp, #4]
    1bca:	7808      	ldrb	r0, [r1, #0]
		if (ctrl->char_size > 1) {
    1bcc:	2e01      	cmp	r6, #1
    1bce:	d8c1      	bhi.n	1b54 <_spi_m_sync_trans+0x54>
    1bd0:	e7c6      	b.n	1b60 <_spi_m_sync_trans+0x60>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1bd6:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1bd8:	2380      	movs	r3, #128	; 0x80
    1bda:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1bdc:	f06f 0012 	mvn.w	r0, #18
    1be0:	e7c5      	b.n	1b6e <_spi_m_sync_trans+0x6e>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1be2:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1be4:	f013 0f03 	tst.w	r3, #3
    1be8:	d0fb      	beq.n	1be2 <_spi_m_sync_trans+0xe2>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1bea:	2303      	movs	r3, #3
    1bec:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1bee:	b007      	add	sp, #28
    1bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    1bf2:	f06f 0003 	mvn.w	r0, #3
    1bf6:	e7fa      	b.n	1bee <_spi_m_sync_trans+0xee>
    1bf8:	000031d0 	.word	0x000031d0
    1bfc:	00000fb9 	.word	0x00000fb9

00001c00 <_tcc_init_irq_param>:
/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TCC0) {
    1c00:	4b03      	ldr	r3, [pc, #12]	; (1c10 <_tcc_init_irq_param+0x10>)
    1c02:	4298      	cmp	r0, r3
    1c04:	d000      	beq.n	1c08 <_tcc_init_irq_param+0x8>
    1c06:	4770      	bx	lr
		_tcc0_dev = (struct _pwm_device *)dev;
    1c08:	4b02      	ldr	r3, [pc, #8]	; (1c14 <_tcc_init_irq_param+0x14>)
    1c0a:	6019      	str	r1, [r3, #0]
	}
}
    1c0c:	e7fb      	b.n	1c06 <_tcc_init_irq_param+0x6>
    1c0e:	bf00      	nop
    1c10:	41016000 	.word	0x41016000
    1c14:	200000e8 	.word	0x200000e8

00001c18 <tcc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tcc_pwm_interrupt_handler(struct _pwm_device *device)
{
    1c18:	b538      	push	{r3, r4, r5, lr}
    1c1a:	4605      	mov	r5, r0
	void *const hw = device->hw;
    1c1c:	6904      	ldr	r4, [r0, #16]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    1c1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    1c20:	f013 0f01 	tst.w	r3, #1
    1c24:	d004      	beq.n	1c30 <tcc_pwm_interrupt_handler+0x18>
}

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    1c26:	2301      	movs	r3, #1
    1c28:	62e3      	str	r3, [r4, #44]	; 0x2c
		hri_tcc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    1c2a:	6803      	ldr	r3, [r0, #0]
    1c2c:	b103      	cbz	r3, 1c30 <tcc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    1c2e:	4798      	blx	r3
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_ERR;
}

static inline bool hri_tcc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tcc *)hw)->INTENSET.reg & TCC_INTENSET_ERR) >> TCC_INTENSET_ERR_Pos;
    1c30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		}
	}
	if (hri_tcc_get_INTEN_ERR_bit(hw)) {
    1c32:	f013 0f08 	tst.w	r3, #8
    1c36:	d005      	beq.n	1c44 <tcc_pwm_interrupt_handler+0x2c>
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_ERR;
    1c38:	2308      	movs	r3, #8
    1c3a:	62e3      	str	r3, [r4, #44]	; 0x2c
		hri_tcc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    1c3c:	686b      	ldr	r3, [r5, #4]
    1c3e:	b10b      	cbz	r3, 1c44 <tcc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    1c40:	4628      	mov	r0, r5
    1c42:	4798      	blx	r3
    1c44:	bd38      	pop	{r3, r4, r5, pc}
	...

00001c48 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    1c48:	2300      	movs	r3, #0
    1c4a:	b13b      	cbz	r3, 1c5c <_get_tcc_cfg+0x14>
		if (_cfgs[i].hw == hw) {
			return &(_cfgs[i]);
		}
	}
	return NULL;
    1c4c:	2000      	movs	r0, #0
    1c4e:	4770      	bx	lr
			return &(_cfgs[i]);
    1c50:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    1c54:	0123      	lsls	r3, r4, #4
    1c56:	4608      	mov	r0, r1
    1c58:	4418      	add	r0, r3
    1c5a:	e00c      	b.n	1c76 <_get_tcc_cfg+0x2e>
{
    1c5c:	b410      	push	{r4}
		if (_cfgs[i].hw == hw) {
    1c5e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1c62:	010a      	lsls	r2, r1, #4
    1c64:	4905      	ldr	r1, [pc, #20]	; (1c7c <_get_tcc_cfg+0x34>)
    1c66:	588a      	ldr	r2, [r1, r2]
    1c68:	4282      	cmp	r2, r0
    1c6a:	d0f1      	beq.n	1c50 <_get_tcc_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    1c6c:	3301      	adds	r3, #1
    1c6e:	b2db      	uxtb	r3, r3
    1c70:	2b00      	cmp	r3, #0
    1c72:	d0f4      	beq.n	1c5e <_get_tcc_cfg+0x16>
	return NULL;
    1c74:	2000      	movs	r0, #0
}
    1c76:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c7a:	4770      	bx	lr
    1c7c:	20000000 	.word	0x20000000

00001c80 <_get_tcc_pwm_cfg>:

static struct tcc_pwm_cfg *_get_tcc_pwm_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs_pwm); i++) {
    1c80:	2300      	movs	r3, #0
    1c82:	b123      	cbz	r3, 1c8e <_get_tcc_pwm_cfg+0xe>
		if (_cfgs_pwm[i].hw == hw) {
			return &(_cfgs_pwm[i]);
		}
	}
	return NULL;
    1c84:	2000      	movs	r0, #0
    1c86:	4770      	bx	lr
			return &(_cfgs_pwm[i]);
    1c88:	4809      	ldr	r0, [pc, #36]	; (1cb0 <_get_tcc_pwm_cfg+0x30>)
    1c8a:	4408      	add	r0, r1
    1c8c:	e00d      	b.n	1caa <_get_tcc_pwm_cfg+0x2a>
{
    1c8e:	b410      	push	{r4}
		if (_cfgs_pwm[i].hw == hw) {
    1c90:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1c94:	0091      	lsls	r1, r2, #2
    1c96:	4a07      	ldr	r2, [pc, #28]	; (1cb4 <_get_tcc_pwm_cfg+0x34>)
    1c98:	440a      	add	r2, r1
    1c9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
    1c9c:	4282      	cmp	r2, r0
    1c9e:	d0f3      	beq.n	1c88 <_get_tcc_pwm_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_cfgs_pwm); i++) {
    1ca0:	3301      	adds	r3, #1
    1ca2:	b2db      	uxtb	r3, r3
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	d0f3      	beq.n	1c90 <_get_tcc_pwm_cfg+0x10>
	return NULL;
    1ca8:	2000      	movs	r0, #0
}
    1caa:	f85d 4b04 	ldr.w	r4, [sp], #4
    1cae:	4770      	bx	lr
    1cb0:	20000030 	.word	0x20000030
    1cb4:	20000000 	.word	0x20000000

00001cb8 <_pwm_init>:
{
    1cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cba:	4607      	mov	r7, r0
    1cbc:	460c      	mov	r4, r1
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    1cbe:	4608      	mov	r0, r1
    1cc0:	4b60      	ldr	r3, [pc, #384]	; (1e44 <_pwm_init+0x18c>)
    1cc2:	4798      	blx	r3
	if (cfg == NULL) {
    1cc4:	2800      	cmp	r0, #0
    1cc6:	f000 80b2 	beq.w	1e2e <_pwm_init+0x176>
    1cca:	4606      	mov	r6, r0
	struct tcc_pwm_cfg *cfg_pwm = _get_tcc_pwm_cfg(hw);
    1ccc:	4620      	mov	r0, r4
    1cce:	4b5e      	ldr	r3, [pc, #376]	; (1e48 <_pwm_init+0x190>)
    1cd0:	4798      	blx	r3
	if (cfg_pwm == NULL) {
    1cd2:	4605      	mov	r5, r0
    1cd4:	2800      	cmp	r0, #0
    1cd6:	f000 80ad 	beq.w	1e34 <_pwm_init+0x17c>
	device->hw = hw;
    1cda:	613c      	str	r4, [r7, #16]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    1cdc:	68a3      	ldr	r3, [r4, #8]
	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    1cde:	f013 0f01 	tst.w	r3, #1
    1ce2:	d119      	bne.n	1d18 <_pwm_init+0x60>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1ce4:	68a3      	ldr	r3, [r4, #8]
    1ce6:	f013 0f03 	tst.w	r3, #3
    1cea:	d1fb      	bne.n	1ce4 <_pwm_init+0x2c>

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1cec:	6823      	ldr	r3, [r4, #0]
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    1cee:	f013 0f02 	tst.w	r3, #2
    1cf2:	d00b      	beq.n	1d0c <_pwm_init+0x54>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1cf4:	6823      	ldr	r3, [r4, #0]
    1cf6:	f023 0302 	bic.w	r3, r3, #2
    1cfa:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1cfc:	68a3      	ldr	r3, [r4, #8]
    1cfe:	f013 0f03 	tst.w	r3, #3
    1d02:	d1fb      	bne.n	1cfc <_pwm_init+0x44>
    1d04:	68a3      	ldr	r3, [r4, #8]
    1d06:	f013 0f02 	tst.w	r3, #2
    1d0a:	d1fb      	bne.n	1d04 <_pwm_init+0x4c>
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    1d0c:	2301      	movs	r3, #1
    1d0e:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1d10:	68a3      	ldr	r3, [r4, #8]
    1d12:	f013 0f03 	tst.w	r3, #3
    1d16:	d1fb      	bne.n	1d10 <_pwm_init+0x58>
    1d18:	68a3      	ldr	r3, [r4, #8]
    1d1a:	f013 0f01 	tst.w	r3, #1
    1d1e:	d1fb      	bne.n	1d18 <_pwm_init+0x60>
	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    1d20:	68b3      	ldr	r3, [r6, #8]
	((Tcc *)hw)->CTRLA.reg = data;
    1d22:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1d24:	68a3      	ldr	r3, [r4, #8]
    1d26:	f013 0f03 	tst.w	r3, #3
    1d2a:	d1fb      	bne.n	1d24 <_pwm_init+0x6c>
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    1d2c:	7b33      	ldrb	r3, [r6, #12]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    1d2e:	7163      	strb	r3, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    1d30:	7b73      	ldrb	r3, [r6, #13]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    1d32:	77a3      	strb	r3, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    1d34:	6933      	ldr	r3, [r6, #16]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    1d36:	6223      	str	r3, [r4, #32]
	hri_tcc_write_WAVE_reg(hw, cfg_pwm->wave);
    1d38:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tcc_write_WAVE_reg(const void *const hw, hri_tcc_wave_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->WAVE.reg = data;
    1d3a:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1d3c:	68a3      	ldr	r3, [r4, #8]
    1d3e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    1d42:	2b00      	cmp	r3, #0
    1d44:	d1fa      	bne.n	1d3c <_pwm_init+0x84>
	hri_tcc_write_PER_reg(hw, cfg_pwm->period);
    1d46:	68ab      	ldr	r3, [r5, #8]
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    1d48:	6423      	str	r3, [r4, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1d4a:	68a3      	ldr	r3, [r4, #8]
    1d4c:	f013 0f80 	tst.w	r3, #128	; 0x80
    1d50:	d1fb      	bne.n	1d4a <_pwm_init+0x92>
	cfg->per = cfg_pwm->period;
    1d52:	68ab      	ldr	r3, [r5, #8]
    1d54:	62f3      	str	r3, [r6, #44]	; 0x2c
	switch (cfg_pwm->sel_ch) {
    1d56:	79ab      	ldrb	r3, [r5, #6]
    1d58:	2b05      	cmp	r3, #5
    1d5a:	d86e      	bhi.n	1e3a <_pwm_init+0x182>
    1d5c:	e8df f003 	tbb	[pc, r3]
    1d60:	4f473f03 	.word	0x4f473f03
    1d64:	5f57      	.short	0x5f57
		cfg->cc0 = cfg_pwm->duty_cycle;
    1d66:	68eb      	ldr	r3, [r5, #12]
    1d68:	6173      	str	r3, [r6, #20]
}

static inline void hri_tcc_write_CC_reg(const void *const hw, uint8_t index, hri_tcc_cc_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CC[index].reg = data;
    1d6a:	6463      	str	r3, [r4, #68]	; 0x44
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1d6c:	68a3      	ldr	r3, [r4, #8]
    1d6e:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
    1d72:	d1fb      	bne.n	1d6c <_pwm_init+0xb4>
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_LUPD;
    1d74:	2302      	movs	r3, #2
    1d76:	7123      	strb	r3, [r4, #4]
	_tcc_init_irq_param(hw, (void *)device);
    1d78:	4639      	mov	r1, r7
    1d7a:	4620      	mov	r0, r4
    1d7c:	4b33      	ldr	r3, [pc, #204]	; (1e4c <_pwm_init+0x194>)
    1d7e:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg_pwm->irq);
    1d80:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1d84:	2b00      	cmp	r3, #0
    1d86:	db0d      	blt.n	1da4 <_pwm_init+0xec>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d88:	095a      	lsrs	r2, r3, #5
    1d8a:	f003 031f 	and.w	r3, r3, #31
    1d8e:	2101      	movs	r1, #1
    1d90:	fa01 f303 	lsl.w	r3, r1, r3
    1d94:	3220      	adds	r2, #32
    1d96:	492e      	ldr	r1, [pc, #184]	; (1e50 <_pwm_init+0x198>)
    1d98:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1d9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1da0:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ((IRQn_Type)cfg_pwm->irq);
    1da4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1da8:	2b00      	cmp	r3, #0
    1daa:	db09      	blt.n	1dc0 <_pwm_init+0x108>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dac:	095a      	lsrs	r2, r3, #5
    1dae:	f003 031f 	and.w	r3, r3, #31
    1db2:	2101      	movs	r1, #1
    1db4:	fa01 f303 	lsl.w	r3, r1, r3
    1db8:	3260      	adds	r2, #96	; 0x60
    1dba:	4925      	ldr	r1, [pc, #148]	; (1e50 <_pwm_init+0x198>)
    1dbc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ((IRQn_Type)cfg_pwm->irq);
    1dc0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	db3b      	blt.n	1e40 <_pwm_init+0x188>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dc8:	0959      	lsrs	r1, r3, #5
    1dca:	f003 031f 	and.w	r3, r3, #31
    1dce:	2201      	movs	r2, #1
    1dd0:	fa02 f303 	lsl.w	r3, r2, r3
    1dd4:	4a1e      	ldr	r2, [pc, #120]	; (1e50 <_pwm_init+0x198>)
    1dd6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    1dda:	2000      	movs	r0, #0
    1ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cfg->cc1 = cfg_pwm->duty_cycle;
    1dde:	68eb      	ldr	r3, [r5, #12]
    1de0:	61b3      	str	r3, [r6, #24]
	((Tcc *)hw)->CC[index].reg = data;
    1de2:	64a3      	str	r3, [r4, #72]	; 0x48
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1de4:	68a3      	ldr	r3, [r4, #8]
    1de6:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
    1dea:	d1fb      	bne.n	1de4 <_pwm_init+0x12c>
    1dec:	e7c2      	b.n	1d74 <_pwm_init+0xbc>
		cfg->cc2 = cfg_pwm->duty_cycle;
    1dee:	68eb      	ldr	r3, [r5, #12]
    1df0:	61f3      	str	r3, [r6, #28]
	((Tcc *)hw)->CC[index].reg = data;
    1df2:	64e3      	str	r3, [r4, #76]	; 0x4c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1df4:	68a3      	ldr	r3, [r4, #8]
    1df6:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
    1dfa:	d1fb      	bne.n	1df4 <_pwm_init+0x13c>
    1dfc:	e7ba      	b.n	1d74 <_pwm_init+0xbc>
		cfg->cc3 = cfg_pwm->duty_cycle;
    1dfe:	68eb      	ldr	r3, [r5, #12]
    1e00:	6233      	str	r3, [r6, #32]
	((Tcc *)hw)->CC[index].reg = data;
    1e02:	6523      	str	r3, [r4, #80]	; 0x50
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1e04:	68a3      	ldr	r3, [r4, #8]
    1e06:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
    1e0a:	d1fb      	bne.n	1e04 <_pwm_init+0x14c>
    1e0c:	e7b2      	b.n	1d74 <_pwm_init+0xbc>
		cfg->cc4 = cfg_pwm->duty_cycle;
    1e0e:	68eb      	ldr	r3, [r5, #12]
    1e10:	6273      	str	r3, [r6, #36]	; 0x24
	((Tcc *)hw)->CC[index].reg = data;
    1e12:	6563      	str	r3, [r4, #84]	; 0x54
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1e14:	68a3      	ldr	r3, [r4, #8]
    1e16:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
    1e1a:	d1fb      	bne.n	1e14 <_pwm_init+0x15c>
    1e1c:	e7aa      	b.n	1d74 <_pwm_init+0xbc>
		cfg->cc5 = cfg_pwm->duty_cycle;
    1e1e:	68eb      	ldr	r3, [r5, #12]
    1e20:	62b3      	str	r3, [r6, #40]	; 0x28
	((Tcc *)hw)->CC[index].reg = data;
    1e22:	65a3      	str	r3, [r4, #88]	; 0x58
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1e24:	68a3      	ldr	r3, [r4, #8]
    1e26:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
    1e2a:	d1fb      	bne.n	1e24 <_pwm_init+0x16c>
    1e2c:	e7a2      	b.n	1d74 <_pwm_init+0xbc>
		return ERR_NOT_FOUND;
    1e2e:	f06f 0009 	mvn.w	r0, #9
    1e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_NOT_FOUND;
    1e34:	f06f 0009 	mvn.w	r0, #9
    1e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_NO_RESOURCE;
    1e3a:	f06f 001b 	mvn.w	r0, #27
    1e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return ERR_NONE;
    1e40:	2000      	movs	r0, #0
}
    1e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e44:	00001c49 	.word	0x00001c49
    1e48:	00001c81 	.word	0x00001c81
    1e4c:	00001c01 	.word	0x00001c01
    1e50:	e000e100 	.word	0xe000e100

00001e54 <_pwm_enable>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    1e54:	6902      	ldr	r2, [r0, #16]
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    1e56:	6813      	ldr	r3, [r2, #0]
    1e58:	f043 0302 	orr.w	r3, r3, #2
    1e5c:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1e5e:	6893      	ldr	r3, [r2, #8]
    1e60:	f013 0f03 	tst.w	r3, #3
    1e64:	d1fb      	bne.n	1e5e <_pwm_enable+0xa>
}
    1e66:	4770      	bx	lr

00001e68 <_pwm_disable>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    1e68:	6902      	ldr	r2, [r0, #16]
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1e6a:	6813      	ldr	r3, [r2, #0]
    1e6c:	f023 0302 	bic.w	r3, r3, #2
    1e70:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1e72:	6893      	ldr	r3, [r2, #8]
    1e74:	f013 0f03 	tst.w	r3, #3
    1e78:	d1fb      	bne.n	1e72 <_pwm_disable+0xa>
}
    1e7a:	4770      	bx	lr

00001e7c <_pwm_set_param>:
{
    1e7c:	b570      	push	{r4, r5, r6, lr}
    1e7e:	460e      	mov	r6, r1
    1e80:	4615      	mov	r5, r2
	void *const         hw      = device->hw;
    1e82:	6904      	ldr	r4, [r0, #16]
	struct tcc_pwm_cfg *cfg_pwm = _get_tcc_pwm_cfg(hw);
    1e84:	4620      	mov	r0, r4
    1e86:	4b04      	ldr	r3, [pc, #16]	; (1e98 <_pwm_set_param+0x1c>)
    1e88:	4798      	blx	r3
	if (cfg_pwm != NULL) {
    1e8a:	b120      	cbz	r0, 1e96 <_pwm_set_param+0x1a>
}

static inline void hri_tcc_write_PERBUF_reg(const void *const hw, hri_tcc_perbuf_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PERBUF.reg = data;
    1e8c:	66e6      	str	r6, [r4, #108]	; 0x6c
		hri_tcc_write_CCB_reg(hw, cfg_pwm->sel_ch, duty_cycle);
    1e8e:	7983      	ldrb	r3, [r0, #6]
}

static inline void hri_tcc_write_CCBUF_reg(const void *const hw, uint8_t index, hri_tcc_ccbuf_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CCBUF[index].reg = data;
    1e90:	331c      	adds	r3, #28
    1e92:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    1e96:	bd70      	pop	{r4, r5, r6, pc}
    1e98:	00001c81 	.word	0x00001c81

00001e9c <_pwm_is_enabled>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    1e9c:	6902      	ldr	r2, [r0, #16]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1e9e:	6893      	ldr	r3, [r2, #8]
    1ea0:	f013 0f03 	tst.w	r3, #3
    1ea4:	d1fb      	bne.n	1e9e <_pwm_is_enabled+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1ea6:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    1ea8:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    1eac:	4770      	bx	lr

00001eae <_tcc_get_pwm>:
}
    1eae:	2000      	movs	r0, #0
    1eb0:	4770      	bx	lr
	...

00001eb4 <TCC0_0_Handler>:
{
    1eb4:	b508      	push	{r3, lr}
	tcc_pwm_interrupt_handler(_tcc0_dev);
    1eb6:	4b02      	ldr	r3, [pc, #8]	; (1ec0 <TCC0_0_Handler+0xc>)
    1eb8:	6818      	ldr	r0, [r3, #0]
    1eba:	4b02      	ldr	r3, [pc, #8]	; (1ec4 <TCC0_0_Handler+0x10>)
    1ebc:	4798      	blx	r3
    1ebe:	bd08      	pop	{r3, pc}
    1ec0:	200000e8 	.word	0x200000e8
    1ec4:	00001c19 	.word	0x00001c19

00001ec8 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1ec8:	2000      	movs	r0, #0
    1eca:	4770      	bx	lr

00001ecc <_usb_load_calib>:
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1ecc:	4b14      	ldr	r3, [pc, #80]	; (1f20 <_usb_load_calib+0x54>)
    1ece:	681a      	ldr	r2, [r3, #0]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
    1ed0:	f3c2 1344 	ubfx	r3, r2, #5, #5
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1ed4:	f3c2 2182 	ubfx	r1, r2, #10, #3
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    1ed8:	f012 021f 	ands.w	r2, r2, #31
    1edc:	d003      	beq.n	1ee6 <_usb_load_calib+0x1a>
    1ede:	2a1f      	cmp	r2, #31
    1ee0:	d102      	bne.n	1ee8 <_usb_load_calib+0x1c>
		pad_transn = 9;
    1ee2:	2209      	movs	r2, #9
    1ee4:	e000      	b.n	1ee8 <_usb_load_calib+0x1c>
    1ee6:	2209      	movs	r2, #9
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    1ee8:	b11b      	cbz	r3, 1ef2 <_usb_load_calib+0x26>
    1eea:	2b1f      	cmp	r3, #31
    1eec:	d102      	bne.n	1ef4 <_usb_load_calib+0x28>
		pad_transp = 25;
    1eee:	2319      	movs	r3, #25
    1ef0:	e000      	b.n	1ef4 <_usb_load_calib+0x28>
    1ef2:	2319      	movs	r3, #25
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    1ef4:	b119      	cbz	r1, 1efe <_usb_load_calib+0x32>
    1ef6:	2907      	cmp	r1, #7
    1ef8:	d102      	bne.n	1f00 <_usb_load_calib+0x34>
		pad_trim = 6;
    1efa:	2106      	movs	r1, #6
    1efc:	e000      	b.n	1f00 <_usb_load_calib+0x34>
    1efe:	2106      	movs	r1, #6
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1f00:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    1f04:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
    1f08:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1f0c:	8513      	strh	r3, [r2, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1f0e:	78d3      	ldrb	r3, [r2, #3]
    1f10:	f043 0303 	orr.w	r3, r3, #3
    1f14:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1f16:	78d3      	ldrb	r3, [r2, #3]
    1f18:	f043 030c 	orr.w	r3, r3, #12
    1f1c:	70d3      	strb	r3, [r2, #3]
    1f1e:	4770      	bx	lr
    1f20:	00800084 	.word	0x00800084

00001f24 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1f24:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1f26:	7c83      	ldrb	r3, [r0, #18]
    1f28:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1f2c:	7cc2      	ldrb	r2, [r0, #19]
    1f2e:	f002 0107 	and.w	r1, r2, #7

	if (!is_ctrl) {
    1f32:	2901      	cmp	r1, #1
    1f34:	d00c      	beq.n	1f50 <_usb_d_dev_handle_setup+0x2c>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1f36:	f103 0208 	add.w	r2, r3, #8
    1f3a:	0152      	lsls	r2, r2, #5
    1f3c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1f40:	2110      	movs	r1, #16
    1f42:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1f44:	015b      	lsls	r3, r3, #5
    1f46:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1f4a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    1f4e:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    1f50:	f012 0f40 	tst.w	r2, #64	; 0x40
    1f54:	d00c      	beq.n	1f70 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    1f56:	7cc2      	ldrb	r2, [r0, #19]
    1f58:	f36f 1286 	bfc	r2, #6, #1
    1f5c:	74c2      	strb	r2, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1f5e:	f103 0208 	add.w	r2, r3, #8
    1f62:	0152      	lsls	r2, r2, #5
    1f64:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1f68:	2180      	movs	r1, #128	; 0x80
    1f6a:	7111      	strb	r1, [r2, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1f6c:	2140      	movs	r1, #64	; 0x40
    1f6e:	7151      	strb	r1, [r2, #5]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    1f70:	7cc2      	ldrb	r2, [r0, #19]
    1f72:	f36f 02c3 	bfc	r2, #3, #1
    1f76:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1f78:	4909      	ldr	r1, [pc, #36]	; (1fa0 <_usb_d_dev_handle_setup+0x7c>)
    1f7a:	015a      	lsls	r2, r3, #5
    1f7c:	188c      	adds	r4, r1, r2
    1f7e:	2500      	movs	r5, #0
    1f80:	72a5      	strb	r5, [r4, #10]
    1f82:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1f84:	3308      	adds	r3, #8
    1f86:	015b      	lsls	r3, r3, #5
    1f88:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1f8c:	246f      	movs	r4, #111	; 0x6f
    1f8e:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1f90:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1f94:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    1f98:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    1f9a:	7c80      	ldrb	r0, [r0, #18]
    1f9c:	4798      	blx	r3
    1f9e:	bd38      	pop	{r3, r4, r5, pc}
    1fa0:	200000ec 	.word	0x200000ec

00001fa4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    1fa4:	b508      	push	{r3, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1fa6:	7c83      	ldrb	r3, [r0, #18]
    1fa8:	f003 030f 	and.w	r3, r3, #15
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    1fac:	2220      	movs	r2, #32
    1fae:	fa02 f101 	lsl.w	r1, r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1fb2:	b2c9      	uxtb	r1, r1
    1fb4:	015b      	lsls	r3, r3, #5
    1fb6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1fba:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1fbe:	4b03      	ldr	r3, [pc, #12]	; (1fcc <_usb_d_dev_handle_stall+0x28>)
    1fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1fc2:	6882      	ldr	r2, [r0, #8]
    1fc4:	2101      	movs	r1, #1
    1fc6:	7c80      	ldrb	r0, [r0, #18]
    1fc8:	4798      	blx	r3
    1fca:	bd08      	pop	{r3, pc}
    1fcc:	200000ec 	.word	0x200000ec

00001fd0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1fd0:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1fd2:	7c84      	ldrb	r4, [r0, #18]
    1fd4:	2cff      	cmp	r4, #255	; 0xff
    1fd6:	d003      	beq.n	1fe0 <_usb_d_dev_trans_done+0x10>
    1fd8:	7cc3      	ldrb	r3, [r0, #19]
    1fda:	f013 0f40 	tst.w	r3, #64	; 0x40
    1fde:	d100      	bne.n	1fe2 <_usb_d_dev_trans_done+0x12>
    1fe0:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    1fe2:	7cc2      	ldrb	r2, [r0, #19]
    1fe4:	f36f 1286 	bfc	r2, #6, #1
    1fe8:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1fea:	4a03      	ldr	r2, [pc, #12]	; (1ff8 <_usb_d_dev_trans_done+0x28>)
    1fec:	6f15      	ldr	r5, [r2, #112]	; 0x70
    1fee:	6882      	ldr	r2, [r0, #8]
    1ff0:	4620      	mov	r0, r4
    1ff2:	47a8      	blx	r5
    1ff4:	e7f4      	b.n	1fe0 <_usb_d_dev_trans_done+0x10>
    1ff6:	bf00      	nop
    1ff8:	200000ec 	.word	0x200000ec

00001ffc <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1ffc:	b530      	push	{r4, r5, lr}
    1ffe:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2000:	7c84      	ldrb	r4, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    2002:	4d19      	ldr	r5, [pc, #100]	; (2068 <_usb_d_dev_trans_stop+0x6c>)
    2004:	882d      	ldrh	r5, [r5, #0]
    2006:	f8ad 5004 	strh.w	r5, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    200a:	2cff      	cmp	r4, #255	; 0xff
    200c:	d022      	beq.n	2054 <_usb_d_dev_trans_stop+0x58>
    200e:	f004 030f 	and.w	r3, r4, #15
    2012:	7cc4      	ldrb	r4, [r0, #19]
    2014:	f014 0f40 	tst.w	r4, #64	; 0x40
    2018:	d01c      	beq.n	2054 <_usb_d_dev_trans_stop+0x58>
		return;
	}
	/* Stop transfer */
	if (dir) {
    201a:	b1e9      	cbz	r1, 2058 <_usb_d_dev_trans_stop+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    201c:	f103 0408 	add.w	r4, r3, #8
    2020:	0164      	lsls	r4, r4, #5
    2022:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2026:	2580      	movs	r5, #128	; 0x80
    2028:	7125      	strb	r5, [r4, #4]
    202a:	460c      	mov	r4, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    202c:	a902      	add	r1, sp, #8
    202e:	440c      	add	r4, r1
    2030:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2034:	f103 0508 	add.w	r5, r3, #8
    2038:	016d      	lsls	r5, r5, #5
    203a:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    203e:	71e9      	strb	r1, [r5, #7]
	_usbd_ep_int_dis(epn, intflags[dir]);
    2040:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2044:	015b      	lsls	r3, r3, #5
    2046:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    204a:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usb_d_dev_trans_done(ept, code);
    204e:	4611      	mov	r1, r2
    2050:	4b06      	ldr	r3, [pc, #24]	; (206c <_usb_d_dev_trans_stop+0x70>)
    2052:	4798      	blx	r3
}
    2054:	b003      	add	sp, #12
    2056:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2058:	f103 0408 	add.w	r4, r3, #8
    205c:	0164      	lsls	r4, r4, #5
    205e:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2062:	2540      	movs	r5, #64	; 0x40
    2064:	7165      	strb	r5, [r4, #5]
    2066:	e7e0      	b.n	202a <_usb_d_dev_trans_stop+0x2e>
    2068:	000031ec 	.word	0x000031ec
    206c:	00001fd1 	.word	0x00001fd1

00002070 <_usb_d_dev_handle_trfail>:
{
    2070:	b570      	push	{r4, r5, r6, lr}
    2072:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    2074:	7c83      	ldrb	r3, [r0, #18]
    2076:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    207a:	4a40      	ldr	r2, [pc, #256]	; (217c <_usb_d_dev_handle_trfail+0x10c>)
    207c:	8892      	ldrh	r2, [r2, #4]
    207e:	f8ad 2004 	strh.w	r2, [sp, #4]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    2082:	4a3f      	ldr	r2, [pc, #252]	; (2180 <_usb_d_dev_handle_trfail+0x110>)
    2084:	eb02 1243 	add.w	r2, r2, r3, lsl #5
	uint8_t            eptype
    2088:	460c      	mov	r4, r1
    208a:	b3a9      	cbz	r1, 20f8 <_usb_d_dev_handle_trfail+0x88>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    208c:	f103 0108 	add.w	r1, r3, #8
    2090:	0149      	lsls	r1, r1, #5
    2092:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2096:	780d      	ldrb	r5, [r1, #0]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    2098:	f3c5 1502 	ubfx	r5, r5, #4, #3
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    209c:	7cc1      	ldrb	r1, [r0, #19]
    209e:	f001 0607 	and.w	r6, r1, #7
	st.reg = bank[bank_n].STATUS_BK.reg;
    20a2:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    20a6:	7a91      	ldrb	r1, [r2, #10]
    20a8:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    20aa:	2d02      	cmp	r5, #2
    20ac:	d02d      	beq.n	210a <_usb_d_dev_handle_trfail+0x9a>
	} else if (st.bit.ERRORFLOW) {
    20ae:	f011 0f02 	tst.w	r1, #2
    20b2:	d049      	beq.n	2148 <_usb_d_dev_handle_trfail+0xd8>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    20b4:	7a91      	ldrb	r1, [r2, #10]
    20b6:	f36f 0141 	bfc	r1, #1, #1
    20ba:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    20bc:	aa02      	add	r2, sp, #8
    20be:	1911      	adds	r1, r2, r4
    20c0:	f811 5c04 	ldrb.w	r5, [r1, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    20c4:	f103 0208 	add.w	r2, r3, #8
    20c8:	0152      	lsls	r2, r2, #5
    20ca:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    20ce:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    20d0:	f811 2c04 	ldrb.w	r2, [r1, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    20d4:	015b      	lsls	r3, r3, #5
    20d6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    20da:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    20de:	2e01      	cmp	r6, #1
    20e0:	d14a      	bne.n	2178 <_usb_d_dev_handle_trfail+0x108>
    20e2:	7cc3      	ldrb	r3, [r0, #19]
    20e4:	f013 0f40 	tst.w	r3, #64	; 0x40
    20e8:	d046      	beq.n	2178 <_usb_d_dev_handle_trfail+0x108>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    20ea:	09d9      	lsrs	r1, r3, #7
    20ec:	428c      	cmp	r4, r1
    20ee:	d043      	beq.n	2178 <_usb_d_dev_handle_trfail+0x108>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    20f0:	2200      	movs	r2, #0
    20f2:	4b24      	ldr	r3, [pc, #144]	; (2184 <_usb_d_dev_handle_trfail+0x114>)
    20f4:	4798      	blx	r3
    20f6:	e03f      	b.n	2178 <_usb_d_dev_handle_trfail+0x108>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    20f8:	f103 0108 	add.w	r1, r3, #8
    20fc:	0149      	lsls	r1, r1, #5
    20fe:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2102:	780d      	ldrb	r5, [r1, #0]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    2104:	f005 0507 	and.w	r5, r5, #7
    2108:	e7c8      	b.n	209c <_usb_d_dev_handle_trfail+0x2c>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    210a:	f011 0f01 	tst.w	r1, #1
    210e:	d0ce      	beq.n	20ae <_usb_d_dev_handle_trfail+0x3e>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    2110:	7a91      	ldrb	r1, [r2, #10]
    2112:	f36f 0100 	bfc	r1, #0, #1
    2116:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2118:	aa02      	add	r2, sp, #8
    211a:	1911      	adds	r1, r2, r4
    211c:	f811 5c04 	ldrb.w	r5, [r1, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2120:	f103 0208 	add.w	r2, r3, #8
    2124:	0152      	lsls	r2, r2, #5
    2126:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    212a:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    212c:	f811 2c04 	ldrb.w	r2, [r1, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2130:	015b      	lsls	r3, r3, #5
    2132:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2136:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    213a:	2204      	movs	r2, #4
    213c:	1c21      	adds	r1, r4, #0
    213e:	bf18      	it	ne
    2140:	2101      	movne	r1, #1
    2142:	4b10      	ldr	r3, [pc, #64]	; (2184 <_usb_d_dev_handle_trfail+0x114>)
    2144:	4798      	blx	r3
    2146:	e017      	b.n	2178 <_usb_d_dev_handle_trfail+0x108>
	bank->STATUS_BK.reg     = 0;
    2148:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    214c:	4a0c      	ldr	r2, [pc, #48]	; (2180 <_usb_d_dev_handle_trfail+0x110>)
    214e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    2152:	2100      	movs	r1, #0
    2154:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2156:	aa02      	add	r2, sp, #8
    2158:	4414      	add	r4, r2
    215a:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    215e:	f103 0208 	add.w	r2, r3, #8
    2162:	0152      	lsls	r2, r2, #5
    2164:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2168:	71d1      	strb	r1, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    216a:	f814 2c04 	ldrb.w	r2, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    216e:	015b      	lsls	r3, r3, #5
    2170:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2174:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
}
    2178:	b002      	add	sp, #8
    217a:	bd70      	pop	{r4, r5, r6, pc}
    217c:	000031ec 	.word	0x000031ec
    2180:	200000ec 	.word	0x200000ec
    2184:	00001ffd 	.word	0x00001ffd

00002188 <_usb_d_dev_reset_epts>:
{
    2188:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < USB_D_N_EP; i++) {
    218a:	2400      	movs	r4, #0
    218c:	e019      	b.n	21c2 <_usb_d_dev_reset_epts+0x3a>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    218e:	4e11      	ldr	r6, [pc, #68]	; (21d4 <_usb_d_dev_reset_epts+0x4c>)
    2190:	f106 0060 	add.w	r0, r6, #96	; 0x60
    2194:	00a5      	lsls	r5, r4, #2
    2196:	192a      	adds	r2, r5, r4
    2198:	0093      	lsls	r3, r2, #2
    219a:	3310      	adds	r3, #16
    219c:	4418      	add	r0, r3
    219e:	2103      	movs	r1, #3
    21a0:	3004      	adds	r0, #4
    21a2:	4b0d      	ldr	r3, [pc, #52]	; (21d8 <_usb_d_dev_reset_epts+0x50>)
    21a4:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    21a6:	192a      	adds	r2, r5, r4
    21a8:	0093      	lsls	r3, r2, #2
    21aa:	4433      	add	r3, r6
    21ac:	22ff      	movs	r2, #255	; 0xff
    21ae:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		dev_inst.ep[i].flags.u8 = 0;
    21b2:	4425      	add	r5, r4
    21b4:	00ab      	lsls	r3, r5, #2
    21b6:	441e      	add	r6, r3
    21b8:	2300      	movs	r3, #0
    21ba:	f886 3087 	strb.w	r3, [r6, #135]	; 0x87
	for (i = 0; i < USB_D_N_EP; i++) {
    21be:	3401      	adds	r4, #1
    21c0:	b2e4      	uxtb	r4, r4
    21c2:	2c08      	cmp	r4, #8
    21c4:	d9e3      	bls.n	218e <_usb_d_dev_reset_epts+0x6>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    21c6:	2260      	movs	r2, #96	; 0x60
    21c8:	2100      	movs	r1, #0
    21ca:	4802      	ldr	r0, [pc, #8]	; (21d4 <_usb_d_dev_reset_epts+0x4c>)
    21cc:	4b03      	ldr	r3, [pc, #12]	; (21dc <_usb_d_dev_reset_epts+0x54>)
    21ce:	4798      	blx	r3
    21d0:	bd70      	pop	{r4, r5, r6, pc}
    21d2:	bf00      	nop
    21d4:	200000ec 	.word	0x200000ec
    21d8:	00001fd1 	.word	0x00001fd1
    21dc:	0000307f 	.word	0x0000307f

000021e0 <_usb_d_dev_in_next>:
{
    21e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21e4:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    21e6:	7c84      	ldrb	r4, [r0, #18]
    21e8:	f004 040f 	and.w	r4, r4, #15
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    21ec:	4b52      	ldr	r3, [pc, #328]	; (2338 <_usb_d_dev_in_next+0x158>)
    21ee:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    21f2:	460e      	mov	r6, r1
    21f4:	2900      	cmp	r1, #0
    21f6:	d04f      	beq.n	2298 <_usb_d_dev_in_next+0xb8>
    21f8:	6958      	ldr	r0, [r3, #20]
    21fa:	f3c0 000d 	ubfx	r0, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    21fe:	8a2b      	ldrh	r3, [r5, #16]
    2200:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2204:	4293      	cmp	r3, r2
    2206:	d049      	beq.n	229c <_usb_d_dev_in_next+0xbc>
    2208:	3b01      	subs	r3, #1
    220a:	b21b      	sxth	r3, r3
    220c:	4003      	ands	r3, r0
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    220e:	7cef      	ldrb	r7, [r5, #19]
    2210:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    2214:	b136      	cbz	r6, 2224 <_usb_d_dev_in_next+0x44>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2216:	f104 0208 	add.w	r2, r4, #8
    221a:	0152      	lsls	r2, r2, #5
    221c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2220:	2102      	movs	r1, #2
    2222:	71d1      	strb	r1, [r2, #7]
	ept->trans_count += trans_count;
    2224:	68a9      	ldr	r1, [r5, #8]
    2226:	4401      	add	r1, r0
    2228:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    222a:	686a      	ldr	r2, [r5, #4]
    222c:	4291      	cmp	r1, r2
    222e:	d245      	bcs.n	22bc <_usb_d_dev_in_next+0xdc>
		trans_next = ept->trans_size - ept->trans_count;
    2230:	b292      	uxth	r2, r2
    2232:	b28b      	uxth	r3, r1
    2234:	1ad2      	subs	r2, r2, r3
    2236:	b292      	uxth	r2, r2
		if (ept->flags.bits.use_cache) {
    2238:	7ceb      	ldrb	r3, [r5, #19]
    223a:	f013 0f20 	tst.w	r3, #32
    223e:	d02f      	beq.n	22a0 <_usb_d_dev_in_next+0xc0>
			if (trans_next > ept->size) {
    2240:	f8b5 8010 	ldrh.w	r8, [r5, #16]
    2244:	4542      	cmp	r2, r8
    2246:	d800      	bhi.n	224a <_usb_d_dev_in_next+0x6a>
		trans_next = ept->trans_size - ept->trans_count;
    2248:	4690      	mov	r8, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    224a:	682b      	ldr	r3, [r5, #0]
    224c:	4642      	mov	r2, r8
    224e:	4419      	add	r1, r3
    2250:	68e8      	ldr	r0, [r5, #12]
    2252:	4b3a      	ldr	r3, [pc, #232]	; (233c <_usb_d_dev_in_next+0x15c>)
    2254:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    2256:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    2258:	4b37      	ldr	r3, [pc, #220]	; (2338 <_usb_d_dev_in_next+0x158>)
    225a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    225e:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2260:	4b35      	ldr	r3, [pc, #212]	; (2338 <_usb_d_dev_in_next+0x158>)
    2262:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2266:	695a      	ldr	r2, [r3, #20]
    2268:	f368 020d 	bfi	r2, r8, #0, #14
    226c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    226e:	695a      	ldr	r2, [r3, #20]
    2270:	f36f 329b 	bfc	r2, #14, #14
    2274:	615a      	str	r2, [r3, #20]
	if (!isr) {
    2276:	b93e      	cbnz	r6, 2288 <_usb_d_dev_in_next+0xa8>
		if (is_ctrl) {
    2278:	2f01      	cmp	r7, #1
    227a:	d05b      	beq.n	2334 <_usb_d_dev_in_next+0x154>
			inten = USB_D_BANK1_INT_FLAGS;
    227c:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    227e:	0163      	lsls	r3, r4, #5
    2280:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2284:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2288:	3408      	adds	r4, #8
    228a:	0164      	lsls	r4, r4, #5
    228c:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2290:	2380      	movs	r3, #128	; 0x80
    2292:	7163      	strb	r3, [r4, #5]
    2294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2298:	2000      	movs	r0, #0
    229a:	e7b0      	b.n	21fe <_usb_d_dev_in_next+0x1e>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    229c:	b21b      	sxth	r3, r3
    229e:	e7b5      	b.n	220c <_usb_d_dev_in_next+0x2c>
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    22a0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    22a4:	d807      	bhi.n	22b6 <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    22a6:	4690      	mov	r8, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    22a8:	682b      	ldr	r3, [r5, #0]
    22aa:	4419      	add	r1, r3
	bank->ADDR.reg          = addr;
    22ac:	4b22      	ldr	r3, [pc, #136]	; (2338 <_usb_d_dev_in_next+0x158>)
    22ae:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    22b2:	6119      	str	r1, [r3, #16]
    22b4:	e7d4      	b.n	2260 <_usb_d_dev_in_next+0x80>
				trans_next = USB_D_DEV_TRANS_MAX;
    22b6:	f44f 5800 	mov.w	r8, #8192	; 0x2000
    22ba:	e7f5      	b.n	22a8 <_usb_d_dev_in_next+0xc8>
	} else if (ept->flags.bits.need_zlp) {
    22bc:	7cea      	ldrb	r2, [r5, #19]
    22be:	f012 0f10 	tst.w	r2, #16
    22c2:	d00f      	beq.n	22e4 <_usb_d_dev_in_next+0x104>
		ept->flags.bits.need_zlp = 0;
    22c4:	7ceb      	ldrb	r3, [r5, #19]
    22c6:	f36f 1304 	bfc	r3, #4, #1
    22ca:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    22cc:	4b1a      	ldr	r3, [pc, #104]	; (2338 <_usb_d_dev_in_next+0x158>)
    22ce:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    22d2:	695a      	ldr	r2, [r3, #20]
    22d4:	f36f 020d 	bfc	r2, #0, #14
    22d8:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    22da:	695a      	ldr	r2, [r3, #20]
    22dc:	f36f 329b 	bfc	r2, #14, #14
    22e0:	615a      	str	r2, [r3, #20]
    22e2:	e7c8      	b.n	2276 <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    22e4:	2f01      	cmp	r7, #1
    22e6:	d00e      	beq.n	2306 <_usb_d_dev_in_next+0x126>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    22e8:	0164      	lsls	r4, r4, #5
    22ea:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    22ee:	224a      	movs	r2, #74	; 0x4a
    22f0:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    22f4:	8a2a      	ldrh	r2, [r5, #16]
    22f6:	4293      	cmp	r3, r2
    22f8:	d00c      	beq.n	2314 <_usb_d_dev_in_next+0x134>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    22fa:	2100      	movs	r1, #0
    22fc:	4628      	mov	r0, r5
    22fe:	4b10      	ldr	r3, [pc, #64]	; (2340 <_usb_d_dev_in_next+0x160>)
    2300:	4798      	blx	r3
	return;
    2302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2306:	0164      	lsls	r4, r4, #5
    2308:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    230c:	224b      	movs	r2, #75	; 0x4b
    230e:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
    2312:	e7ef      	b.n	22f4 <_usb_d_dev_in_next+0x114>
		ept->flags.bits.is_busy = 0;
    2314:	7ceb      	ldrb	r3, [r5, #19]
    2316:	f36f 1386 	bfc	r3, #6, #1
    231a:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    231c:	4b06      	ldr	r3, [pc, #24]	; (2338 <_usb_d_dev_in_next+0x158>)
    231e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    2320:	68a9      	ldr	r1, [r5, #8]
    2322:	7ca8      	ldrb	r0, [r5, #18]
    2324:	4798      	blx	r3
    2326:	2800      	cmp	r0, #0
    2328:	d1b4      	bne.n	2294 <_usb_d_dev_in_next+0xb4>
		ept->flags.bits.is_busy = 1;
    232a:	7ceb      	ldrb	r3, [r5, #19]
    232c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2330:	74eb      	strb	r3, [r5, #19]
    2332:	e7e2      	b.n	22fa <_usb_d_dev_in_next+0x11a>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    2334:	224e      	movs	r2, #78	; 0x4e
    2336:	e7a2      	b.n	227e <_usb_d_dev_in_next+0x9e>
    2338:	200000ec 	.word	0x200000ec
    233c:	00003069 	.word	0x00003069
    2340:	00001fd1 	.word	0x00001fd1

00002344 <_usb_d_dev_out_next>:
{
    2344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2348:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    234a:	7c85      	ldrb	r5, [r0, #18]
    234c:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    2350:	460f      	mov	r7, r1
    2352:	2900      	cmp	r1, #0
    2354:	d050      	beq.n	23f8 <_usb_d_dev_out_next+0xb4>
    2356:	4b68      	ldr	r3, [pc, #416]	; (24f8 <_usb_d_dev_out_next+0x1b4>)
    2358:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    235c:	685b      	ldr	r3, [r3, #4]
    235e:	f3c3 3a8d 	ubfx	sl, r3, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    2362:	2f00      	cmp	r7, #0
    2364:	d04b      	beq.n	23fe <_usb_d_dev_out_next+0xba>
    2366:	4b64      	ldr	r3, [pc, #400]	; (24f8 <_usb_d_dev_out_next+0x1b4>)
    2368:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    236c:	685b      	ldr	r3, [r3, #4]
    236e:	f3c3 090d 	ubfx	r9, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2372:	8a26      	ldrh	r6, [r4, #16]
    2374:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2378:	429e      	cmp	r6, r3
    237a:	d001      	beq.n	2380 <_usb_d_dev_out_next+0x3c>
    237c:	3e01      	subs	r6, #1
    237e:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    2380:	ea09 0b06 	and.w	fp, r9, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2384:	f894 8013 	ldrb.w	r8, [r4, #19]
    2388:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    238c:	b137      	cbz	r7, 239c <_usb_d_dev_out_next+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    238e:	f105 0308 	add.w	r3, r5, #8
    2392:	015b      	lsls	r3, r3, #5
    2394:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2398:	2201      	movs	r2, #1
    239a:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    239c:	7ce3      	ldrb	r3, [r4, #19]
    239e:	f013 0f20 	tst.w	r3, #32
    23a2:	d00e      	beq.n	23c2 <_usb_d_dev_out_next+0x7e>
    23a4:	6862      	ldr	r2, [r4, #4]
    23a6:	b162      	cbz	r2, 23c2 <_usb_d_dev_out_next+0x7e>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    23a8:	b292      	uxth	r2, r2
    23aa:	68a0      	ldr	r0, [r4, #8]
    23ac:	b283      	uxth	r3, r0
    23ae:	1ad2      	subs	r2, r2, r3
    23b0:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    23b2:	6823      	ldr	r3, [r4, #0]
    23b4:	4418      	add	r0, r3
    23b6:	68e1      	ldr	r1, [r4, #12]
    23b8:	4593      	cmp	fp, r2
    23ba:	d200      	bcs.n	23be <_usb_d_dev_out_next+0x7a>
    23bc:	465a      	mov	r2, fp
    23be:	4b4f      	ldr	r3, [pc, #316]	; (24fc <_usb_d_dev_out_next+0x1b8>)
    23c0:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    23c2:	6863      	ldr	r3, [r4, #4]
    23c4:	b9f3      	cbnz	r3, 2404 <_usb_d_dev_out_next+0xc0>
    23c6:	7ce2      	ldrb	r2, [r4, #19]
    23c8:	f012 0f10 	tst.w	r2, #16
    23cc:	d01a      	beq.n	2404 <_usb_d_dev_out_next+0xc0>
		ept->flags.bits.need_zlp  = 0;
    23ce:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    23d0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    23d4:	f043 0320 	orr.w	r3, r3, #32
    23d8:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    23da:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    23dc:	4946      	ldr	r1, [pc, #280]	; (24f8 <_usb_d_dev_out_next+0x1b4>)
    23de:	016a      	lsls	r2, r5, #5
    23e0:	188b      	adds	r3, r1, r2
    23e2:	5088      	str	r0, [r1, r2]
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    23e4:	8a21      	ldrh	r1, [r4, #16]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    23e6:	685a      	ldr	r2, [r3, #4]
    23e8:	f361 329b 	bfi	r2, r1, #14, #14
    23ec:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    23ee:	685a      	ldr	r2, [r3, #4]
    23f0:	f36f 020d 	bfc	r2, #0, #14
    23f4:	605a      	str	r2, [r3, #4]
    23f6:	e044      	b.n	2482 <_usb_d_dev_out_next+0x13e>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    23f8:	f04f 0a00 	mov.w	sl, #0
    23fc:	e7b1      	b.n	2362 <_usb_d_dev_out_next+0x1e>
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    23fe:	f04f 0900 	mov.w	r9, #0
    2402:	e7b6      	b.n	2372 <_usb_d_dev_out_next+0x2e>
	} else if (isr && last_pkt < ept->size) {
    2404:	b1ef      	cbz	r7, 2442 <_usb_d_dev_out_next+0xfe>
    2406:	8a22      	ldrh	r2, [r4, #16]
    2408:	4593      	cmp	fp, r2
    240a:	d21a      	bcs.n	2442 <_usb_d_dev_out_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    240c:	7ce3      	ldrb	r3, [r4, #19]
    240e:	f36f 1304 	bfc	r3, #4, #1
    2412:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2414:	68a3      	ldr	r3, [r4, #8]
    2416:	444b      	add	r3, r9
    2418:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    241a:	f1b8 0f01 	cmp.w	r8, #1
    241e:	d05d      	beq.n	24dc <_usb_d_dev_out_next+0x198>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2420:	016b      	lsls	r3, r5, #5
    2422:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2426:	2225      	movs	r2, #37	; 0x25
    2428:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    242c:	b91d      	cbnz	r5, 2436 <_usb_d_dev_out_next+0xf2>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    242e:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    2430:	016d      	lsls	r5, r5, #5
    2432:	4b31      	ldr	r3, [pc, #196]	; (24f8 <_usb_d_dev_out_next+0x1b4>)
    2434:	515a      	str	r2, [r3, r5]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2436:	2100      	movs	r1, #0
    2438:	4620      	mov	r0, r4
    243a:	4b31      	ldr	r3, [pc, #196]	; (2500 <_usb_d_dev_out_next+0x1bc>)
    243c:	4798      	blx	r3
	return;
    243e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ept->trans_count += trans_size;
    2442:	68a2      	ldr	r2, [r4, #8]
    2444:	4452      	add	r2, sl
    2446:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    2448:	4293      	cmp	r3, r2
    244a:	d9e6      	bls.n	241a <_usb_d_dev_out_next+0xd6>
			trans_next = ept->trans_size - ept->trans_count;
    244c:	b29b      	uxth	r3, r3
    244e:	b291      	uxth	r1, r2
    2450:	1a5b      	subs	r3, r3, r1
    2452:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    2454:	7ce1      	ldrb	r1, [r4, #19]
    2456:	f011 0f20 	tst.w	r1, #32
    245a:	d024      	beq.n	24a6 <_usb_d_dev_out_next+0x162>
				if (trans_next > ept->size) {
    245c:	8a26      	ldrh	r6, [r4, #16]
    245e:	42b3      	cmp	r3, r6
    2460:	d800      	bhi.n	2464 <_usb_d_dev_out_next+0x120>
			trans_next = ept->trans_size - ept->trans_count;
    2462:	461e      	mov	r6, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2464:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    2466:	016b      	lsls	r3, r5, #5
    2468:	4a23      	ldr	r2, [pc, #140]	; (24f8 <_usb_d_dev_out_next+0x1b4>)
    246a:	50d1      	str	r1, [r2, r3]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    246c:	4b22      	ldr	r3, [pc, #136]	; (24f8 <_usb_d_dev_out_next+0x1b4>)
    246e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2472:	685a      	ldr	r2, [r3, #4]
    2474:	f366 329b 	bfi	r2, r6, #14, #14
    2478:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    247a:	685a      	ldr	r2, [r3, #4]
    247c:	f36f 020d 	bfc	r2, #0, #14
    2480:	605a      	str	r2, [r3, #4]
	if (!isr) {
    2482:	b947      	cbnz	r7, 2496 <_usb_d_dev_out_next+0x152>
		if (is_ctrl) {
    2484:	f1b8 0f01 	cmp.w	r8, #1
    2488:	d02f      	beq.n	24ea <_usb_d_dev_out_next+0x1a6>
			inten = USB_D_BANK0_INT_FLAGS;
    248a:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    248c:	016b      	lsls	r3, r5, #5
    248e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2492:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2496:	3508      	adds	r5, #8
    2498:	016d      	lsls	r5, r5, #5
    249a:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    249e:	2340      	movs	r3, #64	; 0x40
    24a0:	712b      	strb	r3, [r5, #4]
    24a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    24a6:	8a21      	ldrh	r1, [r4, #16]
    24a8:	428b      	cmp	r3, r1
    24aa:	d90a      	bls.n	24c2 <_usb_d_dev_out_next+0x17e>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    24ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    24b0:	d80f      	bhi.n	24d2 <_usb_d_dev_out_next+0x18e>
    24b2:	ea23 0606 	bic.w	r6, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    24b6:	6823      	ldr	r3, [r4, #0]
    24b8:	441a      	add	r2, r3
	bank->ADDR.reg          = addr;
    24ba:	016b      	lsls	r3, r5, #5
    24bc:	490e      	ldr	r1, [pc, #56]	; (24f8 <_usb_d_dev_out_next+0x1b4>)
    24be:	50ca      	str	r2, [r1, r3]
    24c0:	e7d4      	b.n	246c <_usb_d_dev_out_next+0x128>
				} else if (trans_next < ept->size) {
    24c2:	428b      	cmp	r3, r1
    24c4:	d208      	bcs.n	24d8 <_usb_d_dev_out_next+0x194>
					ept->flags.bits.use_cache = 1;
    24c6:	7ce1      	ldrb	r1, [r4, #19]
    24c8:	f041 0120 	orr.w	r1, r1, #32
    24cc:	74e1      	strb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
    24ce:	461e      	mov	r6, r3
    24d0:	e7f1      	b.n	24b6 <_usb_d_dev_out_next+0x172>
						trans_next = USB_D_DEV_TRANS_MAX;
    24d2:	f44f 5600 	mov.w	r6, #8192	; 0x2000
    24d6:	e7ee      	b.n	24b6 <_usb_d_dev_out_next+0x172>
			trans_next = ept->trans_size - ept->trans_count;
    24d8:	461e      	mov	r6, r3
    24da:	e7ec      	b.n	24b6 <_usb_d_dev_out_next+0x172>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    24dc:	016b      	lsls	r3, r5, #5
    24de:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    24e2:	222d      	movs	r2, #45	; 0x2d
    24e4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    24e8:	e7a0      	b.n	242c <_usb_d_dev_out_next+0xe8>
	bank->STATUS_BK.reg     = 0;
    24ea:	4b03      	ldr	r3, [pc, #12]	; (24f8 <_usb_d_dev_out_next+0x1b4>)
    24ec:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    24f0:	2200      	movs	r2, #0
    24f2:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    24f4:	222d      	movs	r2, #45	; 0x2d
    24f6:	e7c9      	b.n	248c <_usb_d_dev_out_next+0x148>
    24f8:	200000ec 	.word	0x200000ec
    24fc:	00003069 	.word	0x00003069
    2500:	00001fd1 	.word	0x00001fd1

00002504 <_usb_d_dev_handler>:
{
    2504:	b570      	push	{r4, r5, r6, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    2506:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    250a:	8c1d      	ldrh	r5, [r3, #32]
    250c:	b2ad      	uxth	r5, r5
	if (0 == epint) {
    250e:	b10d      	cbz	r5, 2514 <_usb_d_dev_handler+0x10>
	bool     rc    = true;
    2510:	2400      	movs	r4, #0
    2512:	e0da      	b.n	26ca <_usb_d_dev_handler+0x1c6>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    2514:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    2516:	8b1b      	ldrh	r3, [r3, #24]
    2518:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    251a:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    251c:	f013 0f04 	tst.w	r3, #4
    2520:	d110      	bne.n	2544 <_usb_d_dev_handler+0x40>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    2522:	f413 7f00 	tst.w	r3, #512	; 0x200
    2526:	d118      	bne.n	255a <_usb_d_dev_handler+0x56>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    2528:	f013 0f80 	tst.w	r3, #128	; 0x80
    252c:	d13c      	bne.n	25a8 <_usb_d_dev_handler+0xa4>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    252e:	f013 0f70 	tst.w	r3, #112	; 0x70
    2532:	d144      	bne.n	25be <_usb_d_dev_handler+0xba>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    2534:	f013 0f08 	tst.w	r3, #8
    2538:	d163      	bne.n	2602 <_usb_d_dev_handler+0xfe>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    253a:	f013 0f01 	tst.w	r3, #1
    253e:	d175      	bne.n	262c <_usb_d_dev_handler+0x128>
		rc = false;
    2540:	2300      	movs	r3, #0
    2542:	e007      	b.n	2554 <_usb_d_dev_handler+0x50>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    2544:	2204      	movs	r2, #4
    2546:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    254a:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    254c:	4b87      	ldr	r3, [pc, #540]	; (276c <_usb_d_dev_handler+0x268>)
    254e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    2550:	4798      	blx	r3
		return true;
    2552:	2301      	movs	r3, #1
		if (_usb_d_dev_handle_nep()) {
    2554:	2b00      	cmp	r3, #0
    2556:	d0db      	beq.n	2510 <_usb_d_dev_handler+0xc>
    2558:	bd70      	pop	{r4, r5, r6, pc}
    255a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    255e:	f240 2201 	movw	r2, #513	; 0x201
    2562:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2564:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2566:	2270      	movs	r2, #112	; 0x70
    2568:	831a      	strh	r2, [r3, #24]
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    256a:	2300      	movs	r3, #0
    256c:	2b01      	cmp	r3, #1
    256e:	d814      	bhi.n	259a <_usb_d_dev_handler+0x96>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    2570:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    2572:	4a7e      	ldr	r2, [pc, #504]	; (276c <_usb_d_dev_handler+0x268>)
    2574:	eb02 1243 	add.w	r2, r2, r3, lsl #5
    2578:	8912      	ldrh	r2, [r2, #8]
    257a:	f002 020f 	and.w	r2, r2, #15
    257e:	2a03      	cmp	r2, #3
    2580:	d002      	beq.n	2588 <_usb_d_dev_handler+0x84>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    2582:	3301      	adds	r3, #1
    2584:	b2db      	uxtb	r3, r3
    2586:	e7f1      	b.n	256c <_usb_d_dev_handler+0x68>
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    2588:	4b78      	ldr	r3, [pc, #480]	; (276c <_usb_d_dev_handler+0x268>)
    258a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    258e:	8919      	ldrh	r1, [r3, #8]
    2590:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    2594:	2200      	movs	r2, #0
    2596:	811a      	strh	r2, [r3, #8]
    2598:	e000      	b.n	259c <_usb_d_dev_handler+0x98>
	uint32_t lpm_variable = 0;
    259a:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    259c:	4b73      	ldr	r3, [pc, #460]	; (276c <_usb_d_dev_handler+0x268>)
    259e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    25a0:	2003      	movs	r0, #3
    25a2:	4798      	blx	r3
	bool     rc    = true;
    25a4:	2301      	movs	r3, #1
    25a6:	e7d5      	b.n	2554 <_usb_d_dev_handler+0x50>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    25a8:	2280      	movs	r2, #128	; 0x80
    25aa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    25ae:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    25b0:	4b6e      	ldr	r3, [pc, #440]	; (276c <_usb_d_dev_handler+0x268>)
    25b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    25b4:	2100      	movs	r1, #0
    25b6:	2005      	movs	r0, #5
    25b8:	4798      	blx	r3
	bool     rc    = true;
    25ba:	2301      	movs	r3, #1
    25bc:	e7ca      	b.n	2554 <_usb_d_dev_handler+0x50>
    25be:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    25c2:	2270      	movs	r2, #112	; 0x70
    25c4:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    25c6:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    25c8:	f240 2201 	movw	r2, #513	; 0x201
    25cc:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    25ce:	4b68      	ldr	r3, [pc, #416]	; (2770 <_usb_d_dev_handler+0x26c>)
    25d0:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    25d4:	f013 0f01 	tst.w	r3, #1
    25d8:	d00d      	beq.n	25f6 <_usb_d_dev_handler+0xf2>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    25da:	4b65      	ldr	r3, [pc, #404]	; (2770 <_usb_d_dev_handler+0x26c>)
    25dc:	691b      	ldr	r3, [r3, #16]
	tmp &= mask;
    25de:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    25e2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    25e6:	d1f8      	bne.n	25da <_usb_d_dev_handler+0xd6>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    25e8:	4b60      	ldr	r3, [pc, #384]	; (276c <_usb_d_dev_handler+0x268>)
    25ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    25ec:	2100      	movs	r1, #0
    25ee:	2002      	movs	r0, #2
    25f0:	4798      	blx	r3
	bool     rc    = true;
    25f2:	2301      	movs	r3, #1
    25f4:	e7ae      	b.n	2554 <_usb_d_dev_handler+0x50>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    25f6:	4b5e      	ldr	r3, [pc, #376]	; (2770 <_usb_d_dev_handler+0x26c>)
    25f8:	691b      	ldr	r3, [r3, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    25fa:	f413 7f80 	tst.w	r3, #256	; 0x100
    25fe:	d0fa      	beq.n	25f6 <_usb_d_dev_handler+0xf2>
    2600:	e7f2      	b.n	25e8 <_usb_d_dev_handler+0xe4>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2602:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2606:	2400      	movs	r4, #0
    2608:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    260c:	2208      	movs	r2, #8
    260e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2610:	2270      	movs	r2, #112	; 0x70
    2612:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2614:	f240 2201 	movw	r2, #513	; 0x201
    2618:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    261a:	4b56      	ldr	r3, [pc, #344]	; (2774 <_usb_d_dev_handler+0x270>)
    261c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    261e:	4b53      	ldr	r3, [pc, #332]	; (276c <_usb_d_dev_handler+0x268>)
    2620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2622:	4621      	mov	r1, r4
    2624:	2001      	movs	r0, #1
    2626:	4798      	blx	r3
	bool     rc    = true;
    2628:	2301      	movs	r3, #1
    262a:	e793      	b.n	2554 <_usb_d_dev_handler+0x50>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    262c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2630:	f240 2201 	movw	r2, #513	; 0x201
    2634:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    2636:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    2638:	2270      	movs	r2, #112	; 0x70
    263a:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    263c:	4b4b      	ldr	r3, [pc, #300]	; (276c <_usb_d_dev_handler+0x268>)
    263e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2640:	2100      	movs	r1, #0
    2642:	2004      	movs	r0, #4
    2644:	4798      	blx	r3
	bool     rc    = true;
    2646:	2301      	movs	r3, #1
    2648:	e784      	b.n	2554 <_usb_d_dev_handler+0x50>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    264a:	f013 0f10 	tst.w	r3, #16
    264e:	d109      	bne.n	2664 <_usb_d_dev_handler+0x160>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2650:	f013 0f40 	tst.w	r3, #64	; 0x40
    2654:	d109      	bne.n	266a <_usb_d_dev_handler+0x166>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2656:	f013 0f20 	tst.w	r3, #32
    265a:	d034      	beq.n	26c6 <_usb_d_dev_handler+0x1c2>
		_usb_d_dev_handle_stall(ept, 0);
    265c:	2100      	movs	r1, #0
    265e:	4b46      	ldr	r3, [pc, #280]	; (2778 <_usb_d_dev_handler+0x274>)
    2660:	4798      	blx	r3
    2662:	e030      	b.n	26c6 <_usb_d_dev_handler+0x1c2>
		_usb_d_dev_handle_setup(ept);
    2664:	4b45      	ldr	r3, [pc, #276]	; (277c <_usb_d_dev_handler+0x278>)
    2666:	4798      	blx	r3
    2668:	e02d      	b.n	26c6 <_usb_d_dev_handler+0x1c2>
		_usb_d_dev_handle_stall(ept, 1);
    266a:	2101      	movs	r1, #1
    266c:	4b42      	ldr	r3, [pc, #264]	; (2778 <_usb_d_dev_handler+0x274>)
    266e:	4798      	blx	r3
    2670:	e029      	b.n	26c6 <_usb_d_dev_handler+0x1c2>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    2672:	f013 0f40 	tst.w	r3, #64	; 0x40
    2676:	d113      	bne.n	26a0 <_usb_d_dev_handler+0x19c>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2678:	f013 0f08 	tst.w	r3, #8
    267c:	d114      	bne.n	26a8 <_usb_d_dev_handler+0x1a4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    267e:	f013 0f02 	tst.w	r3, #2
    2682:	d115      	bne.n	26b0 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2684:	7cc2      	ldrb	r2, [r0, #19]
    2686:	f002 0207 	and.w	r2, r2, #7
    268a:	2a01      	cmp	r2, #1
    268c:	d11b      	bne.n	26c6 <_usb_d_dev_handler+0x1c2>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    268e:	f013 0f04 	tst.w	r3, #4
    2692:	d111      	bne.n	26b8 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2694:	f013 0f10 	tst.w	r3, #16
    2698:	d015      	beq.n	26c6 <_usb_d_dev_handler+0x1c2>
			_usb_d_dev_handle_setup(ept);
    269a:	4b38      	ldr	r3, [pc, #224]	; (277c <_usb_d_dev_handler+0x278>)
    269c:	4798      	blx	r3
    269e:	e012      	b.n	26c6 <_usb_d_dev_handler+0x1c2>
		_usb_d_dev_handle_stall(ept, 1);
    26a0:	2101      	movs	r1, #1
    26a2:	4b35      	ldr	r3, [pc, #212]	; (2778 <_usb_d_dev_handler+0x274>)
    26a4:	4798      	blx	r3
    26a6:	e00e      	b.n	26c6 <_usb_d_dev_handler+0x1c2>
		_usb_d_dev_handle_trfail(ept, 1);
    26a8:	2101      	movs	r1, #1
    26aa:	4b35      	ldr	r3, [pc, #212]	; (2780 <_usb_d_dev_handler+0x27c>)
    26ac:	4798      	blx	r3
    26ae:	e00a      	b.n	26c6 <_usb_d_dev_handler+0x1c2>
		_usb_d_dev_in_next(ept, true);
    26b0:	2101      	movs	r1, #1
    26b2:	4b34      	ldr	r3, [pc, #208]	; (2784 <_usb_d_dev_handler+0x280>)
    26b4:	4798      	blx	r3
    26b6:	e006      	b.n	26c6 <_usb_d_dev_handler+0x1c2>
			_usb_d_dev_handle_trfail(ept, 0);
    26b8:	2100      	movs	r1, #0
    26ba:	4b31      	ldr	r3, [pc, #196]	; (2780 <_usb_d_dev_handler+0x27c>)
    26bc:	4798      	blx	r3
    26be:	e002      	b.n	26c6 <_usb_d_dev_handler+0x1c2>
		_usb_d_dev_handle_stall(ept, 0);
    26c0:	2100      	movs	r1, #0
    26c2:	4b2d      	ldr	r3, [pc, #180]	; (2778 <_usb_d_dev_handler+0x274>)
    26c4:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
    26c6:	3401      	adds	r4, #1
    26c8:	b2e4      	uxtb	r4, r4
    26ca:	2c08      	cmp	r4, #8
    26cc:	f63f af44 	bhi.w	2558 <_usb_d_dev_handler+0x54>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    26d0:	4a26      	ldr	r2, [pc, #152]	; (276c <_usb_d_dev_handler+0x268>)
    26d2:	f102 0060 	add.w	r0, r2, #96	; 0x60
    26d6:	00a3      	lsls	r3, r4, #2
    26d8:	191e      	adds	r6, r3, r4
    26da:	00b1      	lsls	r1, r6, #2
    26dc:	460e      	mov	r6, r1
    26de:	3110      	adds	r1, #16
    26e0:	4401      	add	r1, r0
    26e2:	1d08      	adds	r0, r1, #4
		if (ept->ep == 0xFF) {
    26e4:	4432      	add	r2, r6
    26e6:	f892 3086 	ldrb.w	r3, [r2, #134]	; 0x86
    26ea:	2bff      	cmp	r3, #255	; 0xff
    26ec:	d0eb      	beq.n	26c6 <_usb_d_dev_handler+0x1c2>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    26ee:	7c83      	ldrb	r3, [r0, #18]
    26f0:	f003 030f 	and.w	r3, r3, #15
	if (!(epint & (1u << epn))) {
    26f4:	2201      	movs	r2, #1
    26f6:	409a      	lsls	r2, r3
    26f8:	4215      	tst	r5, r2
    26fa:	d0e4      	beq.n	26c6 <_usb_d_dev_handler+0x1c2>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    26fc:	f103 0208 	add.w	r2, r3, #8
    2700:	0152      	lsls	r2, r2, #5
    2702:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2706:	79d2      	ldrb	r2, [r2, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    2708:	015b      	lsls	r3, r3, #5
    270a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    270e:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    2712:	4013      	ands	r3, r2
    2714:	d0d7      	beq.n	26c6 <_usb_d_dev_handler+0x1c2>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    2716:	7cc2      	ldrb	r2, [r0, #19]
    2718:	f002 0147 	and.w	r1, r2, #71	; 0x47
    271c:	2901      	cmp	r1, #1
    271e:	d094      	beq.n	264a <_usb_d_dev_handler+0x146>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    2720:	f012 0f80 	tst.w	r2, #128	; 0x80
    2724:	d1a5      	bne.n	2672 <_usb_d_dev_handler+0x16e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    2726:	f013 0f20 	tst.w	r3, #32
    272a:	d1c9      	bne.n	26c0 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    272c:	f013 0f04 	tst.w	r3, #4
    2730:	d110      	bne.n	2754 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2732:	f013 0f01 	tst.w	r3, #1
    2736:	d111      	bne.n	275c <_usb_d_dev_handler+0x258>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    2738:	7cc2      	ldrb	r2, [r0, #19]
    273a:	f002 0207 	and.w	r2, r2, #7
    273e:	2a01      	cmp	r2, #1
    2740:	d1c1      	bne.n	26c6 <_usb_d_dev_handler+0x1c2>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2742:	f013 0f08 	tst.w	r3, #8
    2746:	d10d      	bne.n	2764 <_usb_d_dev_handler+0x260>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2748:	f013 0f10 	tst.w	r3, #16
    274c:	d0bb      	beq.n	26c6 <_usb_d_dev_handler+0x1c2>
			_usb_d_dev_handle_setup(ept);
    274e:	4b0b      	ldr	r3, [pc, #44]	; (277c <_usb_d_dev_handler+0x278>)
    2750:	4798      	blx	r3
    2752:	e7b8      	b.n	26c6 <_usb_d_dev_handler+0x1c2>
		_usb_d_dev_handle_trfail(ept, 0);
    2754:	2100      	movs	r1, #0
    2756:	4b0a      	ldr	r3, [pc, #40]	; (2780 <_usb_d_dev_handler+0x27c>)
    2758:	4798      	blx	r3
    275a:	e7b4      	b.n	26c6 <_usb_d_dev_handler+0x1c2>
		_usb_d_dev_out_next(ept, true);
    275c:	2101      	movs	r1, #1
    275e:	4b0a      	ldr	r3, [pc, #40]	; (2788 <_usb_d_dev_handler+0x284>)
    2760:	4798      	blx	r3
    2762:	e7b0      	b.n	26c6 <_usb_d_dev_handler+0x1c2>
			_usb_d_dev_handle_trfail(ept, 1);
    2764:	2101      	movs	r1, #1
    2766:	4b06      	ldr	r3, [pc, #24]	; (2780 <_usb_d_dev_handler+0x27c>)
    2768:	4798      	blx	r3
    276a:	e7ac      	b.n	26c6 <_usb_d_dev_handler+0x1c2>
    276c:	200000ec 	.word	0x200000ec
    2770:	40001000 	.word	0x40001000
    2774:	00002189 	.word	0x00002189
    2778:	00001fa5 	.word	0x00001fa5
    277c:	00001f25 	.word	0x00001f25
    2780:	00002071 	.word	0x00002071
    2784:	000021e1 	.word	0x000021e1
    2788:	00002345 	.word	0x00002345

0000278c <_usb_d_dev_init>:
{
    278c:	b500      	push	{lr}
    278e:	b083      	sub	sp, #12
	const uint8_t spdconf[4] = {
    2790:	2300      	movs	r3, #0
    2792:	f88d 3005 	strb.w	r3, [sp, #5]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    2796:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    279a:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    279c:	f013 0f01 	tst.w	r3, #1
    27a0:	d127      	bne.n	27f2 <_usb_d_dev_init+0x66>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    27a2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    27a6:	789b      	ldrb	r3, [r3, #2]
    27a8:	f013 0f03 	tst.w	r3, #3
    27ac:	d1f9      	bne.n	27a2 <_usb_d_dev_init+0x16>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    27ae:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    27b2:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    27b4:	f013 0f02 	tst.w	r3, #2
    27b8:	d011      	beq.n	27de <_usb_d_dev_init+0x52>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    27ba:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    27be:	7813      	ldrb	r3, [r2, #0]
    27c0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    27c4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    27c6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    27ca:	789b      	ldrb	r3, [r3, #2]
    27cc:	f013 0f03 	tst.w	r3, #3
    27d0:	d1f9      	bne.n	27c6 <_usb_d_dev_init+0x3a>
    27d2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    27d6:	789b      	ldrb	r3, [r3, #2]
    27d8:	f013 0f02 	tst.w	r3, #2
    27dc:	d1f9      	bne.n	27d2 <_usb_d_dev_init+0x46>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    27de:	2201      	movs	r2, #1
    27e0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    27e4:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    27e6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    27ea:	789b      	ldrb	r3, [r3, #2]
    27ec:	f013 0f03 	tst.w	r3, #3
    27f0:	d1f9      	bne.n	27e6 <_usb_d_dev_init+0x5a>
    27f2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    27f6:	789b      	ldrb	r3, [r3, #2]
    27f8:	f013 0f01 	tst.w	r3, #1
    27fc:	d1f9      	bne.n	27f2 <_usb_d_dev_init+0x66>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    27fe:	4b11      	ldr	r3, [pc, #68]	; (2844 <_usb_d_dev_init+0xb8>)
    2800:	4a11      	ldr	r2, [pc, #68]	; (2848 <_usb_d_dev_init+0xbc>)
    2802:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    2804:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    2806:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    2808:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    280a:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    280c:	4b0f      	ldr	r3, [pc, #60]	; (284c <_usb_d_dev_init+0xc0>)
    280e:	4798      	blx	r3
	_usb_load_calib();
    2810:	4b0f      	ldr	r3, [pc, #60]	; (2850 <_usb_d_dev_init+0xc4>)
    2812:	4798      	blx	r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2814:	2204      	movs	r2, #4
    2816:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    281a:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    281c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2820:	789b      	ldrb	r3, [r3, #2]
    2822:	f013 0f03 	tst.w	r3, #3
    2826:	d1f9      	bne.n	281c <_usb_d_dev_init+0x90>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    2828:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    282c:	4b05      	ldr	r3, [pc, #20]	; (2844 <_usb_d_dev_init+0xb8>)
    282e:	6253      	str	r3, [r2, #36]	; 0x24
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    2830:	f89d 3005 	ldrb.w	r3, [sp, #5]
    2834:	f043 0301 	orr.w	r3, r3, #1
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    2838:	8113      	strh	r3, [r2, #8]
}
    283a:	2000      	movs	r0, #0
    283c:	b003      	add	sp, #12
    283e:	f85d fb04 	ldr.w	pc, [sp], #4
    2842:	bf00      	nop
    2844:	200000ec 	.word	0x200000ec
    2848:	00001ec9 	.word	0x00001ec9
    284c:	00002189 	.word	0x00002189
    2850:	00001ecd 	.word	0x00001ecd

00002854 <_usb_d_dev_ep_stall>:
{
    2854:	b470      	push	{r4, r5, r6}
    2856:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2858:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    285a:	f010 000f 	ands.w	r0, r0, #15
    285e:	d005      	beq.n	286c <_usb_d_dev_ep_stall+0x18>
    2860:	2b00      	cmp	r3, #0
    2862:	db01      	blt.n	2868 <_usb_d_dev_ep_stall+0x14>
    2864:	4603      	mov	r3, r0
    2866:	e002      	b.n	286e <_usb_d_dev_ep_stall+0x1a>
    2868:	1c83      	adds	r3, r0, #2
    286a:	e000      	b.n	286e <_usb_d_dev_ep_stall+0x1a>
    286c:	4603      	mov	r3, r0
	return &dev_inst.ep[ep_index];
    286e:	461e      	mov	r6, r3
    2870:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2874:	009a      	lsls	r2, r3, #2
    2876:	3210      	adds	r2, #16
    2878:	4d46      	ldr	r5, [pc, #280]	; (2994 <_usb_d_dev_ep_stall+0x140>)
    287a:	442a      	add	r2, r5
    287c:	3204      	adds	r2, #4
	if (epn > CONF_USB_D_MAX_EP_N) {
    287e:	2802      	cmp	r0, #2
    2880:	f200 8084 	bhi.w	298c <_usb_d_dev_ep_stall+0x138>
	if (USB_EP_STALL_SET == ctrl) {
    2884:	2901      	cmp	r1, #1
    2886:	d018      	beq.n	28ba <_usb_d_dev_ep_stall+0x66>
	} else if (USB_EP_STALL_CLR == ctrl) {
    2888:	2900      	cmp	r1, #0
    288a:	d03d      	beq.n	2908 <_usb_d_dev_ep_stall+0xb4>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    288c:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    2890:	009a      	lsls	r2, r3, #2
    2892:	4b41      	ldr	r3, [pc, #260]	; (2998 <_usb_d_dev_ep_stall+0x144>)
    2894:	4413      	add	r3, r2
    2896:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
    289a:	f003 030f 	and.w	r3, r3, #15
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    289e:	3308      	adds	r3, #8
    28a0:	015b      	lsls	r3, r3, #5
    28a2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    28a6:	799a      	ldrb	r2, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    28a8:	2310      	movs	r3, #16
    28aa:	fa03 f404 	lsl.w	r4, r3, r4
    28ae:	4222      	tst	r2, r4
    28b0:	bf14      	ite	ne
    28b2:	2001      	movne	r0, #1
    28b4:	2000      	moveq	r0, #0
}
    28b6:	bc70      	pop	{r4, r5, r6}
    28b8:	4770      	bx	lr
	uint8_t epn = USB_EP_GET_N(ept->ep);
    28ba:	f1a5 0160 	sub.w	r1, r5, #96	; 0x60
    28be:	00b3      	lsls	r3, r6, #2
    28c0:	1998      	adds	r0, r3, r6
    28c2:	0082      	lsls	r2, r0, #2
    28c4:	440a      	add	r2, r1
    28c6:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    28ca:	f002 020f 	and.w	r2, r2, #15
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    28ce:	2510      	movs	r5, #16
    28d0:	40a5      	lsls	r5, r4
    28d2:	b2ed      	uxtb	r5, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    28d4:	f102 0008 	add.w	r0, r2, #8
    28d8:	0140      	lsls	r0, r0, #5
    28da:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    28de:	7145      	strb	r5, [r0, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    28e0:	2020      	movs	r0, #32
    28e2:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    28e6:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    28e8:	0152      	lsls	r2, r2, #5
    28ea:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    28ee:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    28f2:	441e      	add	r6, r3
    28f4:	00b3      	lsls	r3, r6, #2
    28f6:	440b      	add	r3, r1
    28f8:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    28fc:	f042 0208 	orr.w	r2, r2, #8
    2900:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    2904:	2000      	movs	r0, #0
    2906:	e7d6      	b.n	28b6 <_usb_d_dev_ep_stall+0x62>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    2908:	7c93      	ldrb	r3, [r2, #18]
    290a:	f003 030f 	and.w	r3, r3, #15
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    290e:	f103 0108 	add.w	r1, r3, #8
    2912:	0149      	lsls	r1, r1, #5
    2914:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2918:	7988      	ldrb	r0, [r1, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    291a:	2110      	movs	r1, #16
    291c:	40a1      	lsls	r1, r4
	if (!is_stalled) {
    291e:	4208      	tst	r0, r1
    2920:	d025      	beq.n	296e <_usb_d_dev_ep_stall+0x11a>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2922:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2924:	f103 0008 	add.w	r0, r3, #8
    2928:	0140      	lsls	r0, r0, #5
    292a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    292e:	7101      	strb	r1, [r0, #4]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2930:	2120      	movs	r1, #32
    2932:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2934:	b2ce      	uxtb	r6, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2936:	015d      	lsls	r5, r3, #5
    2938:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    293c:	f885 6108 	strb.w	r6, [r5, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2940:	79c0      	ldrb	r0, [r0, #7]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    2942:	4208      	tst	r0, r1
    2944:	d00a      	beq.n	295c <_usb_d_dev_ep_stall+0x108>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2946:	f103 0108 	add.w	r1, r3, #8
    294a:	0149      	lsls	r1, r1, #5
    294c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2950:	71ce      	strb	r6, [r1, #7]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    2952:	2001      	movs	r0, #1
    2954:	fa00 f404 	lsl.w	r4, r0, r4
    2958:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    295a:	710c      	strb	r4, [r1, #4]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    295c:	7cd1      	ldrb	r1, [r2, #19]
    295e:	f001 0107 	and.w	r1, r1, #7
    2962:	2901      	cmp	r1, #1
    2964:	d005      	beq.n	2972 <_usb_d_dev_ep_stall+0x11e>
		ept->flags.bits.is_stalled = 0;
    2966:	7cd3      	ldrb	r3, [r2, #19]
    2968:	f36f 03c3 	bfc	r3, #3, #1
    296c:	74d3      	strb	r3, [r2, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    296e:	2000      	movs	r0, #0
    2970:	e7a1      	b.n	28b6 <_usb_d_dev_ep_stall+0x62>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2972:	3308      	adds	r3, #8
    2974:	015b      	lsls	r3, r3, #5
    2976:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    297a:	799b      	ldrb	r3, [r3, #6]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    297c:	f013 0f30 	tst.w	r3, #48	; 0x30
    2980:	d1f5      	bne.n	296e <_usb_d_dev_ep_stall+0x11a>
			ept->flags.bits.is_stalled = 0;
    2982:	7cd3      	ldrb	r3, [r2, #19]
    2984:	f36f 03c3 	bfc	r3, #3, #1
    2988:	74d3      	strb	r3, [r2, #19]
    298a:	e7f0      	b.n	296e <_usb_d_dev_ep_stall+0x11a>
		return -USB_ERR_PARAM;
    298c:	f06f 0011 	mvn.w	r0, #17
    2990:	e791      	b.n	28b6 <_usb_d_dev_ep_stall+0x62>
    2992:	bf00      	nop
    2994:	2000014c 	.word	0x2000014c
    2998:	200000ec 	.word	0x200000ec

0000299c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    299c:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    299e:	f000 000f 	and.w	r0, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    29a2:	4a1a      	ldr	r2, [pc, #104]	; (2a0c <_usb_d_dev_ep_read_req+0x70>)
    29a4:	0143      	lsls	r3, r0, #5
    29a6:	18d4      	adds	r4, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    29a8:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    29aa:	6862      	ldr	r2, [r4, #4]
    29ac:	f3c2 020d 	ubfx	r2, r2, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    29b0:	2802      	cmp	r0, #2
    29b2:	d822      	bhi.n	29fa <_usb_d_dev_ep_read_req+0x5e>
    29b4:	b321      	cbz	r1, 2a00 <_usb_d_dev_ep_read_req+0x64>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    29b6:	f100 0308 	add.w	r3, r0, #8
    29ba:	015b      	lsls	r3, r3, #5
    29bc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    29c0:	781b      	ldrb	r3, [r3, #0]
    29c2:	b2db      	uxtb	r3, r3
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    29c4:	2b11      	cmp	r3, #17
    29c6:	d11e      	bne.n	2a06 <_usb_d_dev_ep_read_req+0x6a>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    29c8:	f100 0308 	add.w	r3, r0, #8
    29cc:	015b      	lsls	r3, r3, #5
    29ce:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    29d2:	79db      	ldrb	r3, [r3, #7]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    29d4:	f013 0f10 	tst.w	r3, #16
    29d8:	d102      	bne.n	29e0 <_usb_d_dev_ep_read_req+0x44>
		return ERR_NONE;
    29da:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    29dc:	bc30      	pop	{r4, r5}
    29de:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    29e0:	682c      	ldr	r4, [r5, #0]
    29e2:	686b      	ldr	r3, [r5, #4]
    29e4:	600c      	str	r4, [r1, #0]
    29e6:	604b      	str	r3, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    29e8:	f100 0308 	add.w	r3, r0, #8
    29ec:	015b      	lsls	r3, r3, #5
    29ee:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    29f2:	2110      	movs	r1, #16
    29f4:	71d9      	strb	r1, [r3, #7]
	return bytes;
    29f6:	4610      	mov	r0, r2
    29f8:	e7f0      	b.n	29dc <_usb_d_dev_ep_read_req+0x40>
		return -USB_ERR_PARAM;
    29fa:	f06f 0011 	mvn.w	r0, #17
    29fe:	e7ed      	b.n	29dc <_usb_d_dev_ep_read_req+0x40>
    2a00:	f06f 0011 	mvn.w	r0, #17
    2a04:	e7ea      	b.n	29dc <_usb_d_dev_ep_read_req+0x40>
		return -USB_ERR_FUNC;
    2a06:	f06f 0012 	mvn.w	r0, #18
    2a0a:	e7e7      	b.n	29dc <_usb_d_dev_ep_read_req+0x40>
    2a0c:	200000ec 	.word	0x200000ec

00002a10 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    2a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a14:	b085      	sub	sp, #20
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    2a16:	7a03      	ldrb	r3, [r0, #8]
    2a18:	fa4f f883 	sxtb.w	r8, r3
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    2a1c:	ea4f 79d8 	mov.w	r9, r8, lsr #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2a20:	f013 030f 	ands.w	r3, r3, #15
    2a24:	d006      	beq.n	2a34 <_usb_d_dev_ep_trans+0x24>
    2a26:	f1b8 0f00 	cmp.w	r8, #0
    2a2a:	db01      	blt.n	2a30 <_usb_d_dev_ep_trans+0x20>
    2a2c:	461d      	mov	r5, r3
    2a2e:	e002      	b.n	2a36 <_usb_d_dev_ep_trans+0x26>
    2a30:	1c9d      	adds	r5, r3, #2
    2a32:	e000      	b.n	2a36 <_usb_d_dev_ep_trans+0x26>
    2a34:	461d      	mov	r5, r3
	return &dev_inst.ep[ep_index];
    2a36:	462c      	mov	r4, r5
    2a38:	495c      	ldr	r1, [pc, #368]	; (2bac <_usb_d_dev_ep_trans+0x19c>)
    2a3a:	f101 0660 	add.w	r6, r1, #96	; 0x60
    2a3e:	00aa      	lsls	r2, r5, #2
    2a40:	1957      	adds	r7, r2, r5
    2a42:	ea4f 0e87 	mov.w	lr, r7, lsl #2
    2a46:	f10e 0e10 	add.w	lr, lr, #16
    2a4a:	44b6      	add	lr, r6
    2a4c:	f10e 0604 	add.w	r6, lr, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2a50:	00bd      	lsls	r5, r7, #2
    2a52:	4429      	add	r1, r5
    2a54:	f8b1 2084 	ldrh.w	r2, [r1, #132]	; 0x84
    2a58:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2a5c:	428a      	cmp	r2, r1
    2a5e:	d03d      	beq.n	2adc <_usb_d_dev_ep_trans+0xcc>
    2a60:	1e55      	subs	r5, r2, #1
    2a62:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    2a64:	6841      	ldr	r1, [r0, #4]
    2a66:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    2a68:	2b02      	cmp	r3, #2
    2a6a:	f200 8095 	bhi.w	2b98 <_usb_d_dev_ep_trans+0x188>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    2a6e:	6803      	ldr	r3, [r0, #0]
    2a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2a74:	d30c      	bcc.n	2a90 <_usb_d_dev_ep_trans+0x80>
    2a76:	eb01 0e03 	add.w	lr, r1, r3
    2a7a:	4f4d      	ldr	r7, [pc, #308]	; (2bb0 <_usb_d_dev_ep_trans+0x1a0>)
    2a7c:	45be      	cmp	lr, r7
    2a7e:	d807      	bhi.n	2a90 <_usb_d_dev_ep_trans+0x80>
    2a80:	f013 0f03 	tst.w	r3, #3
    2a84:	d104      	bne.n	2a90 <_usb_d_dev_ep_trans+0x80>
	    || (!dir && (trans->size < ept->size))) {
    2a86:	f1b8 0f00 	cmp.w	r8, #0
    2a8a:	db29      	blt.n	2ae0 <_usb_d_dev_ep_trans+0xd0>
    2a8c:	4291      	cmp	r1, r2
    2a8e:	d22a      	bcs.n	2ae6 <_usb_d_dev_ep_trans+0xd6>
		if (!ept->cache) {
    2a90:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2a94:	009a      	lsls	r2, r3, #2
    2a96:	4b45      	ldr	r3, [pc, #276]	; (2bac <_usb_d_dev_ep_trans+0x19c>)
    2a98:	4413      	add	r3, r2
    2a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2a9e:	2b00      	cmp	r3, #0
    2aa0:	d07d      	beq.n	2b9e <_usb_d_dev_ep_trans+0x18e>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    2aa2:	f04f 0a01 	mov.w	sl, #1
	}
	if (!dir && size_n_aligned) {
    2aa6:	f1b8 0f00 	cmp.w	r8, #0
    2aaa:	db09      	blt.n	2ac0 <_usb_d_dev_ep_trans+0xb0>
    2aac:	b145      	cbz	r5, 2ac0 <_usb_d_dev_ep_trans+0xb0>
		if (!ept->cache) {
    2aae:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2ab2:	009a      	lsls	r2, r3, #2
    2ab4:	4b3d      	ldr	r3, [pc, #244]	; (2bac <_usb_d_dev_ep_trans+0x19c>)
    2ab6:	4413      	add	r3, r2
    2ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2abc:	2b00      	cmp	r3, #0
    2abe:	d071      	beq.n	2ba4 <_usb_d_dev_ep_trans+0x194>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    2ac0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2ac4:	009a      	lsls	r2, r3, #2
    2ac6:	4b39      	ldr	r3, [pc, #228]	; (2bac <_usb_d_dev_ep_trans+0x19c>)
    2ac8:	4413      	add	r3, r2
    2aca:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2ace:	f013 0f08 	tst.w	r3, #8
    2ad2:	d00b      	beq.n	2aec <_usb_d_dev_ep_trans+0xdc>
		return USB_HALTED;
    2ad4:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2ad6:	b005      	add	sp, #20
    2ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2adc:	4615      	mov	r5, r2
    2ade:	e7c1      	b.n	2a64 <_usb_d_dev_ep_trans+0x54>
	bool use_cache = false;
    2ae0:	f04f 0a00 	mov.w	sl, #0
    2ae4:	e7df      	b.n	2aa6 <_usb_d_dev_ep_trans+0x96>
    2ae6:	f04f 0a00 	mov.w	sl, #0
    2aea:	e7dc      	b.n	2aa6 <_usb_d_dev_ep_trans+0x96>
    2aec:	4607      	mov	r7, r0
	atomic_enter_critical(&flags);
    2aee:	a803      	add	r0, sp, #12
    2af0:	4b30      	ldr	r3, [pc, #192]	; (2bb4 <_usb_d_dev_ep_trans+0x1a4>)
    2af2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    2af4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2af8:	009a      	lsls	r2, r3, #2
    2afa:	4b2c      	ldr	r3, [pc, #176]	; (2bac <_usb_d_dev_ep_trans+0x19c>)
    2afc:	4413      	add	r3, r2
    2afe:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2b02:	f013 0f40 	tst.w	r3, #64	; 0x40
    2b06:	d125      	bne.n	2b54 <_usb_d_dev_ep_trans+0x144>
	ept->flags.bits.is_busy = 1;
    2b08:	00a3      	lsls	r3, r4, #2
    2b0a:	4423      	add	r3, r4
    2b0c:	009a      	lsls	r2, r3, #2
    2b0e:	4b27      	ldr	r3, [pc, #156]	; (2bac <_usb_d_dev_ep_trans+0x19c>)
    2b10:	eb03 0b02 	add.w	fp, r3, r2
    2b14:	f10b 0380 	add.w	r3, fp, #128	; 0x80
    2b18:	4619      	mov	r1, r3
    2b1a:	79db      	ldrb	r3, [r3, #7]
    2b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2b20:	9101      	str	r1, [sp, #4]
    2b22:	71cb      	strb	r3, [r1, #7]
	atomic_leave_critical(&flags);
    2b24:	a803      	add	r0, sp, #12
    2b26:	4b24      	ldr	r3, [pc, #144]	; (2bb8 <_usb_d_dev_ep_trans+0x1a8>)
    2b28:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    2b2a:	683b      	ldr	r3, [r7, #0]
    2b2c:	f8cb 3074 	str.w	r3, [fp, #116]	; 0x74
	ept->trans_size  = trans->size;
    2b30:	687b      	ldr	r3, [r7, #4]
    2b32:	f8cb 3078 	str.w	r3, [fp, #120]	; 0x78
	ept->trans_count = 0;
    2b36:	2300      	movs	r3, #0
    2b38:	f8cb 307c 	str.w	r3, [fp, #124]	; 0x7c
	ept->flags.bits.dir       = dir;
    2b3c:	9901      	ldr	r1, [sp, #4]
    2b3e:	79cb      	ldrb	r3, [r1, #7]
    2b40:	f369 13c7 	bfi	r3, r9, #7, #1
	ept->flags.bits.use_cache = use_cache;
    2b44:	f36a 1345 	bfi	r3, sl, #5, #1
    2b48:	71cb      	strb	r3, [r1, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2b4a:	7a7b      	ldrb	r3, [r7, #9]
    2b4c:	b13b      	cbz	r3, 2b5e <_usb_d_dev_ep_trans+0x14e>
    2b4e:	b1dd      	cbz	r5, 2b88 <_usb_d_dev_ep_trans+0x178>
    2b50:	2100      	movs	r1, #0
    2b52:	e005      	b.n	2b60 <_usb_d_dev_ep_trans+0x150>
		atomic_leave_critical(&flags);
    2b54:	a803      	add	r0, sp, #12
    2b56:	4b18      	ldr	r3, [pc, #96]	; (2bb8 <_usb_d_dev_ep_trans+0x1a8>)
    2b58:	4798      	blx	r3
		return USB_BUSY;
    2b5a:	2001      	movs	r0, #1
    2b5c:	e7bb      	b.n	2ad6 <_usb_d_dev_ep_trans+0xc6>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2b5e:	2100      	movs	r1, #0
    2b60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2b64:	00a2      	lsls	r2, r4, #2
    2b66:	4b11      	ldr	r3, [pc, #68]	; (2bac <_usb_d_dev_ep_trans+0x19c>)
    2b68:	4413      	add	r3, r2
    2b6a:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2b6e:	f361 1204 	bfi	r2, r1, #4, #1
    2b72:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	if (dir) {
    2b76:	f1b8 0f00 	cmp.w	r8, #0
    2b7a:	db07      	blt.n	2b8c <_usb_d_dev_ep_trans+0x17c>
		_usb_d_dev_out_next(ept, false);
    2b7c:	2100      	movs	r1, #0
    2b7e:	4630      	mov	r0, r6
    2b80:	4b0e      	ldr	r3, [pc, #56]	; (2bbc <_usb_d_dev_ep_trans+0x1ac>)
    2b82:	4798      	blx	r3
	return ERR_NONE;
    2b84:	2000      	movs	r0, #0
    2b86:	e7a6      	b.n	2ad6 <_usb_d_dev_ep_trans+0xc6>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2b88:	2101      	movs	r1, #1
    2b8a:	e7e9      	b.n	2b60 <_usb_d_dev_ep_trans+0x150>
		_usb_d_dev_in_next(ept, false);
    2b8c:	2100      	movs	r1, #0
    2b8e:	4630      	mov	r0, r6
    2b90:	4b0b      	ldr	r3, [pc, #44]	; (2bc0 <_usb_d_dev_ep_trans+0x1b0>)
    2b92:	4798      	blx	r3
	return ERR_NONE;
    2b94:	2000      	movs	r0, #0
    2b96:	e79e      	b.n	2ad6 <_usb_d_dev_ep_trans+0xc6>
		return -USB_ERR_PARAM;
    2b98:	f06f 0011 	mvn.w	r0, #17
    2b9c:	e79b      	b.n	2ad6 <_usb_d_dev_ep_trans+0xc6>
			return -USB_ERR_FUNC;
    2b9e:	f06f 0012 	mvn.w	r0, #18
    2ba2:	e798      	b.n	2ad6 <_usb_d_dev_ep_trans+0xc6>
			return -USB_ERR_PARAM;
    2ba4:	f06f 0011 	mvn.w	r0, #17
    2ba8:	e795      	b.n	2ad6 <_usb_d_dev_ep_trans+0xc6>
    2baa:	bf00      	nop
    2bac:	200000ec 	.word	0x200000ec
    2bb0:	20021fff 	.word	0x20021fff
    2bb4:	000008f9 	.word	0x000008f9
    2bb8:	00000907 	.word	0x00000907
    2bbc:	00002345 	.word	0x00002345
    2bc0:	000021e1 	.word	0x000021e1

00002bc4 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2bc4:	460b      	mov	r3, r1
    2bc6:	b129      	cbz	r1, 2bd4 <_usb_d_dev_register_ep_callback+0x10>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2bc8:	b130      	cbz	r0, 2bd8 <_usb_d_dev_register_ep_callback+0x14>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2bca:	2801      	cmp	r0, #1
    2bcc:	d007      	beq.n	2bde <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2bce:	2802      	cmp	r0, #2
    2bd0:	d008      	beq.n	2be4 <_usb_d_dev_register_ep_callback+0x20>
    2bd2:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2bd4:	4b05      	ldr	r3, [pc, #20]	; (2bec <_usb_d_dev_register_ep_callback+0x28>)
    2bd6:	e7f7      	b.n	2bc8 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2bd8:	4a05      	ldr	r2, [pc, #20]	; (2bf0 <_usb_d_dev_register_ep_callback+0x2c>)
    2bda:	6693      	str	r3, [r2, #104]	; 0x68
    2bdc:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2bde:	4a04      	ldr	r2, [pc, #16]	; (2bf0 <_usb_d_dev_register_ep_callback+0x2c>)
    2be0:	66d3      	str	r3, [r2, #108]	; 0x6c
    2be2:	4770      	bx	lr
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    2be4:	4a02      	ldr	r2, [pc, #8]	; (2bf0 <_usb_d_dev_register_ep_callback+0x2c>)
    2be6:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    2be8:	e7f3      	b.n	2bd2 <_usb_d_dev_register_ep_callback+0xe>
    2bea:	bf00      	nop
    2bec:	00001ec9 	.word	0x00001ec9
    2bf0:	200000ec 	.word	0x200000ec

00002bf4 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    2bf4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2bf6:	4b01      	ldr	r3, [pc, #4]	; (2bfc <USB_0_Handler+0x8>)
    2bf8:	4798      	blx	r3
    2bfa:	bd08      	pop	{r3, pc}
    2bfc:	00002505 	.word	0x00002505

00002c00 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    2c00:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2c02:	4b01      	ldr	r3, [pc, #4]	; (2c08 <USB_1_Handler+0x8>)
    2c04:	4798      	blx	r3
    2c06:	bd08      	pop	{r3, pc}
    2c08:	00002505 	.word	0x00002505

00002c0c <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    2c0c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2c0e:	4b01      	ldr	r3, [pc, #4]	; (2c14 <USB_2_Handler+0x8>)
    2c10:	4798      	blx	r3
    2c12:	bd08      	pop	{r3, pc}
    2c14:	00002505 	.word	0x00002505

00002c18 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    2c18:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2c1a:	4b01      	ldr	r3, [pc, #4]	; (2c20 <USB_3_Handler+0x8>)
    2c1c:	4798      	blx	r3
    2c1e:	bd08      	pop	{r3, pc}
    2c20:	00002505 	.word	0x00002505

00002c24 <main>:
#include <atmel_start.h>


int main(void)
{
    2c24:	b500      	push	{lr}
    2c26:	b083      	sub	sp, #12
	/* Initializes MCU, drivers and middleware */
	//touch init is disabled in this function because it's causing problems. Needs work.
	atmel_start_init();
    2c28:	4b18      	ldr	r3, [pc, #96]	; (2c8c <main+0x68>)
    2c2a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2c2c:	4b18      	ldr	r3, [pc, #96]	; (2c90 <main+0x6c>)
    2c2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    2c32:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c34:	4917      	ldr	r1, [pc, #92]	; (2c94 <main+0x70>)
    2c36:	6299      	str	r1, [r3, #40]	; 0x28
    2c38:	4917      	ldr	r1, [pc, #92]	; (2c98 <main+0x74>)
    2c3a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2c3c:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    2c3e:	f893 105b 	ldrb.w	r1, [r3, #91]	; 0x5b
    2c42:	f041 0104 	orr.w	r1, r1, #4
    2c46:	f883 105b 	strb.w	r1, [r3, #91]	; 0x5b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2c4a:	619a      	str	r2, [r3, #24]

	/* Replace with your application code */
	//Super basic init and button/LED test
	gpio_set_pin_direction(PIN_PA27,GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(PIN_PA27,GPIO_PULL_UP);
	pwm_set_parameters(&PWM_0, 10000, 5000);
    2c4c:	f241 3288 	movw	r2, #5000	; 0x1388
    2c50:	f242 7110 	movw	r1, #10000	; 0x2710
    2c54:	4811      	ldr	r0, [pc, #68]	; (2c9c <main+0x78>)
    2c56:	4b12      	ldr	r3, [pc, #72]	; (2ca0 <main+0x7c>)
    2c58:	4798      	blx	r3
    2c5a:	e002      	b.n	2c62 <main+0x3e>
		if(gpio_get_pin_level(PIN_PA27)){
			//gpio_set_pin_level(PIN_PA21,true);
			pwm_disable(&PWM_0);
		} else {
			//gpio_set_pin_level(PIN_PA21,false);
			pwm_enable(&PWM_0);
    2c5c:	480f      	ldr	r0, [pc, #60]	; (2c9c <main+0x78>)
    2c5e:	4b11      	ldr	r3, [pc, #68]	; (2ca4 <main+0x80>)
    2c60:	4798      	blx	r3
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    2c62:	a801      	add	r0, sp, #4
    2c64:	4b10      	ldr	r3, [pc, #64]	; (2ca8 <main+0x84>)
    2c66:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2c68:	4b09      	ldr	r3, [pc, #36]	; (2c90 <main+0x6c>)
    2c6a:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2c6c:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2c6e:	691c      	ldr	r4, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2c70:	4054      	eors	r4, r2
    2c72:	400c      	ands	r4, r1
    2c74:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    2c76:	a801      	add	r0, sp, #4
    2c78:	4b0c      	ldr	r3, [pc, #48]	; (2cac <main+0x88>)
    2c7a:	4798      	blx	r3
		if(gpio_get_pin_level(PIN_PA27)){
    2c7c:	f014 6f00 	tst.w	r4, #134217728	; 0x8000000
    2c80:	d0ec      	beq.n	2c5c <main+0x38>
			pwm_disable(&PWM_0);
    2c82:	4806      	ldr	r0, [pc, #24]	; (2c9c <main+0x78>)
    2c84:	4b0a      	ldr	r3, [pc, #40]	; (2cb0 <main+0x8c>)
    2c86:	4798      	blx	r3
    2c88:	e7eb      	b.n	2c62 <main+0x3e>
    2c8a:	bf00      	nop
    2c8c:	000002d1 	.word	0x000002d1
    2c90:	41008000 	.word	0x41008000
    2c94:	40020000 	.word	0x40020000
    2c98:	c0020800 	.word	0xc0020800
    2c9c:	200002f0 	.word	0x200002f0
    2ca0:	00000a85 	.word	0x00000a85
    2ca4:	00000a0d 	.word	0x00000a0d
    2ca8:	000008f9 	.word	0x000008f9
    2cac:	00000907 	.word	0x00000907
    2cb0:	00000a49 	.word	0x00000a49

00002cb4 <ADC0_1_Handler>:
Input    :  none
Output  :  none
Notes    :  none
============================================================================*/
void ADC0_1_Handler(void)
{
    2cb4:	b508      	push	{r3, lr}
	ADC0->INTFLAG.reg |= 1u;
    2cb6:	4a05      	ldr	r2, [pc, #20]	; (2ccc <ADC0_1_Handler+0x18>)
    2cb8:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
    2cbc:	f043 0301 	orr.w	r3, r3, #1
    2cc0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	qtm_same53_ptc_handler();
    2cc4:	4b02      	ldr	r3, [pc, #8]	; (2cd0 <ADC0_1_Handler+0x1c>)
    2cc6:	4798      	blx	r3
    2cc8:	bd08      	pop	{r3, pc}
    2cca:	bf00      	nop
    2ccc:	43001c00 	.word	0x43001c00
    2cd0:	00002ee9 	.word	0x00002ee9

00002cd4 <sync_config>:
    2cd4:	4b02      	ldr	r3, [pc, #8]	; (2ce0 <sync_config+0xc>)
    2cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2cd8:	2a00      	cmp	r2, #0
    2cda:	d1fc      	bne.n	2cd6 <sync_config+0x2>
    2cdc:	4770      	bx	lr
    2cde:	bf00      	nop
    2ce0:	43001c00 	.word	0x43001c00

00002ce4 <select_next_channel_to_measure>:
    2ce4:	490c      	ldr	r1, [pc, #48]	; (2d18 <select_next_channel_to_measure+0x34>)
    2ce6:	4a0d      	ldr	r2, [pc, #52]	; (2d1c <select_next_channel_to_measure+0x38>)
    2ce8:	6809      	ldr	r1, [r1, #0]
    2cea:	8813      	ldrh	r3, [r2, #0]
    2cec:	6808      	ldr	r0, [r1, #0]
    2cee:	8800      	ldrh	r0, [r0, #0]
    2cf0:	b570      	push	{r4, r5, r6, lr}
    2cf2:	2406      	movs	r4, #6
    2cf4:	4283      	cmp	r3, r0
    2cf6:	d20b      	bcs.n	2d10 <select_next_channel_to_measure+0x2c>
    2cf8:	688e      	ldr	r6, [r1, #8]
    2cfa:	fb04 f503 	mul.w	r5, r4, r3
    2cfe:	5d75      	ldrb	r5, [r6, r5]
    2d00:	07ed      	lsls	r5, r5, #31
    2d02:	d402      	bmi.n	2d0a <select_next_channel_to_measure+0x26>
    2d04:	3301      	adds	r3, #1
    2d06:	b29b      	uxth	r3, r3
    2d08:	e7f4      	b.n	2cf4 <select_next_channel_to_measure+0x10>
    2d0a:	8013      	strh	r3, [r2, #0]
    2d0c:	2000      	movs	r0, #0
    2d0e:	bd70      	pop	{r4, r5, r6, pc}
    2d10:	2300      	movs	r3, #0
    2d12:	8013      	strh	r3, [r2, #0]
    2d14:	2001      	movs	r0, #1
    2d16:	bd70      	pop	{r4, r5, r6, pc}
    2d18:	2000037c 	.word	0x2000037c
    2d1c:	200002d4 	.word	0x200002d4

00002d20 <qtm_measure_node>:
    2d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d24:	4c69      	ldr	r4, [pc, #420]	; (2ecc <qtm_measure_node+0x1ac>)
    2d26:	496a      	ldr	r1, [pc, #424]	; (2ed0 <qtm_measure_node+0x1b0>)
    2d28:	4e6a      	ldr	r6, [pc, #424]	; (2ed4 <qtm_measure_node+0x1b4>)
    2d2a:	4788      	blx	r1
    2d2c:	8823      	ldrh	r3, [r4, #0]
    2d2e:	f36f 0341 	bfc	r3, #1, #1
    2d32:	8023      	strh	r3, [r4, #0]
    2d34:	4788      	blx	r1
    2d36:	4788      	blx	r1
    2d38:	6833      	ldr	r3, [r6, #0]
    2d3a:	270c      	movs	r7, #12
    2d3c:	685b      	ldr	r3, [r3, #4]
    2d3e:	4347      	muls	r7, r0
    2d40:	443b      	add	r3, r7
    2d42:	46b1      	mov	r9, r6
    2d44:	685b      	ldr	r3, [r3, #4]
    2d46:	62a3      	str	r3, [r4, #40]	; 0x28
    2d48:	4788      	blx	r1
    2d4a:	6832      	ldr	r2, [r6, #0]
    2d4c:	6853      	ldr	r3, [r2, #4]
    2d4e:	59db      	ldr	r3, [r3, r7]
    2d50:	6263      	str	r3, [r4, #36]	; 0x24
    2d52:	2306      	movs	r3, #6
    2d54:	4358      	muls	r0, r3
    2d56:	6893      	ldr	r3, [r2, #8]
    2d58:	f813 e000 	ldrb.w	lr, [r3, r0]
    2d5c:	181c      	adds	r4, r3, r0
    2d5e:	f01e 0f02 	tst.w	lr, #2
    2d62:	bf18      	it	ne
    2d64:	2605      	movne	r6, #5
    2d66:	88a4      	ldrh	r4, [r4, #4]
    2d68:	bf18      	it	ne
    2d6a:	541e      	strbne	r6, [r3, r0]
    2d6c:	6893      	ldr	r3, [r2, #8]
    2d6e:	5c1b      	ldrb	r3, [r3, r0]
    2d70:	f04f 0500 	mov.w	r5, #0
    2d74:	f013 0f1c 	tst.w	r3, #28
    2d78:	46ab      	mov	fp, r5
    2d7a:	46aa      	mov	sl, r5
    2d7c:	6853      	ldr	r3, [r2, #4]
    2d7e:	d10b      	bne.n	2d98 <qtm_measure_node+0x78>
    2d80:	19da      	adds	r2, r3, r7
    2d82:	7a90      	ldrb	r0, [r2, #10]
    2d84:	4a54      	ldr	r2, [pc, #336]	; (2ed8 <qtm_measure_node+0x1b8>)
    2d86:	eb02 1210 	add.w	r2, r2, r0, lsr #4
    2d8a:	7a12      	ldrb	r2, [r2, #8]
    2d8c:	f362 4413 	bfi	r4, r2, #16, #4
    2d90:	0912      	lsrs	r2, r2, #4
    2d92:	f362 5415 	bfi	r4, r2, #20, #2
    2d96:	e001      	b.n	2d9c <qtm_measure_node+0x7c>
    2d98:	f444 147c 	orr.w	r4, r4, #4128768	; 0x3f0000
    2d9c:	443b      	add	r3, r7
    2d9e:	7a18      	ldrb	r0, [r3, #8]
    2da0:	4788      	blx	r1
    2da2:	4b4a      	ldr	r3, [pc, #296]	; (2ecc <qtm_measure_node+0x1ac>)
    2da4:	283a      	cmp	r0, #58	; 0x3a
    2da6:	bf97      	itett	ls
    2da8:	7ada      	ldrbls	r2, [r3, #11]
    2daa:	7ada      	ldrbhi	r2, [r3, #11]
    2dac:	3004      	addls	r0, #4
    2dae:	f360 0205 	bfils	r2, r0, #0, #6
    2db2:	bf88      	it	hi
    2db4:	f042 023f 	orrhi.w	r2, r2, #63	; 0x3f
    2db8:	72da      	strb	r2, [r3, #11]
    2dba:	4788      	blx	r1
    2dbc:	4b43      	ldr	r3, [pc, #268]	; (2ecc <qtm_measure_node+0x1ac>)
    2dbe:	61dc      	str	r4, [r3, #28]
    2dc0:	4788      	blx	r1
    2dc2:	f8d9 3000 	ldr.w	r3, [r9]
    2dc6:	4a45      	ldr	r2, [pc, #276]	; (2edc <qtm_measure_node+0x1bc>)
    2dc8:	685b      	ldr	r3, [r3, #4]
    2dca:	f8d2 8004 	ldr.w	r8, [r2, #4]
    2dce:	443b      	add	r3, r7
    2dd0:	7adb      	ldrb	r3, [r3, #11]
    2dd2:	f1b8 0f00 	cmp.w	r8, #0
    2dd6:	d002      	beq.n	2dde <qtm_measure_node+0xbe>
    2dd8:	2b04      	cmp	r3, #4
    2dda:	bf28      	it	cs
    2ddc:	2304      	movcs	r3, #4
    2dde:	f363 0a03 	bfi	sl, r3, #0, #4
    2de2:	2302      	movs	r3, #2
    2de4:	4c39      	ldr	r4, [pc, #228]	; (2ecc <qtm_measure_node+0x1ac>)
    2de6:	4e3a      	ldr	r6, [pc, #232]	; (2ed0 <qtm_measure_node+0x1b0>)
    2de8:	f363 0bc4 	bfi	fp, r3, #3, #2
    2dec:	2304      	movs	r3, #4
    2dee:	f363 2b0a 	bfi	fp, r3, #8, #3
    2df2:	f36f 1a06 	bfc	sl, #4, #3
    2df6:	4788      	blx	r1
    2df8:	f8a4 b006 	strh.w	fp, [r4, #6]
    2dfc:	4788      	blx	r1
    2dfe:	f884 a00a 	strb.w	sl, [r4, #10]
    2e02:	f8d9 3000 	ldr.w	r3, [r9]
    2e06:	685b      	ldr	r3, [r3, #4]
    2e08:	443b      	add	r3, r7
    2e0a:	7a58      	ldrb	r0, [r3, #9]
    2e0c:	0900      	lsrs	r0, r0, #4
    2e0e:	4788      	blx	r1
    2e10:	69a3      	ldr	r3, [r4, #24]
    2e12:	f360 5316 	bfi	r3, r0, #20, #3
    2e16:	61a3      	str	r3, [r4, #24]
    2e18:	f8d9 3000 	ldr.w	r3, [r9]
    2e1c:	685b      	ldr	r3, [r3, #4]
    2e1e:	441f      	add	r7, r3
    2e20:	7a7b      	ldrb	r3, [r7, #9]
    2e22:	f363 250a 	bfi	r5, r3, #8, #3
    2e26:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    2e2a:	f36f 15c7 	bfc	r5, #7, #1
    2e2e:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
    2e32:	f045 0504 	orr.w	r5, r5, #4
    2e36:	4788      	blx	r1
    2e38:	b2ad      	uxth	r5, r5
    2e3a:	2307      	movs	r3, #7
    2e3c:	8025      	strh	r5, [r4, #0]
    2e3e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    2e42:	4788      	blx	r1
    2e44:	8823      	ldrh	r3, [r4, #0]
    2e46:	f043 0302 	orr.w	r3, r3, #2
    2e4a:	8023      	strh	r3, [r4, #0]
    2e4c:	4788      	blx	r1
    2e4e:	f1b8 0f00 	cmp.w	r8, #0
    2e52:	d02e      	beq.n	2eb2 <qtm_measure_node+0x192>
    2e54:	47b0      	blx	r6
    2e56:	7ae0      	ldrb	r0, [r4, #11]
    2e58:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    2e5c:	47b0      	blx	r6
    2e5e:	69a1      	ldr	r1, [r4, #24]
    2e60:	f3c1 2103 	ubfx	r1, r1, #8, #4
    2e64:	47b0      	blx	r6
    2e66:	8827      	ldrh	r7, [r4, #0]
    2e68:	47b0      	blx	r6
    2e6a:	8823      	ldrh	r3, [r4, #0]
    2e6c:	f36f 0341 	bfc	r3, #1, #1
    2e70:	8023      	strh	r3, [r4, #0]
    2e72:	47b0      	blx	r6
    2e74:	78a5      	ldrb	r5, [r4, #2]
    2e76:	f045 0512 	orr.w	r5, r5, #18
    2e7a:	b2ed      	uxtb	r5, r5
    2e7c:	47b0      	blx	r6
    2e7e:	70a5      	strb	r5, [r4, #2]
    2e80:	47b0      	blx	r6
    2e82:	4b17      	ldr	r3, [pc, #92]	; (2ee0 <qtm_measure_node+0x1c0>)
    2e84:	7aa5      	ldrb	r5, [r4, #10]
    2e86:	681a      	ldr	r2, [r3, #0]
    2e88:	7813      	ldrb	r3, [r2, #0]
    2e8a:	f043 0308 	orr.w	r3, r3, #8
    2e8e:	7013      	strb	r3, [r2, #0]
    2e90:	47b0      	blx	r6
    2e92:	7aa3      	ldrb	r3, [r4, #10]
    2e94:	f3c7 2702 	ubfx	r7, r7, #8, #3
    2e98:	f36f 0303 	bfc	r3, #0, #4
    2e9c:	b2ed      	uxtb	r5, r5
    2e9e:	72a3      	strb	r3, [r4, #10]
    2ea0:	463a      	mov	r2, r7
    2ea2:	4b10      	ldr	r3, [pc, #64]	; (2ee4 <qtm_measure_node+0x1c4>)
    2ea4:	9500      	str	r5, [sp, #0]
    2ea6:	47c0      	blx	r8
    2ea8:	47b0      	blx	r6
    2eaa:	8823      	ldrh	r3, [r4, #0]
    2eac:	f043 0302 	orr.w	r3, r3, #2
    2eb0:	8023      	strh	r3, [r4, #0]
    2eb2:	47b0      	blx	r6
    2eb4:	7d23      	ldrb	r3, [r4, #20]
    2eb6:	4a05      	ldr	r2, [pc, #20]	; (2ecc <qtm_measure_node+0x1ac>)
    2eb8:	f043 0302 	orr.w	r3, r3, #2
    2ebc:	7523      	strb	r3, [r4, #20]
    2ebe:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
    2ec2:	07db      	lsls	r3, r3, #31
    2ec4:	d5fb      	bpl.n	2ebe <qtm_measure_node+0x19e>
    2ec6:	b003      	add	sp, #12
    2ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ecc:	43001c00 	.word	0x43001c00
    2ed0:	00002cd5 	.word	0x00002cd5
    2ed4:	2000037c 	.word	0x2000037c
    2ed8:	00003218 	.word	0x00003218
    2edc:	200002d4 	.word	0x200002d4
    2ee0:	20000374 	.word	0x20000374
    2ee4:	43001c0a 	.word	0x43001c0a

00002ee8 <qtm_same54_ptc_handler>:
    2ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2eec:	4a44      	ldr	r2, [pc, #272]	; (3000 <qtm_same54_ptc_handler+0x118>)
    2eee:	4945      	ldr	r1, [pc, #276]	; (3004 <qtm_same54_ptc_handler+0x11c>)
    2ef0:	4c45      	ldr	r4, [pc, #276]	; (3008 <qtm_same54_ptc_handler+0x120>)
    2ef2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
    2ef6:	680d      	ldr	r5, [r1, #0]
    2ef8:	8821      	ldrh	r1, [r4, #0]
    2efa:	4844      	ldr	r0, [pc, #272]	; (300c <qtm_same54_ptc_handler+0x124>)
    2efc:	b29b      	uxth	r3, r3
    2efe:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]
    2f02:	2107      	movs	r1, #7
    2f04:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
    2f08:	8811      	ldrh	r1, [r2, #0]
    2f0a:	f36f 0141 	bfc	r1, #1, #1
    2f0e:	8011      	strh	r1, [r2, #0]
    2f10:	6802      	ldr	r2, [r0, #0]
    2f12:	8826      	ldrh	r6, [r4, #0]
    2f14:	6851      	ldr	r1, [r2, #4]
    2f16:	220c      	movs	r2, #12
    2f18:	fb02 1206 	mla	r2, r2, r6, r1
    2f1c:	7ad2      	ldrb	r2, [r2, #11]
    2f1e:	2a04      	cmp	r2, #4
    2f20:	d918      	bls.n	2f54 <qtm_same54_ptc_handler+0x6c>
    2f22:	6861      	ldr	r1, [r4, #4]
    2f24:	b1b1      	cbz	r1, 2f54 <qtm_same54_ptc_handler+0x6c>
    2f26:	7d21      	ldrb	r1, [r4, #20]
    2f28:	3101      	adds	r1, #1
    2f2a:	b2c9      	uxtb	r1, r1
    2f2c:	7521      	strb	r1, [r4, #20]
    2f2e:	69a1      	ldr	r1, [r4, #24]
    2f30:	4419      	add	r1, r3
    2f32:	61a1      	str	r1, [r4, #24]
    2f34:	3a04      	subs	r2, #4
    2f36:	f894 e014 	ldrb.w	lr, [r4, #20]
    2f3a:	b2d2      	uxtb	r2, r2
    2f3c:	2101      	movs	r1, #1
    2f3e:	fa01 f702 	lsl.w	r7, r1, r2
    2f42:	45be      	cmp	lr, r7
    2f44:	d108      	bne.n	2f58 <qtm_same54_ptc_handler+0x70>
    2f46:	69a7      	ldr	r7, [r4, #24]
    2f48:	fa27 f202 	lsr.w	r2, r7, r2
    2f4c:	f825 2016 	strh.w	r2, [r5, r6, lsl #1]
    2f50:	460a      	mov	r2, r1
    2f52:	e002      	b.n	2f5a <qtm_same54_ptc_handler+0x72>
    2f54:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
    2f58:	2200      	movs	r2, #0
    2f5a:	492d      	ldr	r1, [pc, #180]	; (3010 <qtm_same54_ptc_handler+0x128>)
    2f5c:	7809      	ldrb	r1, [r1, #0]
    2f5e:	2901      	cmp	r1, #1
    2f60:	d003      	beq.n	2f6a <qtm_same54_ptc_handler+0x82>
    2f62:	2902      	cmp	r1, #2
    2f64:	d022      	beq.n	2fac <qtm_same54_ptc_handler+0xc4>
    2f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f6a:	6800      	ldr	r0, [r0, #0]
    2f6c:	8823      	ldrh	r3, [r4, #0]
    2f6e:	6845      	ldr	r5, [r0, #4]
    2f70:	4925      	ldr	r1, [pc, #148]	; (3008 <qtm_same54_ptc_handler+0x120>)
    2f72:	200c      	movs	r0, #12
    2f74:	fb00 5003 	mla	r0, r0, r3, r5
    2f78:	7ac0      	ldrb	r0, [r0, #11]
    2f7a:	2804      	cmp	r0, #4
    2f7c:	d908      	bls.n	2f90 <qtm_same54_ptc_handler+0xa8>
    2f7e:	6848      	ldr	r0, [r1, #4]
    2f80:	b130      	cbz	r0, 2f90 <qtm_same54_ptc_handler+0xa8>
    2f82:	b13a      	cbz	r2, 2f94 <qtm_same54_ptc_handler+0xac>
    2f84:	2200      	movs	r2, #0
    2f86:	3301      	adds	r3, #1
    2f88:	618a      	str	r2, [r1, #24]
    2f8a:	800b      	strh	r3, [r1, #0]
    2f8c:	750a      	strb	r2, [r1, #20]
    2f8e:	e001      	b.n	2f94 <qtm_same54_ptc_handler+0xac>
    2f90:	3301      	adds	r3, #1
    2f92:	8023      	strh	r3, [r4, #0]
    2f94:	4b1f      	ldr	r3, [pc, #124]	; (3014 <qtm_same54_ptc_handler+0x12c>)
    2f96:	4798      	blx	r3
    2f98:	b920      	cbnz	r0, 2fa4 <qtm_same54_ptc_handler+0xbc>
    2f9a:	4b1f      	ldr	r3, [pc, #124]	; (3018 <qtm_same54_ptc_handler+0x130>)
    2f9c:	8820      	ldrh	r0, [r4, #0]
    2f9e:	4798      	blx	r3
    2fa0:	2304      	movs	r3, #4
    2fa2:	e029      	b.n	2ff8 <qtm_same54_ptc_handler+0x110>
    2fa4:	68e3      	ldr	r3, [r4, #12]
    2fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2faa:	4718      	bx	r3
    2fac:	6806      	ldr	r6, [r0, #0]
    2fae:	8820      	ldrh	r0, [r4, #0]
    2fb0:	6875      	ldr	r5, [r6, #4]
    2fb2:	220c      	movs	r2, #12
    2fb4:	fb02 5500 	mla	r5, r2, r0, r5
    2fb8:	7aaa      	ldrb	r2, [r5, #10]
    2fba:	f002 010f 	and.w	r1, r2, #15
    2fbe:	7aea      	ldrb	r2, [r5, #11]
    2fc0:	2a04      	cmp	r2, #4
    2fc2:	bf28      	it	cs
    2fc4:	2204      	movcs	r2, #4
    2fc6:	4291      	cmp	r1, r2
    2fc8:	bf3a      	itte	cc
    2fca:	1a52      	subcc	r2, r2, r1
    2fcc:	b2d2      	uxtbcc	r2, r2
    2fce:	2200      	movcs	r2, #0
    2fd0:	68b1      	ldr	r1, [r6, #8]
    2fd2:	4113      	asrs	r3, r2
    2fd4:	4a11      	ldr	r2, [pc, #68]	; (301c <qtm_same54_ptc_handler+0x134>)
    2fd6:	2506      	movs	r5, #6
    2fd8:	fb05 1100 	mla	r1, r5, r0, r1
    2fdc:	6812      	ldr	r2, [r2, #0]
    2fde:	884d      	ldrh	r5, [r1, #2]
    2fe0:	7992      	ldrb	r2, [r2, #6]
    2fe2:	b298      	uxth	r0, r3
    2fe4:	1aae      	subs	r6, r5, r2
    2fe6:	42b0      	cmp	r0, r6
    2fe8:	dd02      	ble.n	2ff0 <qtm_same54_ptc_handler+0x108>
    2fea:	442a      	add	r2, r5
    2fec:	4290      	cmp	r0, r2
    2fee:	db02      	blt.n	2ff6 <qtm_same54_ptc_handler+0x10e>
    2ff0:	804b      	strh	r3, [r1, #2]
    2ff2:	6923      	ldr	r3, [r4, #16]
    2ff4:	4798      	blx	r3
    2ff6:	2302      	movs	r3, #2
    2ff8:	7223      	strb	r3, [r4, #8]
    2ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ffe:	bf00      	nop
    3000:	43001c00 	.word	0x43001c00
    3004:	20000380 	.word	0x20000380
    3008:	200002d4 	.word	0x200002d4
    300c:	2000037c 	.word	0x2000037c
    3010:	20000044 	.word	0x20000044
    3014:	00002ce5 	.word	0x00002ce5
    3018:	00002d21 	.word	0x00002d21
    301c:	20000378 	.word	0x20000378

00003020 <__libc_init_array>:
    3020:	b570      	push	{r4, r5, r6, lr}
    3022:	4e0d      	ldr	r6, [pc, #52]	; (3058 <__libc_init_array+0x38>)
    3024:	4c0d      	ldr	r4, [pc, #52]	; (305c <__libc_init_array+0x3c>)
    3026:	1ba4      	subs	r4, r4, r6
    3028:	10a4      	asrs	r4, r4, #2
    302a:	2500      	movs	r5, #0
    302c:	42a5      	cmp	r5, r4
    302e:	d109      	bne.n	3044 <__libc_init_array+0x24>
    3030:	4e0b      	ldr	r6, [pc, #44]	; (3060 <__libc_init_array+0x40>)
    3032:	4c0c      	ldr	r4, [pc, #48]	; (3064 <__libc_init_array+0x44>)
    3034:	f000 f908 	bl	3248 <_init>
    3038:	1ba4      	subs	r4, r4, r6
    303a:	10a4      	asrs	r4, r4, #2
    303c:	2500      	movs	r5, #0
    303e:	42a5      	cmp	r5, r4
    3040:	d105      	bne.n	304e <__libc_init_array+0x2e>
    3042:	bd70      	pop	{r4, r5, r6, pc}
    3044:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    3048:	4798      	blx	r3
    304a:	3501      	adds	r5, #1
    304c:	e7ee      	b.n	302c <__libc_init_array+0xc>
    304e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    3052:	4798      	blx	r3
    3054:	3501      	adds	r5, #1
    3056:	e7f2      	b.n	303e <__libc_init_array+0x1e>
    3058:	00003254 	.word	0x00003254
    305c:	00003254 	.word	0x00003254
    3060:	00003254 	.word	0x00003254
    3064:	00003258 	.word	0x00003258

00003068 <memcpy>:
    3068:	b510      	push	{r4, lr}
    306a:	1e43      	subs	r3, r0, #1
    306c:	440a      	add	r2, r1
    306e:	4291      	cmp	r1, r2
    3070:	d100      	bne.n	3074 <memcpy+0xc>
    3072:	bd10      	pop	{r4, pc}
    3074:	f811 4b01 	ldrb.w	r4, [r1], #1
    3078:	f803 4f01 	strb.w	r4, [r3, #1]!
    307c:	e7f7      	b.n	306e <memcpy+0x6>

0000307e <memset>:
    307e:	4402      	add	r2, r0
    3080:	4603      	mov	r3, r0
    3082:	4293      	cmp	r3, r2
    3084:	d100      	bne.n	3088 <memset+0xa>
    3086:	4770      	bx	lr
    3088:	f803 1b01 	strb.w	r1, [r3], #1
    308c:	e7f9      	b.n	3082 <memset+0x4>
    308e:	0000      	movs	r0, r0
    3090:	682f2e2e 	.word	0x682f2e2e
    3094:	732f6c61 	.word	0x732f6c61
    3098:	682f6372 	.word	0x682f6372
    309c:	695f6c61 	.word	0x695f6c61
    30a0:	6d5f6332 	.word	0x6d5f6332
    30a4:	6e79735f 	.word	0x6e79735f
    30a8:	00632e63 	.word	0x00632e63
    30ac:	682f2e2e 	.word	0x682f2e2e
    30b0:	732f6c61 	.word	0x732f6c61
    30b4:	682f6372 	.word	0x682f6372
    30b8:	705f6c61 	.word	0x705f6c61
    30bc:	632e6d77 	.word	0x632e6d77
    30c0:	00000000 	.word	0x00000000
    30c4:	682f2e2e 	.word	0x682f2e2e
    30c8:	732f6c61 	.word	0x732f6c61
    30cc:	682f6372 	.word	0x682f6372
    30d0:	715f6c61 	.word	0x715f6c61
    30d4:	5f697073 	.word	0x5f697073
    30d8:	636e7973 	.word	0x636e7973
    30dc:	0000632e 	.word	0x0000632e
    30e0:	682f2e2e 	.word	0x682f2e2e
    30e4:	732f6c61 	.word	0x732f6c61
    30e8:	682f6372 	.word	0x682f6372
    30ec:	735f6c61 	.word	0x735f6c61
    30f0:	6d5f6970 	.word	0x6d5f6970
    30f4:	6e79735f 	.word	0x6e79735f
    30f8:	00632e63 	.word	0x00632e63
    30fc:	682f2e2e 	.word	0x682f2e2e
    3100:	732f6c61 	.word	0x732f6c61
    3104:	682f6372 	.word	0x682f6372
    3108:	745f6c61 	.word	0x745f6c61
    310c:	72656d69 	.word	0x72656d69
    3110:	0000632e 	.word	0x0000632e
    3114:	682f2e2e 	.word	0x682f2e2e
    3118:	752f6c61 	.word	0x752f6c61
    311c:	736c6974 	.word	0x736c6974
    3120:	6372732f 	.word	0x6372732f
    3124:	6974752f 	.word	0x6974752f
    3128:	6c5f736c 	.word	0x6c5f736c
    312c:	2e747369 	.word	0x2e747369
    3130:	00000063 	.word	0x00000063
    3134:	682f2e2e 	.word	0x682f2e2e
    3138:	712f6c70 	.word	0x712f6c70
    313c:	2f697073 	.word	0x2f697073
    3140:	5f6c7068 	.word	0x5f6c7068
    3144:	69707371 	.word	0x69707371
    3148:	0000632e 	.word	0x0000632e
    314c:	682f2e2e 	.word	0x682f2e2e
    3150:	722f6c70 	.word	0x722f6c70
    3154:	682f6374 	.word	0x682f6374
    3158:	725f6c70 	.word	0x725f6c70
    315c:	632e6374 	.word	0x632e6374
    3160:	00000000 	.word	0x00000000
    3164:	40003000 	.word	0x40003000
    3168:	40003400 	.word	0x40003400
    316c:	41012000 	.word	0x41012000
    3170:	41014000 	.word	0x41014000
    3174:	43000000 	.word	0x43000000
    3178:	43000400 	.word	0x43000400

0000317c <_usarts>:
	...

00003194 <_i2cms>:
    3194:	00000001 00200014 00000100 0000e6e5     ...... .........
    31a4:	00d70000 02dc6c00                       .....l..

000031ac <_i2css>:
	...

000031bc <sercomspi_regs>:
    31bc:	0030000c 00020000 00000000 01ff00fe     ..0.............
    31cc:	00000004 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    31dc:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    31ec:	00004a25 00000804                       %J......

000031f4 <_usb_ep_cfgs>:
    31f4:	20000294 00000000 00000040 20000254     ... ....@...T.. 
    3204:	00000000 00000040 20000214 00000000     ....@...... ....
    3214:	00000040                                @...

00003218 <multipliers_tau_calc>:
    3218:	00130007 00900035                       ....5...

00003220 <gain_setting_int_cap>:
    3220:	050b1c3f 48030103                                ?.....

00003226 <PTC_XY_PINS>:
    3226:	04494803 09080706 11100b0a 15141312     .HI.............
    3236:	1e1b1716 45444342 4d4c4746 41404f4e     ....BCDEFGLMNO@A
	...

00003248 <_init>:
    3248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    324a:	bf00      	nop
    324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    324e:	bc08      	pop	{r3}
    3250:	469e      	mov	lr, r3
    3252:	4770      	bx	lr

00003254 <__init_array_start>:
    3254:	00000289 	.word	0x00000289

00003258 <_fini>:
    3258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    325a:	bf00      	nop
    325c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    325e:	bc08      	pop	{r3}
    3260:	469e      	mov	lr, r3
    3262:	4770      	bx	lr

00003264 <__fini_array_start>:
    3264:	00000265 	.word	0x00000265
